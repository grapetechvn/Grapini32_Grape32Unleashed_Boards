
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ccc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08005eb8  08005eb8  00015eb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006178  08006178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000067c  20000000  08006180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000098  2000067c  080067fc  0002067c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000714  080067fc  00020714  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006faf  00000000  00000000  000206a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000174b  00000000  00000000  00027654  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000698  00000000  00000000  00028da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005c0  00000000  00000000  00029438  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003264  00000000  00000000  000299f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000238c  00000000  00000000  0002cc5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002efe8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000232c  00000000  00000000  0002f064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000067c 	.word	0x2000067c
 8000204:	00000000 	.word	0x00000000
 8000208:	08005e9c 	.word	0x08005e9c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000680 	.word	0x20000680
 8000224:	08005e9c 	.word	0x08005e9c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f092 0f00 	teq	r2, #0
 8000522:	bf14      	ite	ne
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e720      	b.n	800037c <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aedc 	beq.w	800032a <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6c1      	b.n	800032a <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b97a 	b.w	8000f04 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	468c      	mov	ip, r1
 8000c2e:	460e      	mov	r6, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	9d08      	ldr	r5, [sp, #32]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d150      	bne.n	8000cda <__udivmoddi4+0xb2>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d96c      	bls.n	8000d18 <__udivmoddi4+0xf0>
 8000c3e:	fab2 fe82 	clz	lr, r2
 8000c42:	f1be 0f00 	cmp.w	lr, #0
 8000c46:	d00b      	beq.n	8000c60 <__udivmoddi4+0x38>
 8000c48:	f1ce 0c20 	rsb	ip, lr, #32
 8000c4c:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c50:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c54:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c58:	ea4c 0c06 	orr.w	ip, ip, r6
 8000c5c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c60:	0c3a      	lsrs	r2, r7, #16
 8000c62:	fbbc f9f2 	udiv	r9, ip, r2
 8000c66:	b2bb      	uxth	r3, r7
 8000c68:	fb02 cc19 	mls	ip, r2, r9, ip
 8000c6c:	fb09 fa03 	mul.w	sl, r9, r3
 8000c70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000c74:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000c78:	45b2      	cmp	sl, r6
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x6a>
 8000c7c:	19f6      	adds	r6, r6, r7
 8000c7e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c82:	f080 8125 	bcs.w	8000ed0 <__udivmoddi4+0x2a8>
 8000c86:	45b2      	cmp	sl, r6
 8000c88:	f240 8122 	bls.w	8000ed0 <__udivmoddi4+0x2a8>
 8000c8c:	f1a9 0902 	sub.w	r9, r9, #2
 8000c90:	443e      	add	r6, r7
 8000c92:	eba6 060a 	sub.w	r6, r6, sl
 8000c96:	fbb6 f0f2 	udiv	r0, r6, r2
 8000c9a:	fb02 6610 	mls	r6, r2, r0, r6
 8000c9e:	fb00 f303 	mul.w	r3, r0, r3
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000ca8:	42a3      	cmp	r3, r4
 8000caa:	d909      	bls.n	8000cc0 <__udivmoddi4+0x98>
 8000cac:	19e4      	adds	r4, r4, r7
 8000cae:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb2:	f080 810b 	bcs.w	8000ecc <__udivmoddi4+0x2a4>
 8000cb6:	42a3      	cmp	r3, r4
 8000cb8:	f240 8108 	bls.w	8000ecc <__udivmoddi4+0x2a4>
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	443c      	add	r4, r7
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	1ae4      	subs	r4, r4, r3
 8000cc4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d062      	beq.n	8000d92 <__udivmoddi4+0x16a>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cd2:	602c      	str	r4, [r5, #0]
 8000cd4:	606b      	str	r3, [r5, #4]
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0xc6>
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d055      	beq.n	8000d8e <__udivmoddi4+0x166>
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	e885 0041 	stmia.w	r5, {r0, r6}
 8000ce8:	4608      	mov	r0, r1
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f183 	clz	r1, r3
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	f040 808f 	bne.w	8000e16 <__udivmoddi4+0x1ee>
 8000cf8:	42b3      	cmp	r3, r6
 8000cfa:	d302      	bcc.n	8000d02 <__udivmoddi4+0xda>
 8000cfc:	4282      	cmp	r2, r0
 8000cfe:	f200 80fc 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000d02:	1a84      	subs	r4, r0, r2
 8000d04:	eb66 0603 	sbc.w	r6, r6, r3
 8000d08:	2001      	movs	r0, #1
 8000d0a:	46b4      	mov	ip, r6
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d040      	beq.n	8000d92 <__udivmoddi4+0x16a>
 8000d10:	e885 1010 	stmia.w	r5, {r4, ip}
 8000d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d18:	b912      	cbnz	r2, 8000d20 <__udivmoddi4+0xf8>
 8000d1a:	2701      	movs	r7, #1
 8000d1c:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d20:	fab7 fe87 	clz	lr, r7
 8000d24:	f1be 0f00 	cmp.w	lr, #0
 8000d28:	d135      	bne.n	8000d96 <__udivmoddi4+0x16e>
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	1bf6      	subs	r6, r6, r7
 8000d2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000d32:	fa1f f887 	uxth.w	r8, r7
 8000d36:	fbb6 f2fc 	udiv	r2, r6, ip
 8000d3a:	fb0c 6612 	mls	r6, ip, r2, r6
 8000d3e:	fb08 f002 	mul.w	r0, r8, r2
 8000d42:	0c23      	lsrs	r3, r4, #16
 8000d44:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000d48:	42b0      	cmp	r0, r6
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x134>
 8000d4c:	19f6      	adds	r6, r6, r7
 8000d4e:	f102 33ff 	add.w	r3, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x132>
 8000d54:	42b0      	cmp	r0, r6
 8000d56:	f200 80d2 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	1a36      	subs	r6, r6, r0
 8000d5e:	fbb6 f0fc 	udiv	r0, r6, ip
 8000d62:	fb0c 6610 	mls	r6, ip, r0, r6
 8000d66:	fb08 f800 	mul.w	r8, r8, r0
 8000d6a:	b2a3      	uxth	r3, r4
 8000d6c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x15c>
 8000d74:	19e4      	adds	r4, r4, r7
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x15a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80b9 	bhi.w	8000ef4 <__udivmoddi4+0x2cc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d8c:	e79c      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d8e:	4629      	mov	r1, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d9a:	f1ce 0320 	rsb	r3, lr, #32
 8000d9e:	fa26 f203 	lsr.w	r2, r6, r3
 8000da2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000da6:	fbb2 f1fc 	udiv	r1, r2, ip
 8000daa:	fa1f f887 	uxth.w	r8, r7
 8000dae:	fb0c 2211 	mls	r2, ip, r1, r2
 8000db2:	fa06 f60e 	lsl.w	r6, r6, lr
 8000db6:	fa20 f303 	lsr.w	r3, r0, r3
 8000dba:	fb01 f908 	mul.w	r9, r1, r8
 8000dbe:	4333      	orrs	r3, r6
 8000dc0:	0c1e      	lsrs	r6, r3, #16
 8000dc2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000dc6:	45b1      	cmp	r9, r6
 8000dc8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x1ba>
 8000dce:	19f6      	adds	r6, r6, r7
 8000dd0:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dd4:	f080 808c 	bcs.w	8000ef0 <__udivmoddi4+0x2c8>
 8000dd8:	45b1      	cmp	r9, r6
 8000dda:	f240 8089 	bls.w	8000ef0 <__udivmoddi4+0x2c8>
 8000dde:	3902      	subs	r1, #2
 8000de0:	443e      	add	r6, r7
 8000de2:	eba6 0609 	sub.w	r6, r6, r9
 8000de6:	fbb6 f0fc 	udiv	r0, r6, ip
 8000dea:	fb0c 6210 	mls	r2, ip, r0, r6
 8000dee:	fb00 f908 	mul.w	r9, r0, r8
 8000df2:	b29e      	uxth	r6, r3
 8000df4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000df8:	45b1      	cmp	r9, r6
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x1e4>
 8000dfc:	19f6      	adds	r6, r6, r7
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	d271      	bcs.n	8000ee8 <__udivmoddi4+0x2c0>
 8000e04:	45b1      	cmp	r9, r6
 8000e06:	d96f      	bls.n	8000ee8 <__udivmoddi4+0x2c0>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	443e      	add	r6, r7
 8000e0c:	eba6 0609 	sub.w	r6, r6, r9
 8000e10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e14:	e78f      	b.n	8000d36 <__udivmoddi4+0x10e>
 8000e16:	f1c1 0720 	rsb	r7, r1, #32
 8000e1a:	fa22 f807 	lsr.w	r8, r2, r7
 8000e1e:	408b      	lsls	r3, r1
 8000e20:	ea48 0303 	orr.w	r3, r8, r3
 8000e24:	fa26 f407 	lsr.w	r4, r6, r7
 8000e28:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000e2c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000e30:	fa1f fc83 	uxth.w	ip, r3
 8000e34:	fb0e 4419 	mls	r4, lr, r9, r4
 8000e38:	408e      	lsls	r6, r1
 8000e3a:	fa20 f807 	lsr.w	r8, r0, r7
 8000e3e:	fb09 fa0c 	mul.w	sl, r9, ip
 8000e42:	ea48 0806 	orr.w	r8, r8, r6
 8000e46:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000e4a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000e4e:	45a2      	cmp	sl, r4
 8000e50:	fa02 f201 	lsl.w	r2, r2, r1
 8000e54:	fa00 f601 	lsl.w	r6, r0, r1
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x244>
 8000e5a:	18e4      	adds	r4, r4, r3
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e60:	d244      	bcs.n	8000eec <__udivmoddi4+0x2c4>
 8000e62:	45a2      	cmp	sl, r4
 8000e64:	d942      	bls.n	8000eec <__udivmoddi4+0x2c4>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	441c      	add	r4, r3
 8000e6c:	eba4 040a 	sub.w	r4, r4, sl
 8000e70:	fbb4 f0fe 	udiv	r0, r4, lr
 8000e74:	fb0e 4410 	mls	r4, lr, r0, r4
 8000e78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e7c:	fa1f f888 	uxth.w	r8, r8
 8000e80:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000e84:	45a4      	cmp	ip, r4
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x270>
 8000e88:	18e4      	adds	r4, r4, r3
 8000e8a:	f100 3eff 	add.w	lr, r0, #4294967295
 8000e8e:	d229      	bcs.n	8000ee4 <__udivmoddi4+0x2bc>
 8000e90:	45a4      	cmp	ip, r4
 8000e92:	d927      	bls.n	8000ee4 <__udivmoddi4+0x2bc>
 8000e94:	3802      	subs	r0, #2
 8000e96:	441c      	add	r4, r3
 8000e98:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9c:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea0:	eba4 0c0c 	sub.w	ip, r4, ip
 8000ea4:	45cc      	cmp	ip, r9
 8000ea6:	46c2      	mov	sl, r8
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	d315      	bcc.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eac:	d012      	beq.n	8000ed4 <__udivmoddi4+0x2ac>
 8000eae:	b155      	cbz	r5, 8000ec6 <__udivmoddi4+0x29e>
 8000eb0:	ebb6 030a 	subs.w	r3, r6, sl
 8000eb4:	eb6c 060e 	sbc.w	r6, ip, lr
 8000eb8:	fa06 f707 	lsl.w	r7, r6, r7
 8000ebc:	40cb      	lsrs	r3, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	40ce      	lsrs	r6, r1
 8000ec2:	602f      	str	r7, [r5, #0]
 8000ec4:	606e      	str	r6, [r5, #4]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6f7      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000ed0:	4689      	mov	r9, r1
 8000ed2:	e6de      	b.n	8000c92 <__udivmoddi4+0x6a>
 8000ed4:	4546      	cmp	r6, r8
 8000ed6:	d2ea      	bcs.n	8000eae <__udivmoddi4+0x286>
 8000ed8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000edc:	eb69 0e03 	sbc.w	lr, r9, r3
 8000ee0:	3801      	subs	r0, #1
 8000ee2:	e7e4      	b.n	8000eae <__udivmoddi4+0x286>
 8000ee4:	4670      	mov	r0, lr
 8000ee6:	e7d7      	b.n	8000e98 <__udivmoddi4+0x270>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e78f      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000eec:	4681      	mov	r9, r0
 8000eee:	e7bd      	b.n	8000e6c <__udivmoddi4+0x244>
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	e776      	b.n	8000de2 <__udivmoddi4+0x1ba>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e744      	b.n	8000d84 <__udivmoddi4+0x15c>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000efe:	3a02      	subs	r2, #2
 8000f00:	443e      	add	r6, r7
 8000f02:	e72b      	b.n	8000d5c <__udivmoddi4+0x134>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_Init+0x28>)
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x28>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 fde5 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f001 ff72 	bl	8002e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40022000 	.word	0x40022000

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fdef 	bl	8001b36 <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 fdc5 	bl	8001afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	20000000 	.word	0x20000000

08000f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_IncTick+0x1c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_IncTick+0x20>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <HAL_IncTick+0x20>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20000004 	.word	0x20000004
 8000fb4:	200006d0 	.word	0x200006d0

08000fb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <HAL_GetTick+0x10>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	200006d0 	.word	0x200006d0

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff fff0 	bl	8000fb8 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_Delay+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffe0 	bl	8000fb8 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad2      	subs	r2, r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d3f7      	bcc.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0ce      	b.n	80011d0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	2b00      	cmp	r3, #0
 800103e:	d109      	bne.n	8001054 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f001 ff0e 	bl	8002e70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 fbc3 	bl	80017e0 <ADC_ConversionStop_Disable>
 800105a:	4603      	mov	r3, r0
 800105c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 80a9 	bne.w	80011be <HAL_ADC_Init+0x1ae>
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f040 80a5 	bne.w	80011be <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800107c:	f023 0302 	bic.w	r3, r3, #2
 8001080:	f043 0202 	orr.w	r2, r3, #2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4951      	ldr	r1, [pc, #324]	; (80011d8 <HAL_ADC_Init+0x1c8>)
 8001092:	428b      	cmp	r3, r1
 8001094:	d10a      	bne.n	80010ac <HAL_ADC_Init+0x9c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800109e:	d002      	beq.n	80010a6 <HAL_ADC_Init+0x96>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	e004      	b.n	80010b0 <HAL_ADC_Init+0xa0>
 80010a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010aa:	e001      	b.n	80010b0 <HAL_ADC_Init+0xa0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7b1b      	ldrb	r3, [r3, #12]
 80010b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	4313      	orrs	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c8:	d003      	beq.n	80010d2 <HAL_ADC_Init+0xc2>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d102      	bne.n	80010d8 <HAL_ADC_Init+0xc8>
 80010d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d6:	e000      	b.n	80010da <HAL_ADC_Init+0xca>
 80010d8:	2300      	movs	r3, #0
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7d1b      	ldrb	r3, [r3, #20]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d119      	bne.n	800111c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7b1b      	ldrb	r3, [r3, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	035a      	lsls	r2, r3, #13
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	e00b      	b.n	800111c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001108:	f043 0220 	orr.w	r2, r3, #32
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001114:	f043 0201 	orr.w	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	6852      	ldr	r2, [r2, #4]
 8001126:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	430a      	orrs	r2, r1
 800112e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6899      	ldr	r1, [r3, #8]
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_ADC_Init+0x1cc>)
 800113c:	400b      	ands	r3, r1
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	430b      	orrs	r3, r1
 8001142:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800114c:	d003      	beq.n	8001156 <HAL_ADC_Init+0x146>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d104      	bne.n	8001160 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	3b01      	subs	r3, #1
 800115c:	051b      	lsls	r3, r3, #20
 800115e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6812      	ldr	r2, [r2, #0]
 8001168:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800116a:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	430a      	orrs	r2, r1
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_ADC_Init+0x1d0>)
 800117c:	4013      	ands	r3, r2
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	4293      	cmp	r3, r2
 8001182:	d10b      	bne.n	800119c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118e:	f023 0303 	bic.w	r3, r3, #3
 8001192:	f043 0201 	orr.w	r2, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800119a:	e018      	b.n	80011ce <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	f023 0312 	bic.w	r3, r3, #18
 80011a4:	f043 0210 	orr.w	r2, r3, #16
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011bc:	e007      	b.n	80011ce <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	f043 0210 	orr.w	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40013c00 	.word	0x40013c00
 80011dc:	ffe1f7fd 	.word	0xffe1f7fd
 80011e0:	ff1f0efe 	.word	0xff1f0efe

080011e4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_ADC_Start+0x1a>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e098      	b.n	8001330 <HAL_ADC_Start+0x14c>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fa98 	bl	800173c <ADC_Enable>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f040 8087 	bne.w	8001326 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a41      	ldr	r2, [pc, #260]	; (8001338 <HAL_ADC_Start+0x154>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d105      	bne.n	8001242 <HAL_ADC_Start+0x5e>
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <HAL_ADC_Start+0x158>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d115      	bne.n	800126e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001258:	2b00      	cmp	r3, #0
 800125a:	d026      	beq.n	80012aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001264:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800126c:	e01d      	b.n	80012aa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a2f      	ldr	r2, [pc, #188]	; (800133c <HAL_ADC_Start+0x158>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d004      	beq.n	800128e <HAL_ADC_Start+0xaa>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a2b      	ldr	r2, [pc, #172]	; (8001338 <HAL_ADC_Start+0x154>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d10d      	bne.n	80012aa <HAL_ADC_Start+0xc6>
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_ADC_Start+0x158>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	f023 0206 	bic.w	r2, r3, #6
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012c2:	e002      	b.n	80012ca <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f06f 0202 	mvn.w	r2, #2
 80012da:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012ea:	d113      	bne.n	8001314 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012f0:	4a11      	ldr	r2, [pc, #68]	; (8001338 <HAL_ADC_Start+0x154>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d105      	bne.n	8001302 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_ADC_Start+0x158>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d108      	bne.n	8001314 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	6892      	ldr	r2, [r2, #8]
 800130c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	e00c      	b.n	800132e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	6892      	ldr	r2, [r2, #8]
 800131e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	e003      	b.n	800132e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40012800 	.word	0x40012800
 800133c:	40012400 	.word	0x40012400

08001340 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001356:	f7ff fe2f 	bl	8000fb8 <HAL_GetTick>
 800135a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136e:	f043 0220 	orr.w	r2, r3, #32
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0c8      	b.n	8001514 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d12a      	bne.n	80013e6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800139a:	2b00      	cmp	r3, #0
 800139c:	d123      	bne.n	80013e6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800139e:	e01a      	b.n	80013d6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a6:	d016      	beq.n	80013d6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <HAL_ADC_PollForConversion+0x7e>
 80013ae:	f7ff fe03 	bl	8000fb8 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	1ad2      	subs	r2, r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d90b      	bls.n	80013d6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	f043 0204 	orr.w	r2, r3, #4
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e09e      	b.n	8001514 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0dd      	beq.n	80013a0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013e4:	e06c      	b.n	80014c0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013e6:	4b4d      	ldr	r3, [pc, #308]	; (800151c <HAL_ADC_PollForConversion+0x1dc>)
 80013e8:	681c      	ldr	r4, [r3, #0]
 80013ea:	2002      	movs	r0, #2
 80013ec:	f001 f9f0 	bl	80027d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80013f0:	4603      	mov	r3, r0
 80013f2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6919      	ldr	r1, [r3, #16]
 80013fc:	4b48      	ldr	r3, [pc, #288]	; (8001520 <HAL_ADC_PollForConversion+0x1e0>)
 80013fe:	400b      	ands	r3, r1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d118      	bne.n	8001436 <HAL_ADC_PollForConversion+0xf6>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68d9      	ldr	r1, [r3, #12]
 800140a:	4b46      	ldr	r3, [pc, #280]	; (8001524 <HAL_ADC_PollForConversion+0x1e4>)
 800140c:	400b      	ands	r3, r1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d111      	bne.n	8001436 <HAL_ADC_PollForConversion+0xf6>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6919      	ldr	r1, [r3, #16]
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_ADC_PollForConversion+0x1e8>)
 800141a:	400b      	ands	r3, r1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d108      	bne.n	8001432 <HAL_ADC_PollForConversion+0xf2>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68d9      	ldr	r1, [r3, #12]
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <HAL_ADC_PollForConversion+0x1ec>)
 8001428:	400b      	ands	r3, r1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_ADC_PollForConversion+0xf2>
 800142e:	2314      	movs	r3, #20
 8001430:	e020      	b.n	8001474 <HAL_ADC_PollForConversion+0x134>
 8001432:	2329      	movs	r3, #41	; 0x29
 8001434:	e01e      	b.n	8001474 <HAL_ADC_PollForConversion+0x134>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6919      	ldr	r1, [r3, #16]
 800143c:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <HAL_ADC_PollForConversion+0x1e8>)
 800143e:	400b      	ands	r3, r1
 8001440:	2b00      	cmp	r3, #0
 8001442:	d106      	bne.n	8001452 <HAL_ADC_PollForConversion+0x112>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68d9      	ldr	r1, [r3, #12]
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <HAL_ADC_PollForConversion+0x1ec>)
 800144c:	400b      	ands	r3, r1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00d      	beq.n	800146e <HAL_ADC_PollForConversion+0x12e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6919      	ldr	r1, [r3, #16]
 8001458:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_ADC_PollForConversion+0x1f0>)
 800145a:	400b      	ands	r3, r1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d108      	bne.n	8001472 <HAL_ADC_PollForConversion+0x132>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68d9      	ldr	r1, [r3, #12]
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_ADC_PollForConversion+0x1f0>)
 8001468:	400b      	ands	r3, r1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_ADC_PollForConversion+0x132>
 800146e:	2354      	movs	r3, #84	; 0x54
 8001470:	e000      	b.n	8001474 <HAL_ADC_PollForConversion+0x134>
 8001472:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001474:	fb03 f302 	mul.w	r3, r3, r2
 8001478:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800147a:	e01d      	b.n	80014b8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001482:	d016      	beq.n	80014b2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_ADC_PollForConversion+0x15a>
 800148a:	f7ff fd95 	bl	8000fb8 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	1ad2      	subs	r2, r2, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d90b      	bls.n	80014b2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	f043 0204 	orr.w	r2, r3, #4
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e030      	b.n	8001514 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3dd      	bcc.n	800147c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f06f 0212 	mvn.w	r2, #18
 80014c8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014e4:	d115      	bne.n	8001512 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d111      	bne.n	8001512 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d105      	bne.n	8001512 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	f043 0201 	orr.w	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	20000008 	.word	0x20000008
 8001520:	24924924 	.word	0x24924924
 8001524:	00924924 	.word	0x00924924
 8001528:	12492492 	.word	0x12492492
 800152c:	00492492 	.word	0x00492492
 8001530:	00249249 	.word	0x00249249

08001534 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800154c:	b490      	push	{r4, r7}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_ADC_ConfigChannel+0x20>
 8001568:	2302      	movs	r3, #2
 800156a:	e0dc      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1da>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b06      	cmp	r3, #6
 800157a:	d81c      	bhi.n	80015b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6819      	ldr	r1, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b05      	subs	r3, #5
 8001592:	221f      	movs	r2, #31
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	4018      	ands	r0, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681c      	ldr	r4, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3b05      	subs	r3, #5
 80015ac:	fa04 f303 	lsl.w	r3, r4, r3
 80015b0:	4303      	orrs	r3, r0
 80015b2:	634b      	str	r3, [r1, #52]	; 0x34
 80015b4:	e03c      	b.n	8001630 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d81c      	bhi.n	80015f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6819      	ldr	r1, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	3b23      	subs	r3, #35	; 0x23
 80015d4:	221f      	movs	r2, #31
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	4018      	ands	r0, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681c      	ldr	r4, [r3, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	3b23      	subs	r3, #35	; 0x23
 80015ee:	fa04 f303 	lsl.w	r3, r4, r3
 80015f2:	4303      	orrs	r3, r0
 80015f4:	630b      	str	r3, [r1, #48]	; 0x30
 80015f6:	e01b      	b.n	8001630 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3b41      	subs	r3, #65	; 0x41
 800160e:	221f      	movs	r2, #31
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	4018      	ands	r0, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681c      	ldr	r4, [r3, #0]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	3b41      	subs	r3, #65	; 0x41
 8001628:	fa04 f303 	lsl.w	r3, r4, r3
 800162c:	4303      	orrs	r3, r0
 800162e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b09      	cmp	r3, #9
 8001636:	d91c      	bls.n	8001672 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68d8      	ldr	r0, [r3, #12]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	3b1e      	subs	r3, #30
 800164e:	2207      	movs	r2, #7
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	4018      	ands	r0, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689c      	ldr	r4, [r3, #8]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	3b1e      	subs	r3, #30
 8001668:	fa04 f303 	lsl.w	r3, r4, r3
 800166c:	4303      	orrs	r3, r0
 800166e:	60cb      	str	r3, [r1, #12]
 8001670:	e019      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6819      	ldr	r1, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6918      	ldr	r0, [r3, #16]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	2207      	movs	r2, #7
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	4018      	ands	r0, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689c      	ldr	r4, [r3, #8]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	fa04 f303 	lsl.w	r3, r4, r3
 80016a2:	4303      	orrs	r3, r0
 80016a4:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d003      	beq.n	80016b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016b2:	2b11      	cmp	r3, #17
 80016b4:	d132      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_ADC_ConfigChannel+0x1e4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d125      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d126      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	6892      	ldr	r2, [r2, #8]
 80016d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016dc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d11a      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_ADC_ConfigChannel+0x1e8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_ADC_ConfigChannel+0x1ec>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	0c9a      	lsrs	r2, r3, #18
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016fc:	e002      	b.n	8001704 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3b01      	subs	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x1b2>
 800170a:	e007      	b.n	800171c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	f043 0220 	orr.w	r2, r3, #32
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bc90      	pop	{r4, r7}
 800172e:	4770      	bx	lr
 8001730:	40012400 	.word	0x40012400
 8001734:	20000008 	.word	0x20000008
 8001738:	431bde83 	.word	0x431bde83

0800173c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b01      	cmp	r3, #1
 8001758:	d039      	beq.n	80017ce <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	6892      	ldr	r2, [r2, #8]
 8001764:	f042 0201 	orr.w	r2, r2, #1
 8001768:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <ADC_Enable+0x9c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <ADC_Enable+0xa0>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	0c9b      	lsrs	r3, r3, #18
 8001776:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001778:	e002      	b.n	8001780 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3b01      	subs	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f9      	bne.n	800177a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001786:	f7ff fc17 	bl	8000fb8 <HAL_GetTick>
 800178a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800178c:	e018      	b.n	80017c0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800178e:	f7ff fc13 	bl	8000fb8 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d911      	bls.n	80017c0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	f043 0210 	orr.w	r2, r3, #16
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e007      	b.n	80017d0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d1df      	bne.n	800178e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000008 	.word	0x20000008
 80017dc:	431bde83 	.word	0x431bde83

080017e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d127      	bne.n	800184a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	6892      	ldr	r2, [r2, #8]
 8001804:	f022 0201 	bic.w	r2, r2, #1
 8001808:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800180a:	f7ff fbd5 	bl	8000fb8 <HAL_GetTick>
 800180e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001810:	e014      	b.n	800183c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001812:	f7ff fbd1 	bl	8000fb8 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d90d      	bls.n	800183c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	f043 0210 	orr.w	r2, r3, #16
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e007      	b.n	800184c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b01      	cmp	r3, #1
 8001848:	d0e3      	beq.n	8001812 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_ADCEx_Calibration_Start+0x1e>
 800186e:	2302      	movs	r3, #2
 8001870:	e086      	b.n	8001980 <HAL_ADCEx_Calibration_Start+0x12c>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffb0 	bl	80017e0 <ADC_ConversionStop_Disable>
 8001880:	4603      	mov	r3, r0
 8001882:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d175      	bne.n	8001976 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001892:	f023 0302 	bic.w	r3, r3, #2
 8001896:	f043 0202 	orr.w	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800189e:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <HAL_ADCEx_Calibration_Start+0x134>)
 80018a0:	681c      	ldr	r4, [r3, #0]
 80018a2:	2002      	movs	r0, #2
 80018a4:	f000 ff94 	bl	80027d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80018a8:	4603      	mov	r3, r0
 80018aa:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80018ae:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80018b0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80018b2:	e002      	b.n	80018ba <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f9      	bne.n	80018b4 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff3b 	bl	800173c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	6892      	ldr	r2, [r2, #8]
 80018d0:	f042 0208 	orr.w	r2, r2, #8
 80018d4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80018d6:	f7ff fb6f 	bl	8000fb8 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80018dc:	e014      	b.n	8001908 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018de:	f7ff fb6b 	bl	8000fb8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b0a      	cmp	r3, #10
 80018ea:	d90d      	bls.n	8001908 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	f023 0312 	bic.w	r3, r3, #18
 80018f4:	f043 0210 	orr.w	r2, r3, #16
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e03b      	b.n	8001980 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1e3      	bne.n	80018de <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	6892      	ldr	r2, [r2, #8]
 8001920:	f042 0204 	orr.w	r2, r2, #4
 8001924:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001926:	f7ff fb47 	bl	8000fb8 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800192c:	e014      	b.n	8001958 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800192e:	f7ff fb43 	bl	8000fb8 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b0a      	cmp	r3, #10
 800193a:	d90d      	bls.n	8001958 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	f023 0312 	bic.w	r3, r3, #18
 8001944:	f043 0210 	orr.w	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e013      	b.n	8001980 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1e3      	bne.n	800192e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	f023 0303 	bic.w	r3, r3, #3
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800197e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001980:	4618      	mov	r0, r3
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd90      	pop	{r4, r7, pc}
 8001988:	20000008 	.word	0x20000008

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	490d      	ldr	r1, [pc, #52]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	4909      	ldr	r1, [pc, #36]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	401a      	ands	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	1e59      	subs	r1, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff92 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff4b 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff60 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff92 	bl	8001a44 <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff61 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffb0 	bl	8001aa4 <SysTick_Config>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b08b      	sub	sp, #44	; 0x2c
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e133      	b.n	8001dcc <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b64:	2201      	movs	r2, #1
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f040 8122 	bne.w	8001dc6 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b12      	cmp	r3, #18
 8001b88:	d034      	beq.n	8001bf4 <HAL_GPIO_Init+0xa4>
 8001b8a:	2b12      	cmp	r3, #18
 8001b8c:	d80d      	bhi.n	8001baa <HAL_GPIO_Init+0x5a>
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d02b      	beq.n	8001bea <HAL_GPIO_Init+0x9a>
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d804      	bhi.n	8001ba0 <HAL_GPIO_Init+0x50>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d031      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d01c      	beq.n	8001bd8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b9e:	e048      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d043      	beq.n	8001c2c <HAL_GPIO_Init+0xdc>
 8001ba4:	2b11      	cmp	r3, #17
 8001ba6:	d01b      	beq.n	8001be0 <HAL_GPIO_Init+0x90>
          break;
 8001ba8:	e043      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001baa:	4a8f      	ldr	r2, [pc, #572]	; (8001de8 <HAL_GPIO_Init+0x298>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d026      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
 8001bb0:	4a8d      	ldr	r2, [pc, #564]	; (8001de8 <HAL_GPIO_Init+0x298>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d806      	bhi.n	8001bc4 <HAL_GPIO_Init+0x74>
 8001bb6:	4a8d      	ldr	r2, [pc, #564]	; (8001dec <HAL_GPIO_Init+0x29c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d020      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
 8001bbc:	4a8c      	ldr	r2, [pc, #560]	; (8001df0 <HAL_GPIO_Init+0x2a0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01d      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
          break;
 8001bc2:	e036      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bc4:	4a8b      	ldr	r2, [pc, #556]	; (8001df4 <HAL_GPIO_Init+0x2a4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d019      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
 8001bca:	4a8b      	ldr	r2, [pc, #556]	; (8001df8 <HAL_GPIO_Init+0x2a8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d016      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
 8001bd0:	4a8a      	ldr	r2, [pc, #552]	; (8001dfc <HAL_GPIO_Init+0x2ac>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0xae>
          break;
 8001bd6:	e02c      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	623b      	str	r3, [r7, #32]
          break;
 8001bde:	e028      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	3304      	adds	r3, #4
 8001be6:	623b      	str	r3, [r7, #32]
          break;
 8001be8:	e023      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	3308      	adds	r3, #8
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e01e      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	623b      	str	r3, [r7, #32]
          break;
 8001bfc:	e019      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c06:	2304      	movs	r3, #4
 8001c08:	623b      	str	r3, [r7, #32]
          break;
 8001c0a:	e012      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c14:	2308      	movs	r3, #8
 8001c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	611a      	str	r2, [r3, #16]
          break;
 8001c1e:	e008      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c20:	2308      	movs	r3, #8
 8001c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	615a      	str	r2, [r3, #20]
          break;
 8001c2a:	e002      	b.n	8001c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2bff      	cmp	r3, #255	; 0xff
 8001c36:	d801      	bhi.n	8001c3c <HAL_GPIO_Init+0xec>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	e001      	b.n	8001c40 <HAL_GPIO_Init+0xf0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2bff      	cmp	r3, #255	; 0xff
 8001c46:	d802      	bhi.n	8001c4e <HAL_GPIO_Init+0xfe>
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x104>
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3b08      	subs	r3, #8
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	401a      	ands	r2, r3
 8001c66:	6a39      	ldr	r1, [r7, #32]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a2 	beq.w	8001dc6 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c82:	4a5f      	ldr	r2, [pc, #380]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001c84:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6193      	str	r3, [r2, #24]
 8001c8e:	4b5c      	ldr	r3, [pc, #368]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c9a:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <HAL_GPIO_Init+0x2b4>)
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a51      	ldr	r2, [pc, #324]	; (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d01f      	beq.n	8001d06 <HAL_GPIO_Init+0x1b6>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	; (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d019      	beq.n	8001d02 <HAL_GPIO_Init+0x1b2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_GPIO_Init+0x2c0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d013      	beq.n	8001cfe <HAL_GPIO_Init+0x1ae>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <HAL_GPIO_Init+0x2c4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00d      	beq.n	8001cfa <HAL_GPIO_Init+0x1aa>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4d      	ldr	r2, [pc, #308]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <HAL_GPIO_Init+0x1a6>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_GPIO_Init+0x1a2>
 8001cee:	2305      	movs	r3, #5
 8001cf0:	e00a      	b.n	8001d08 <HAL_GPIO_Init+0x1b8>
 8001cf2:	2306      	movs	r3, #6
 8001cf4:	e008      	b.n	8001d08 <HAL_GPIO_Init+0x1b8>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x1b8>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x1b8>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x1b8>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x1b8>
 8001d06:	2300      	movs	r3, #0
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d18:	493a      	ldr	r1, [pc, #232]	; (8001e04 <HAL_GPIO_Init+0x2b4>)
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d32:	493b      	ldr	r1, [pc, #236]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d34:	4b3a      	ldr	r3, [pc, #232]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
 8001d3e:	e006      	b.n	8001d4e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d40:	4937      	ldr	r1, [pc, #220]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d42:	4b37      	ldr	r3, [pc, #220]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d5a:	4931      	ldr	r1, [pc, #196]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
 8001d66:	e006      	b.n	8001d76 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d68:	492d      	ldr	r1, [pc, #180]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	4013      	ands	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d82:	4927      	ldr	r1, [pc, #156]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d84:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
 8001d8e:	e006      	b.n	8001d9e <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d90:	4923      	ldr	r1, [pc, #140]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d92:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001daa:	491d      	ldr	r1, [pc, #116]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60cb      	str	r3, [r1, #12]
 8001db6:	e006      	b.n	8001dc6 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db8:	4919      	ldr	r1, [pc, #100]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	3301      	adds	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f47f aec4 	bne.w	8001b64 <HAL_GPIO_Init+0x14>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	372c      	adds	r7, #44	; 0x2c
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	10210000 	.word	0x10210000
 8001dec:	10110000 	.word	0x10110000
 8001df0:	10120000 	.word	0x10120000
 8001df4:	10310000 	.word	0x10310000
 8001df8:	10320000 	.word	0x10320000
 8001dfc:	10220000 	.word	0x10220000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010000 	.word	0x40010000
 8001e08:	40010800 	.word	0x40010800
 8001e0c:	40010c00 	.word	0x40010c00
 8001e10:	40011000 	.word	0x40011000
 8001e14:	40011400 	.word	0x40011400
 8001e18:	40011800 	.word	0x40011800
 8001e1c:	40011c00 	.word	0x40011c00
 8001e20:	40010400 	.word	0x40010400

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e40:	e003      	b.n	8001e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	041a      	lsls	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	611a      	str	r2, [r3, #16]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e26c      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8087 	beq.w	8001f82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e74:	4b92      	ldr	r3, [pc, #584]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d00c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e80:	4b8f      	ldr	r3, [pc, #572]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d112      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x5e>
 8001e8c:	4b8c      	ldr	r3, [pc, #560]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d10b      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9a:	4b89      	ldr	r3, [pc, #548]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d06c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x12c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d168      	bne.n	8001f80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e246      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x76>
 8001ebc:	4a80      	ldr	r2, [pc, #512]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	4b80      	ldr	r3, [pc, #512]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	e02e      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x98>
 8001ed2:	4a7b      	ldr	r2, [pc, #492]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	4b7a      	ldr	r3, [pc, #488]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4a78      	ldr	r2, [pc, #480]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	4b77      	ldr	r3, [pc, #476]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e01d      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0xbc>
 8001ef6:	4a72      	ldr	r2, [pc, #456]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	4b71      	ldr	r3, [pc, #452]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4a6f      	ldr	r2, [pc, #444]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	4b6e      	ldr	r3, [pc, #440]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xd4>
 8001f10:	4a6b      	ldr	r2, [pc, #428]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	4b6b      	ldr	r3, [pc, #428]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4a68      	ldr	r2, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	4b68      	ldr	r3, [pc, #416]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff f842 	bl	8000fb8 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff f83e 	bl	8000fb8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1fa      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0xe4>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff f82e 	bl	8000fb8 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff f82a 	bl	8000fb8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1e6      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x10c>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d063      	beq.n	8002056 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8e:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9a:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x18c>
 8001fa6:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b43      	ldr	r3, [pc, #268]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x176>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1ba      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	493d      	ldr	r1, [pc, #244]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	4b3c      	ldr	r3, [pc, #240]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e03a      	b.n	8002056 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_RCC_OscConfig+0x270>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7fe ffe3 	bl	8000fb8 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7fe ffdf 	bl	8000fb8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e19b      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	492a      	ldr	r1, [pc, #168]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_RCC_OscConfig+0x270>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe ffc2 	bl	8000fb8 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002038:	f7fe ffbe 	bl	8000fb8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e17a      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d03a      	beq.n	80020d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d019      	beq.n	800209e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_RCC_OscConfig+0x274>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7fe ffa2 	bl	8000fb8 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7fe ff9e 	bl	8000fb8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e15a      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <HAL_RCC_OscConfig+0x26c>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002096:	2001      	movs	r0, #1
 8002098:	f000 fac6 	bl	8002628 <RCC_Delay>
 800209c:	e01c      	b.n	80020d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_OscConfig+0x274>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7fe ff88 	bl	8000fb8 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020aa:	e00f      	b.n	80020cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ac:	f7fe ff84 	bl	8000fb8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d908      	bls.n	80020cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e140      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	42420000 	.word	0x42420000
 80020c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	4b9e      	ldr	r3, [pc, #632]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e9      	bne.n	80020ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a6 	beq.w	8002232 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ea:	4b97      	ldr	r3, [pc, #604]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10d      	bne.n	8002112 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	4a94      	ldr	r2, [pc, #592]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	4b93      	ldr	r3, [pc, #588]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002100:	61d3      	str	r3, [r2, #28]
 8002102:	4b91      	ldr	r3, [pc, #580]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210e:	2301      	movs	r3, #1
 8002110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	4b8e      	ldr	r3, [pc, #568]	; (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d118      	bne.n	8002150 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211e:	4a8b      	ldr	r2, [pc, #556]	; (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002120:	4b8a      	ldr	r3, [pc, #552]	; (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212a:	f7fe ff45 	bl	8000fb8 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002132:	f7fe ff41 	bl	8000fb8 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b64      	cmp	r3, #100	; 0x64
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0fd      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	4b81      	ldr	r3, [pc, #516]	; (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x312>
 8002158:	4a7b      	ldr	r2, [pc, #492]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	4b7b      	ldr	r3, [pc, #492]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	e02d      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x334>
 800216e:	4a76      	ldr	r2, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	6213      	str	r3, [r2, #32]
 800217a:	4a73      	ldr	r2, [pc, #460]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	4b72      	ldr	r3, [pc, #456]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f023 0304 	bic.w	r3, r3, #4
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	e01c      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b05      	cmp	r3, #5
 800218e:	d10c      	bne.n	80021aa <HAL_RCC_OscConfig+0x356>
 8002190:	4a6d      	ldr	r2, [pc, #436]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	4b6d      	ldr	r3, [pc, #436]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	4a6a      	ldr	r2, [pc, #424]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6213      	str	r3, [r2, #32]
 80021a8:	e00b      	b.n	80021c2 <HAL_RCC_OscConfig+0x36e>
 80021aa:	4a67      	ldr	r2, [pc, #412]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	4b66      	ldr	r3, [pc, #408]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	6213      	str	r3, [r2, #32]
 80021b6:	4a64      	ldr	r2, [pc, #400]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	4b63      	ldr	r3, [pc, #396]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d015      	beq.n	80021f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7fe fef5 	bl	8000fb8 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d2:	f7fe fef1 	bl	8000fb8 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0ab      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e8:	4b57      	ldr	r3, [pc, #348]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ee      	beq.n	80021d2 <HAL_RCC_OscConfig+0x37e>
 80021f4:	e014      	b.n	8002220 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f6:	f7fe fedf 	bl	8000fb8 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7fe fedb 	bl	8000fb8 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e095      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002214:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ee      	bne.n	80021fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002220:	7dfb      	ldrb	r3, [r7, #23]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d105      	bne.n	8002232 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002226:	4a48      	ldr	r2, [pc, #288]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8081 	beq.w	800233e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800223c:	4b42      	ldr	r3, [pc, #264]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 030c 	and.w	r3, r3, #12
 8002244:	2b08      	cmp	r3, #8
 8002246:	d061      	beq.n	800230c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d146      	bne.n	80022de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_RCC_OscConfig+0x4fc>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe feaf 	bl	8000fb8 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe feab 	bl	8000fb8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e067      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002270:	4b35      	ldr	r3, [pc, #212]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d108      	bne.n	8002298 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002286:	4930      	ldr	r1, [pc, #192]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002298:	482b      	ldr	r0, [pc, #172]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a19      	ldr	r1, [r3, #32]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	430b      	orrs	r3, r1
 80022ac:	4313      	orrs	r3, r2
 80022ae:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b0:	4b27      	ldr	r3, [pc, #156]	; (8002350 <HAL_RCC_OscConfig+0x4fc>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe fe7f 	bl	8000fb8 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022be:	f7fe fe7b 	bl	8000fb8 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e037      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x46a>
 80022dc:	e02f      	b.n	800233e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_RCC_OscConfig+0x4fc>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fe68 	bl	8000fb8 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7fe fe64 	bl	8000fb8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e020      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x498>
 800230a:	e018      	b.n	800233e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e013      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	429a      	cmp	r2, r3
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	40007000 	.word	0x40007000
 8002350:	42420060 	.word	0x42420060

08002354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0d0      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0207 	and.w	r2, r3, #7
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d210      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4967      	ldr	r1, [pc, #412]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 0207 	bic.w	r2, r3, #7
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0207 	and.w	r2, r3, #7
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0b8      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b0:	4a59      	ldr	r2, [pc, #356]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4b59      	ldr	r3, [pc, #356]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c8:	4a53      	ldr	r2, [pc, #332]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d4:	4950      	ldr	r1, [pc, #320]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d040      	beq.n	8002474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d115      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e07f      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e073      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06b      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4939      	ldr	r1, [pc, #228]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	4b38      	ldr	r3, [pc, #224]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 0203 	bic.w	r2, r3, #3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002444:	f7fe fdb8 	bl	8000fb8 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe fdb4 	bl	8000fb8 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e053      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002474:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0207 	and.w	r2, r3, #7
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d910      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4924      	ldr	r1, [pc, #144]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 0207 	bic.w	r2, r3, #7
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0207 	and.w	r2, r3, #7
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e032      	b.n	800250a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b0:	4919      	ldr	r1, [pc, #100]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ce:	4912      	ldr	r1, [pc, #72]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024e2:	f000 f821 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024e6:	4601      	mov	r1, r0
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	fa21 f303 	lsr.w	r3, r1, r3
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1cc>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1d0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fd16 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40022000 	.word	0x40022000
 8002518:	40021000 	.word	0x40021000
 800251c:	08005ee8 	.word	0x08005ee8
 8002520:	20000008 	.word	0x20000008
 8002524:	20000000 	.word	0x20000000

08002528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b490      	push	{r4, r7}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800252e:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002530:	1d3c      	adds	r4, r7, #4
 8002532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002552:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b04      	cmp	r3, #4
 8002560:	d002      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x40>
 8002562:	2b08      	cmp	r3, #8
 8002564:	d003      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x46>
 8002566:	e02d      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800256a:	623b      	str	r3, [r7, #32]
      break;
 800256c:	e02d      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	0c9b      	lsrs	r3, r3, #18
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800257a:	4413      	add	r3, r2
 800257c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002580:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	0c5b      	lsrs	r3, r3, #17
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800259a:	4413      	add	r3, r2
 800259c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	4a0f      	ldr	r2, [pc, #60]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025a6:	fb02 f203 	mul.w	r2, r2, r3
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
 80025b2:	e004      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b8:	fb02 f303 	mul.w	r3, r2, r3
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	623b      	str	r3, [r7, #32]
      break;
 80025c2:	e002      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025c6:	623b      	str	r3, [r7, #32]
      break;
 80025c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ca:	6a3b      	ldr	r3, [r7, #32]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3728      	adds	r7, #40	; 0x28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc90      	pop	{r4, r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	08005eb8 	.word	0x08005eb8
 80025dc:	08005ec8 	.word	0x08005ec8
 80025e0:	40021000 	.word	0x40021000
 80025e4:	007a1200 	.word	0x007a1200
 80025e8:	003d0900 	.word	0x003d0900

080025ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f0:	4b02      	ldr	r3, [pc, #8]	; (80025fc <HAL_RCC_GetHCLKFreq+0x10>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	20000008 	.word	0x20000008

08002600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002604:	f7ff fff2 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002608:	4601      	mov	r1, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	0adb      	lsrs	r3, r3, #11
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4a03      	ldr	r2, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	fa21 f303 	lsr.w	r3, r1, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	08005ef8 	.word	0x08005ef8

08002628 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <RCC_Delay+0x34>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <RCC_Delay+0x38>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0a5b      	lsrs	r3, r3, #9
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002644:	bf00      	nop
  }
  while (Delay --);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1e5a      	subs	r2, r3, #1
 800264a:	60fa      	str	r2, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f9      	bne.n	8002644 <RCC_Delay+0x1c>
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000008 	.word	0x20000008
 8002660:	10624dd3 	.word	0x10624dd3

08002664 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d07d      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002680:	2300      	movs	r3, #0
 8002682:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002684:	4b4f      	ldr	r3, [pc, #316]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10d      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	4a4c      	ldr	r2, [pc, #304]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002692:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269a:	61d3      	str	r3, [r2, #28]
 800269c:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a8:	2301      	movs	r3, #1
 80026aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b46      	ldr	r3, [pc, #280]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d118      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b8:	4a43      	ldr	r2, [pc, #268]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ba:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c4:	f7fe fc78 	bl	8000fb8 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	e008      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026cc:	f7fe fc74 	bl	8000fb8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e06d      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d02e      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	429a      	cmp	r2, r3
 8002706:	d027      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002708:	4b2e      	ldr	r3, [pc, #184]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002710:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002712:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002718:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800271e:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d014      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fe fc43 	bl	8000fb8 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fe fc3f 	bl	8000fb8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e036      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ee      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002758:	491a      	ldr	r1, [pc, #104]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4313      	orrs	r3, r2
 8002768:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002770:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002788:	490e      	ldr	r1, [pc, #56]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027a6:	4907      	ldr	r1, [pc, #28]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40007000 	.word	0x40007000
 80027cc:	42420440 	.word	0x42420440

080027d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b08d      	sub	sp, #52	; 0x34
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027d8:	4b6b      	ldr	r3, [pc, #428]	; (8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80027da:	f107 040c 	add.w	r4, r7, #12
 80027de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027e4:	4b69      	ldr	r3, [pc, #420]	; (800298c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	2300      	movs	r3, #0
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3b01      	subs	r3, #1
 8002802:	2b0f      	cmp	r3, #15
 8002804:	f200 80b6 	bhi.w	8002974 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002808:	a201      	add	r2, pc, #4	; (adr r2, 8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800280a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280e:	bf00      	nop
 8002810:	080028f3 	.word	0x080028f3
 8002814:	08002959 	.word	0x08002959
 8002818:	08002975 	.word	0x08002975
 800281c:	080028e3 	.word	0x080028e3
 8002820:	08002975 	.word	0x08002975
 8002824:	08002975 	.word	0x08002975
 8002828:	08002975 	.word	0x08002975
 800282c:	080028eb 	.word	0x080028eb
 8002830:	08002975 	.word	0x08002975
 8002834:	08002975 	.word	0x08002975
 8002838:	08002975 	.word	0x08002975
 800283c:	08002975 	.word	0x08002975
 8002840:	08002975 	.word	0x08002975
 8002844:	08002975 	.word	0x08002975
 8002848:	08002975 	.word	0x08002975
 800284c:	08002851 	.word	0x08002851
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002850:	4b4f      	ldr	r3, [pc, #316]	; (8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002856:	4b4e      	ldr	r3, [pc, #312]	; (8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 808a 	beq.w	8002978 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	0c9b      	lsrs	r3, r3, #18
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002870:	4413      	add	r3, r2
 8002872:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002876:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d018      	beq.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002882:	4b43      	ldr	r3, [pc, #268]	; (8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0c5b      	lsrs	r3, r3, #17
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002890:	4413      	add	r3, r2
 8002892:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80028a2:	4a3c      	ldr	r2, [pc, #240]	; (8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	6a3a      	ldr	r2, [r7, #32]
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b2:	e004      	b.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	4a38      	ldr	r2, [pc, #224]	; (8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80028be:	4b34      	ldr	r3, [pc, #208]	; (8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ca:	d102      	bne.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80028d0:	e052      	b.n	8002978 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4a31      	ldr	r2, [pc, #196]	; (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80028e0:	e04a      	b.n	8002978 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80028e2:	f7ff fe21 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80028e6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80028e8:	e049      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80028ea:	f7ff fe1d 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80028ee:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80028f0:	e045      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002902:	d108      	bne.n	8002916 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 800290e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
 8002914:	e01f      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002920:	d109      	bne.n	8002936 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 800292e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
 8002934:	e00f      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002940:	d11c      	bne.n	800297c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 800294e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002954:	e012      	b.n	800297c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002956:	e011      	b.n	800297c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002958:	f7ff fe52 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	0b9b      	lsrs	r3, r3, #14
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	3301      	adds	r3, #1
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002972:	e004      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8002974:	bf00      	nop
 8002976:	e002      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002978:	bf00      	nop
 800297a:	e000      	b.n	800297e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 800297c:	bf00      	nop
    }
  }
  return (frequency);
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002980:	4618      	mov	r0, r3
 8002982:	3734      	adds	r7, #52	; 0x34
 8002984:	46bd      	mov	sp, r7
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	08005ecc 	.word	0x08005ecc
 800298c:	08005edc 	.word	0x08005edc
 8002990:	40021000 	.word	0x40021000
 8002994:	007a1200 	.word	0x007a1200
 8002998:	003d0900 	.word	0x003d0900
 800299c:	aaaaaaab 	.word	0xaaaaaaab

080029a0 <LCD_sendCmd>:
#include "../Inc/lcd.h"
void LCD_sendCmd( uint8_t data) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029b0:	4805      	ldr	r0, [pc, #20]	; (80029c8 <LCD_sendCmd+0x28>)
 80029b2:	f7ff fa37 	bl	8001e24 <HAL_GPIO_WritePin>
    LCD_sendByte(data);
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 f86b 	bl	8002a94 <LCD_sendByte>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40011000 	.word	0x40011000

080029cc <LCD_sendChar>:

void LCD_sendChar(uint8_t data) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 80029d6:	2201      	movs	r2, #1
 80029d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029dc:	4805      	ldr	r0, [pc, #20]	; (80029f4 <LCD_sendChar+0x28>)
 80029de:	f7ff fa21 	bl	8001e24 <HAL_GPIO_WritePin>
    LCD_sendByte(data);
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 f855 	bl	8002a94 <LCD_sendByte>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40011000 	.word	0x40011000

080029f8 <LCD_sendNibble>:

void LCD_sendNibble(uint8_t data) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	2110      	movs	r1, #16
 8002a16:	481e      	ldr	r0, [pc, #120]	; (8002a90 <LCD_sendNibble+0x98>)
 8002a18:	f7ff fa04 	bl	8001e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bf14      	ite	ne
 8002a26:	2301      	movne	r3, #1
 8002a28:	2300      	moveq	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2120      	movs	r1, #32
 8002a30:	4817      	ldr	r0, [pc, #92]	; (8002a90 <LCD_sendNibble+0x98>)
 8002a32:	f7ff f9f7 	bl	8001e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	2140      	movs	r1, #64	; 0x40
 8002a4a:	4811      	ldr	r0, [pc, #68]	; (8002a90 <LCD_sendNibble+0x98>)
 8002a4c:	f7ff f9ea 	bl	8001e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	2180      	movs	r1, #128	; 0x80
 8002a64:	480a      	ldr	r0, [pc, #40]	; (8002a90 <LCD_sendNibble+0x98>)
 8002a66:	f7ff f9dd 	bl	8001e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a70:	4807      	ldr	r0, [pc, #28]	; (8002a90 <LCD_sendNibble+0x98>)
 8002a72:	f7ff f9d7 	bl	8001e24 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7fe faa8 	bl	8000fcc <HAL_Delay>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a82:	4803      	ldr	r0, [pc, #12]	; (8002a90 <LCD_sendNibble+0x98>)
 8002a84:	f7ff f9ce 	bl	8001e24 <HAL_GPIO_WritePin>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40011000 	.word	0x40011000

08002a94 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
    LCD_sendNibble(data >> 4); // High order bit
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ffa7 	bl	80029f8 <LCD_sendNibble>
    LCD_sendNibble(data); // Low order bit
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ffa3 	bl	80029f8 <LCD_sendNibble>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <LCD_puts>:

void LCD_puts(char * data) {
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
    while (data[0] != '\0') {
 8002ac2:	e007      	b.n	8002ad4 <LCD_puts+0x1a>
        LCD_sendChar(data[0]);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff7f 	bl	80029cc <LCD_sendChar>
        data++;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	607b      	str	r3, [r7, #4]
    while (data[0] != '\0') {
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f3      	bne.n	8002ac4 <LCD_puts+0xa>
    }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <LCD_init>:

void LCD_init(){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
    LCD_sendCmd(0x33); // Initialize controller
 8002ae8:	2033      	movs	r0, #51	; 0x33
 8002aea:	f7ff ff59 	bl	80029a0 <LCD_sendCmd>
    LCD_sendCmd(0x32); // Set 4-bit mode
 8002aee:	2032      	movs	r0, #50	; 0x32
 8002af0:	f7ff ff56 	bl	80029a0 <LCD_sendCmd>
    LCD_sendCmd(0x28); // 4 bit, 2 line, 5x7
 8002af4:	2028      	movs	r0, #40	; 0x28
 8002af6:	f7ff ff53 	bl	80029a0 <LCD_sendCmd>
    LCD_sendCmd(0x06); // Cursor direction -> right
 8002afa:	2006      	movs	r0, #6
 8002afc:	f7ff ff50 	bl	80029a0 <LCD_sendCmd>
    LCD_sendCmd(0x0C); // Display on, cursor off
 8002b00:	200c      	movs	r0, #12
 8002b02:	f7ff ff4d 	bl	80029a0 <LCD_sendCmd>
    LCD_sendCmd(0x01); // Clear display
 8002b06:	2001      	movs	r0, #1
 8002b08:	f7ff ff4a 	bl	80029a0 <LCD_sendCmd>
}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <LCD_clear>:

void LCD_clear(){
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
    LCD_sendCmd(0x01);
 8002b14:	2001      	movs	r0, #1
 8002b16:	f7ff ff43 	bl	80029a0 <LCD_sendCmd>
    HAL_Delay(2);
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	f7fe fa56 	bl	8000fcc <HAL_Delay>
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <LCD_setCursor>:

void LCD_setCursor(char row, char col){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	460a      	mov	r2, r1
 8002b2e:	71fb      	strb	r3, [r7, #7]
 8002b30:	4613      	mov	r3, r2
 8002b32:	71bb      	strb	r3, [r7, #6]
	char val = (row == 0) ? 0x00: 0x40;
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <LCD_setCursor+0x1a>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <LCD_setCursor+0x1c>
 8002b3e:	2340      	movs	r3, #64	; 0x40
 8002b40:	73fb      	strb	r3, [r7, #15]
	val += col;
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	79bb      	ldrb	r3, [r7, #6]
 8002b46:	4413      	add	r3, r2
 8002b48:	73fb      	strb	r3, [r7, #15]
	LCD_sendCmd(LCD_SETDDRAMADDR | val );
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff24 	bl	80029a0 <LCD_sendCmd>
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002b66:	f7fe f9cf 	bl	8000f08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002b6a:	f000 f86d 	bl	8002c48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002b6e:	f000 f8fb 	bl	8002d68 <MX_GPIO_Init>
	MX_ADC1_Init();
 8002b72:	f000 f8bb 	bl	8002cec <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(1000); // 1 second to boot LCD up
 8002b76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b7a:	f7fe fa27 	bl	8000fcc <HAL_Delay>
	LCD_init();
 8002b7e:	f7ff ffb1 	bl	8002ae4 <LCD_init>
	LCD_setCursor(0, 0);
 8002b82:	2100      	movs	r1, #0
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7ff ffcd 	bl	8002b24 <LCD_setCursor>
	HAL_Delay(1000);
 8002b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b8e:	f7fe fa1d 	bl	8000fcc <HAL_Delay>

	HAL_ADCEx_Calibration_Start(&hadc1);
 8002b92:	4829      	ldr	r0, [pc, #164]	; (8002c38 <main+0xd8>)
 8002b94:	f7fe fe5e 	bl	8001854 <HAL_ADCEx_Calibration_Start>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_ADC_Start(&hadc1);
 8002b98:	4827      	ldr	r0, [pc, #156]	; (8002c38 <main+0xd8>)
 8002b9a:	f7fe fb23 	bl	80011e4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8002b9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ba2:	4825      	ldr	r0, [pc, #148]	; (8002c38 <main+0xd8>)
 8002ba4:	f7fe fbcc 	bl	8001340 <HAL_ADC_PollForConversion>

		uint16_t adcValue;
		adcValue = HAL_ADC_GetValue(&hadc1);
 8002ba8:	4823      	ldr	r0, [pc, #140]	; (8002c38 <main+0xd8>)
 8002baa:	f7fe fcc3 	bl	8001534 <HAL_ADC_GetValue>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	82fb      	strh	r3, [r7, #22]
		float tempValue = (adcValue / 4096.0 * 3.3 * 100.0);
 8002bb2:	8afb      	ldrh	r3, [r7, #22]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fc91 	bl	80004dc <__aeabi_i2d>
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <main+0xdc>)
 8002bc0:	f7fd fe1c 	bl	80007fc <__aeabi_ddiv>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	460c      	mov	r4, r1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	4621      	mov	r1, r4
 8002bcc:	a318      	add	r3, pc, #96	; (adr r3, 8002c30 <main+0xd0>)
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	f7fd fce9 	bl	80005a8 <__aeabi_dmul>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	460c      	mov	r4, r1
 8002bda:	4618      	mov	r0, r3
 8002bdc:	4621      	mov	r1, r4
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <main+0xe0>)
 8002be4:	f7fd fce0 	bl	80005a8 <__aeabi_dmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	4618      	mov	r0, r3
 8002bee:	4621      	mov	r1, r4
 8002bf0:	f7fd ffb2 	bl	8000b58 <__aeabi_d2f>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]

		char tempValueChar[16] = {0};
 8002bf8:	463b      	mov	r3, r7
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	60da      	str	r2, [r3, #12]
		sprintf(tempValueChar, "%.2f *C", tempValue);
 8002c04:	6938      	ldr	r0, [r7, #16]
 8002c06:	f7fd fc7b 	bl	8000500 <__aeabi_f2d>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	4638      	mov	r0, r7
 8002c10:	461a      	mov	r2, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	490b      	ldr	r1, [pc, #44]	; (8002c44 <main+0xe4>)
 8002c16:	f000 fa49 	bl	80030ac <sprintf>
		LCD_clear();
 8002c1a:	f7ff ff79 	bl	8002b10 <LCD_clear>
		LCD_puts(tempValueChar);
 8002c1e:	463b      	mov	r3, r7
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff4a 	bl	8002aba <LCD_puts>

		HAL_Delay(1000);
 8002c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c2a:	f7fe f9cf 	bl	8000fcc <HAL_Delay>
	{
 8002c2e:	e7b3      	b.n	8002b98 <main+0x38>
 8002c30:	66666666 	.word	0x66666666
 8002c34:	400a6666 	.word	0x400a6666
 8002c38:	200006d4 	.word	0x200006d4
 8002c3c:	40b00000 	.word	0x40b00000
 8002c40:	40590000 	.word	0x40590000
 8002c44:	08005ee0 	.word	0x08005ee0

08002c48 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b096      	sub	sp, #88	; 0x58
 8002c4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c52:	2228      	movs	r2, #40	; 0x28
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fa20 	bl	800309c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c5c:	f107 031c 	add.w	r3, r7, #28
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]
 8002c7a:	615a      	str	r2, [r3, #20]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c80:	2301      	movs	r3, #1
 8002c82:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c84:	2310      	movs	r3, #16
 8002c86:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff f8df 	bl	8001e54 <HAL_RCC_OscConfig>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8002c9c:	f000 f8b0 	bl	8002e00 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ca0:	230f      	movs	r3, #15
 8002ca2:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fb4a 	bl	8002354 <HAL_RCC_ClockConfig>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <SystemClock_Config+0x82>
	{
		Error_Handler();
 8002cc6:	f000 f89b 	bl	8002e00 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fcc5 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8002ce0:	f000 f88e 	bl	8002e00 <Error_Handler>
	}
}
 8002ce4:	bf00      	nop
 8002ce6:	3758      	adds	r7, #88	; 0x58
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <MX_ADC1_Init+0x74>)
 8002cfe:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <MX_ADC1_Init+0x78>)
 8002d00:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d02:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <MX_ADC1_Init+0x74>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <MX_ADC1_Init+0x74>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d0e:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <MX_ADC1_Init+0x74>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <MX_ADC1_Init+0x74>)
 8002d16:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002d1a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <MX_ADC1_Init+0x74>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <MX_ADC1_Init+0x74>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d28:	480d      	ldr	r0, [pc, #52]	; (8002d60 <MX_ADC1_Init+0x74>)
 8002d2a:	f7fe f971 	bl	8001010 <HAL_ADC_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8002d34:	f000 f864 	bl	8002e00 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002d40:	2307      	movs	r3, #7
 8002d42:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	4619      	mov	r1, r3
 8002d48:	4805      	ldr	r0, [pc, #20]	; (8002d60 <MX_ADC1_Init+0x74>)
 8002d4a:	f7fe fbff 	bl	800154c <HAL_ADC_ConfigChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8002d54:	f000 f854 	bl	8002e00 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	200006d4 	.word	0x200006d4
 8002d64:	40012400 	.word	0x40012400

08002d68 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6e:	f107 0310 	add.w	r3, r7, #16
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <MX_GPIO_Init+0x90>)
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <MX_GPIO_Init+0x90>)
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f043 0310 	orr.w	r3, r3, #16
 8002d86:	6193      	str	r3, [r2, #24]
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <MX_GPIO_Init+0x90>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002d94:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <MX_GPIO_Init+0x90>)
 8002d96:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <MX_GPIO_Init+0x90>)
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f043 0320 	orr.w	r3, r3, #32
 8002d9e:	6193      	str	r3, [r2, #24]
 8002da0:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <MX_GPIO_Init+0x90>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002dac:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <MX_GPIO_Init+0x90>)
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <MX_GPIO_Init+0x90>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6193      	str	r3, [r2, #24]
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <MX_GPIO_Init+0x90>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8002dca:	480c      	ldr	r0, [pc, #48]	; (8002dfc <MX_GPIO_Init+0x94>)
 8002dcc:	f7ff f82a 	bl	8001e24 <HAL_GPIO_WritePin>
			|RS_Pin|EN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           RS_Pin EN_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002dd0:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8002dd4:	613b      	str	r3, [r7, #16]
			|RS_Pin|EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dde:	2302      	movs	r3, #2
 8002de0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de2:	f107 0310 	add.w	r3, r7, #16
 8002de6:	4619      	mov	r1, r3
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <MX_GPIO_Init+0x94>)
 8002dea:	f7fe feb1 	bl	8001b50 <HAL_GPIO_Init>

}
 8002dee:	bf00      	nop
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40011000 	.word	0x40011000

08002e00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e12:	4a15      	ldr	r2, [pc, #84]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6193      	str	r3, [r2, #24]
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	61d3      	str	r3, [r2, #28]
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <HAL_MspInit+0x5c>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_MspInit+0x60>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <HAL_MspInit+0x60>)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40010000 	.word	0x40010000

08002e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 0310 	add.w	r3, r7, #16
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <HAL_ADC_MspInit+0x6c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d121      	bne.n	8002ed4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e90:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <HAL_ADC_MspInit+0x70>)
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_ADC_MspInit+0x70>)
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e9a:	6193      	str	r3, [r2, #24]
 8002e9c:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_ADC_MspInit+0x70>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea8:	4a0d      	ldr	r2, [pc, #52]	; (8002ee0 <HAL_ADC_MspInit+0x70>)
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <HAL_ADC_MspInit+0x70>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6193      	str	r3, [r2, #24]
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <HAL_ADC_MspInit+0x70>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec8:	f107 0310 	add.w	r3, r7, #16
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <HAL_ADC_MspInit+0x74>)
 8002ed0:	f7fe fe3e 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ed4:	bf00      	nop
 8002ed6:	3720      	adds	r7, #32
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40012400 	.word	0x40012400
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40010800 	.word	0x40010800

08002ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef8:	e7fe      	b.n	8002ef8 <HardFault_Handler+0x4>

08002efa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002efe:	e7fe      	b.n	8002efe <MemManage_Handler+0x4>

08002f00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f04:	e7fe      	b.n	8002f04 <BusFault_Handler+0x4>

08002f06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f0a:	e7fe      	b.n	8002f0a <UsageFault_Handler+0x4>

08002f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f34:	f7fe f82e 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <_sbrk+0x50>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <_sbrk+0x16>
		heap_end = &end;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <_sbrk+0x50>)
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <_sbrk+0x54>)
 8002f50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <_sbrk+0x50>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <_sbrk+0x50>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	466a      	mov	r2, sp
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d907      	bls.n	8002f76 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002f66:	f000 f86f 	bl	8003048 <__errno>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	230c      	movs	r3, #12
 8002f6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	e006      	b.n	8002f84 <_sbrk+0x48>
	}

	heap_end += incr;
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <_sbrk+0x50>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	4a03      	ldr	r2, [pc, #12]	; (8002f8c <_sbrk+0x50>)
 8002f80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002f82:	68fb      	ldr	r3, [r7, #12]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000698 	.word	0x20000698
 8002f90:	20000714 	.word	0x20000714

08002f94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <SystemInit+0x5c>)
 8002f9a:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <SystemInit+0x5c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002fa4:	4912      	ldr	r1, [pc, #72]	; (8002ff0 <SystemInit+0x5c>)
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <SystemInit+0x5c>)
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <SystemInit+0x60>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <SystemInit+0x5c>)
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <SystemInit+0x5c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fc0:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <SystemInit+0x5c>)
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <SystemInit+0x5c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002fcc:	4a08      	ldr	r2, [pc, #32]	; (8002ff0 <SystemInit+0x5c>)
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <SystemInit+0x5c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002fd6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <SystemInit+0x5c>)
 8002fda:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002fde:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <SystemInit+0x64>)
 8002fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fe6:	609a      	str	r2, [r3, #8]
#endif 
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	f8ff0000 	.word	0xf8ff0000
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ffc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ffe:	e003      	b.n	8003008 <LoopCopyDataInit>

08003000 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003002:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003004:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003006:	3104      	adds	r1, #4

08003008 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003008:	480a      	ldr	r0, [pc, #40]	; (8003034 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800300c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800300e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003010:	d3f6      	bcc.n	8003000 <CopyDataInit>
  ldr r2, =_sbss
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003014:	e002      	b.n	800301c <LoopFillZerobss>

08003016 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003016:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003018:	f842 3b04 	str.w	r3, [r2], #4

0800301c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800301c:	4b08      	ldr	r3, [pc, #32]	; (8003040 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800301e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003020:	d3f9      	bcc.n	8003016 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003022:	f7ff ffb7 	bl	8002f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003026:	f000 f815 	bl	8003054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800302a:	f7ff fd99 	bl	8002b60 <main>
  bx lr
 800302e:	4770      	bx	lr
  ldr r3, =_sidata
 8003030:	08006180 	.word	0x08006180
  ldr r0, =_sdata
 8003034:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003038:	2000067c 	.word	0x2000067c
  ldr r2, =_sbss
 800303c:	2000067c 	.word	0x2000067c
  ldr r3, = _ebss
 8003040:	20000714 	.word	0x20000714

08003044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003044:	e7fe      	b.n	8003044 <ADC1_2_IRQHandler>
	...

08003048 <__errno>:
 8003048:	4b01      	ldr	r3, [pc, #4]	; (8003050 <__errno+0x8>)
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	2000000c 	.word	0x2000000c

08003054 <__libc_init_array>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	2500      	movs	r5, #0
 8003058:	4e0c      	ldr	r6, [pc, #48]	; (800308c <__libc_init_array+0x38>)
 800305a:	4c0d      	ldr	r4, [pc, #52]	; (8003090 <__libc_init_array+0x3c>)
 800305c:	1ba4      	subs	r4, r4, r6
 800305e:	10a4      	asrs	r4, r4, #2
 8003060:	42a5      	cmp	r5, r4
 8003062:	d109      	bne.n	8003078 <__libc_init_array+0x24>
 8003064:	f002 ff1a 	bl	8005e9c <_init>
 8003068:	2500      	movs	r5, #0
 800306a:	4e0a      	ldr	r6, [pc, #40]	; (8003094 <__libc_init_array+0x40>)
 800306c:	4c0a      	ldr	r4, [pc, #40]	; (8003098 <__libc_init_array+0x44>)
 800306e:	1ba4      	subs	r4, r4, r6
 8003070:	10a4      	asrs	r4, r4, #2
 8003072:	42a5      	cmp	r5, r4
 8003074:	d105      	bne.n	8003082 <__libc_init_array+0x2e>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800307c:	4798      	blx	r3
 800307e:	3501      	adds	r5, #1
 8003080:	e7ee      	b.n	8003060 <__libc_init_array+0xc>
 8003082:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003086:	4798      	blx	r3
 8003088:	3501      	adds	r5, #1
 800308a:	e7f2      	b.n	8003072 <__libc_init_array+0x1e>
 800308c:	08006178 	.word	0x08006178
 8003090:	08006178 	.word	0x08006178
 8003094:	08006178 	.word	0x08006178
 8003098:	0800617c 	.word	0x0800617c

0800309c <memset>:
 800309c:	4603      	mov	r3, r0
 800309e:	4402      	add	r2, r0
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	f803 1b01 	strb.w	r1, [r3], #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <sprintf>:
 80030ac:	b40e      	push	{r1, r2, r3}
 80030ae:	f44f 7102 	mov.w	r1, #520	; 0x208
 80030b2:	b500      	push	{lr}
 80030b4:	b09c      	sub	sp, #112	; 0x70
 80030b6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80030ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030be:	9104      	str	r1, [sp, #16]
 80030c0:	9107      	str	r1, [sp, #28]
 80030c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030c6:	ab1d      	add	r3, sp, #116	; 0x74
 80030c8:	9002      	str	r0, [sp, #8]
 80030ca:	9006      	str	r0, [sp, #24]
 80030cc:	4808      	ldr	r0, [pc, #32]	; (80030f0 <sprintf+0x44>)
 80030ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80030d2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80030d6:	6800      	ldr	r0, [r0, #0]
 80030d8:	a902      	add	r1, sp, #8
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	f000 f80a 	bl	80030f4 <_svfprintf_r>
 80030e0:	2200      	movs	r2, #0
 80030e2:	9b02      	ldr	r3, [sp, #8]
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	b01c      	add	sp, #112	; 0x70
 80030e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80030ec:	b003      	add	sp, #12
 80030ee:	4770      	bx	lr
 80030f0:	2000000c 	.word	0x2000000c

080030f4 <_svfprintf_r>:
 80030f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f8:	b0bf      	sub	sp, #252	; 0xfc
 80030fa:	4689      	mov	r9, r1
 80030fc:	4615      	mov	r5, r2
 80030fe:	461f      	mov	r7, r3
 8003100:	4682      	mov	sl, r0
 8003102:	f001 fe29 	bl	8004d58 <_localeconv_r>
 8003106:	6803      	ldr	r3, [r0, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	9311      	str	r3, [sp, #68]	; 0x44
 800310c:	f7fd f88c 	bl	8000228 <strlen>
 8003110:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003114:	900a      	str	r0, [sp, #40]	; 0x28
 8003116:	061b      	lsls	r3, r3, #24
 8003118:	d518      	bpl.n	800314c <_svfprintf_r+0x58>
 800311a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800311e:	b9ab      	cbnz	r3, 800314c <_svfprintf_r+0x58>
 8003120:	2140      	movs	r1, #64	; 0x40
 8003122:	4650      	mov	r0, sl
 8003124:	f001 fe2e 	bl	8004d84 <_malloc_r>
 8003128:	f8c9 0000 	str.w	r0, [r9]
 800312c:	f8c9 0010 	str.w	r0, [r9, #16]
 8003130:	b948      	cbnz	r0, 8003146 <_svfprintf_r+0x52>
 8003132:	230c      	movs	r3, #12
 8003134:	f8ca 3000 	str.w	r3, [sl]
 8003138:	f04f 33ff 	mov.w	r3, #4294967295
 800313c:	930b      	str	r3, [sp, #44]	; 0x2c
 800313e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003140:	b03f      	add	sp, #252	; 0xfc
 8003142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003146:	2340      	movs	r3, #64	; 0x40
 8003148:	f8c9 3014 	str.w	r3, [r9, #20]
 800314c:	2300      	movs	r3, #0
 800314e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003150:	9421      	str	r4, [sp, #132]	; 0x84
 8003152:	9323      	str	r3, [sp, #140]	; 0x8c
 8003154:	9322      	str	r3, [sp, #136]	; 0x88
 8003156:	9509      	str	r5, [sp, #36]	; 0x24
 8003158:	9307      	str	r3, [sp, #28]
 800315a:	930d      	str	r3, [sp, #52]	; 0x34
 800315c:	930e      	str	r3, [sp, #56]	; 0x38
 800315e:	9315      	str	r3, [sp, #84]	; 0x54
 8003160:	9314      	str	r3, [sp, #80]	; 0x50
 8003162:	930b      	str	r3, [sp, #44]	; 0x2c
 8003164:	9312      	str	r3, [sp, #72]	; 0x48
 8003166:	9313      	str	r3, [sp, #76]	; 0x4c
 8003168:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800316a:	462b      	mov	r3, r5
 800316c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003170:	b112      	cbz	r2, 8003178 <_svfprintf_r+0x84>
 8003172:	2a25      	cmp	r2, #37	; 0x25
 8003174:	f040 8083 	bne.w	800327e <_svfprintf_r+0x18a>
 8003178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800317a:	1aee      	subs	r6, r5, r3
 800317c:	d00d      	beq.n	800319a <_svfprintf_r+0xa6>
 800317e:	e884 0048 	stmia.w	r4, {r3, r6}
 8003182:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003184:	4433      	add	r3, r6
 8003186:	9323      	str	r3, [sp, #140]	; 0x8c
 8003188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800318a:	3301      	adds	r3, #1
 800318c:	2b07      	cmp	r3, #7
 800318e:	9322      	str	r3, [sp, #136]	; 0x88
 8003190:	dc77      	bgt.n	8003282 <_svfprintf_r+0x18e>
 8003192:	3408      	adds	r4, #8
 8003194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003196:	4433      	add	r3, r6
 8003198:	930b      	str	r3, [sp, #44]	; 0x2c
 800319a:	782b      	ldrb	r3, [r5, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8725 	beq.w	8003fec <_svfprintf_r+0xef8>
 80031a2:	2300      	movs	r3, #0
 80031a4:	1c69      	adds	r1, r5, #1
 80031a6:	461a      	mov	r2, r3
 80031a8:	f04f 3bff 	mov.w	fp, #4294967295
 80031ac:	461d      	mov	r5, r3
 80031ae:	200a      	movs	r0, #10
 80031b0:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80031b4:	930c      	str	r3, [sp, #48]	; 0x30
 80031b6:	1c4e      	adds	r6, r1, #1
 80031b8:	7809      	ldrb	r1, [r1, #0]
 80031ba:	9609      	str	r6, [sp, #36]	; 0x24
 80031bc:	9106      	str	r1, [sp, #24]
 80031be:	9906      	ldr	r1, [sp, #24]
 80031c0:	3920      	subs	r1, #32
 80031c2:	2958      	cmp	r1, #88	; 0x58
 80031c4:	f200 8414 	bhi.w	80039f0 <_svfprintf_r+0x8fc>
 80031c8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80031cc:	041200a5 	.word	0x041200a5
 80031d0:	00aa0412 	.word	0x00aa0412
 80031d4:	04120412 	.word	0x04120412
 80031d8:	04120412 	.word	0x04120412
 80031dc:	04120412 	.word	0x04120412
 80031e0:	006500ad 	.word	0x006500ad
 80031e4:	00b50412 	.word	0x00b50412
 80031e8:	041200b8 	.word	0x041200b8
 80031ec:	00d800d5 	.word	0x00d800d5
 80031f0:	00d800d8 	.word	0x00d800d8
 80031f4:	00d800d8 	.word	0x00d800d8
 80031f8:	00d800d8 	.word	0x00d800d8
 80031fc:	00d800d8 	.word	0x00d800d8
 8003200:	04120412 	.word	0x04120412
 8003204:	04120412 	.word	0x04120412
 8003208:	04120412 	.word	0x04120412
 800320c:	04120412 	.word	0x04120412
 8003210:	04120412 	.word	0x04120412
 8003214:	0122010c 	.word	0x0122010c
 8003218:	01220412 	.word	0x01220412
 800321c:	04120412 	.word	0x04120412
 8003220:	04120412 	.word	0x04120412
 8003224:	041200eb 	.word	0x041200eb
 8003228:	033c0412 	.word	0x033c0412
 800322c:	04120412 	.word	0x04120412
 8003230:	04120412 	.word	0x04120412
 8003234:	03a40412 	.word	0x03a40412
 8003238:	04120412 	.word	0x04120412
 800323c:	04120085 	.word	0x04120085
 8003240:	04120412 	.word	0x04120412
 8003244:	04120412 	.word	0x04120412
 8003248:	04120412 	.word	0x04120412
 800324c:	04120412 	.word	0x04120412
 8003250:	00fe0412 	.word	0x00fe0412
 8003254:	0122006b 	.word	0x0122006b
 8003258:	01220122 	.word	0x01220122
 800325c:	006b00ee 	.word	0x006b00ee
 8003260:	04120412 	.word	0x04120412
 8003264:	041200f1 	.word	0x041200f1
 8003268:	033e031e 	.word	0x033e031e
 800326c:	00f80372 	.word	0x00f80372
 8003270:	03830412 	.word	0x03830412
 8003274:	03a60412 	.word	0x03a60412
 8003278:	04120412 	.word	0x04120412
 800327c:	03be      	.short	0x03be
 800327e:	461d      	mov	r5, r3
 8003280:	e773      	b.n	800316a <_svfprintf_r+0x76>
 8003282:	aa21      	add	r2, sp, #132	; 0x84
 8003284:	4649      	mov	r1, r9
 8003286:	4650      	mov	r0, sl
 8003288:	f002 fa90 	bl	80057ac <__ssprint_r>
 800328c:	2800      	cmp	r0, #0
 800328e:	f040 868e 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003292:	ac2e      	add	r4, sp, #184	; 0xb8
 8003294:	e77e      	b.n	8003194 <_svfprintf_r+0xa0>
 8003296:	2301      	movs	r3, #1
 8003298:	222b      	movs	r2, #43	; 0x2b
 800329a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800329c:	e78b      	b.n	80031b6 <_svfprintf_r+0xc2>
 800329e:	460f      	mov	r7, r1
 80032a0:	e7fb      	b.n	800329a <_svfprintf_r+0x1a6>
 80032a2:	b10b      	cbz	r3, 80032a8 <_svfprintf_r+0x1b4>
 80032a4:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80032a8:	06ae      	lsls	r6, r5, #26
 80032aa:	f140 80a1 	bpl.w	80033f0 <_svfprintf_r+0x2fc>
 80032ae:	3707      	adds	r7, #7
 80032b0:	f027 0707 	bic.w	r7, r7, #7
 80032b4:	f107 0308 	add.w	r3, r7, #8
 80032b8:	9308      	str	r3, [sp, #32]
 80032ba:	e9d7 6700 	ldrd	r6, r7, [r7]
 80032be:	2e00      	cmp	r6, #0
 80032c0:	f177 0300 	sbcs.w	r3, r7, #0
 80032c4:	da05      	bge.n	80032d2 <_svfprintf_r+0x1de>
 80032c6:	232d      	movs	r3, #45	; 0x2d
 80032c8:	4276      	negs	r6, r6
 80032ca:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80032ce:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80032d2:	2301      	movs	r3, #1
 80032d4:	e2c7      	b.n	8003866 <_svfprintf_r+0x772>
 80032d6:	b10b      	cbz	r3, 80032dc <_svfprintf_r+0x1e8>
 80032d8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80032dc:	4ba0      	ldr	r3, [pc, #640]	; (8003560 <_svfprintf_r+0x46c>)
 80032de:	9315      	str	r3, [sp, #84]	; 0x54
 80032e0:	06ab      	lsls	r3, r5, #26
 80032e2:	f140 8336 	bpl.w	8003952 <_svfprintf_r+0x85e>
 80032e6:	3707      	adds	r7, #7
 80032e8:	f027 0707 	bic.w	r7, r7, #7
 80032ec:	f107 0308 	add.w	r3, r7, #8
 80032f0:	9308      	str	r3, [sp, #32]
 80032f2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80032f6:	07e8      	lsls	r0, r5, #31
 80032f8:	d50b      	bpl.n	8003312 <_svfprintf_r+0x21e>
 80032fa:	ea56 0307 	orrs.w	r3, r6, r7
 80032fe:	d008      	beq.n	8003312 <_svfprintf_r+0x21e>
 8003300:	2330      	movs	r3, #48	; 0x30
 8003302:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8003306:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800330a:	f045 0502 	orr.w	r5, r5, #2
 800330e:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8003312:	2302      	movs	r3, #2
 8003314:	e2a4      	b.n	8003860 <_svfprintf_r+0x76c>
 8003316:	2a00      	cmp	r2, #0
 8003318:	d1bf      	bne.n	800329a <_svfprintf_r+0x1a6>
 800331a:	2301      	movs	r3, #1
 800331c:	2220      	movs	r2, #32
 800331e:	e7bc      	b.n	800329a <_svfprintf_r+0x1a6>
 8003320:	f045 0501 	orr.w	r5, r5, #1
 8003324:	e7b9      	b.n	800329a <_svfprintf_r+0x1a6>
 8003326:	683e      	ldr	r6, [r7, #0]
 8003328:	1d39      	adds	r1, r7, #4
 800332a:	2e00      	cmp	r6, #0
 800332c:	960c      	str	r6, [sp, #48]	; 0x30
 800332e:	dab6      	bge.n	800329e <_svfprintf_r+0x1aa>
 8003330:	460f      	mov	r7, r1
 8003332:	4276      	negs	r6, r6
 8003334:	960c      	str	r6, [sp, #48]	; 0x30
 8003336:	f045 0504 	orr.w	r5, r5, #4
 800333a:	e7ae      	b.n	800329a <_svfprintf_r+0x1a6>
 800333c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800333e:	1c4e      	adds	r6, r1, #1
 8003340:	7809      	ldrb	r1, [r1, #0]
 8003342:	292a      	cmp	r1, #42	; 0x2a
 8003344:	9106      	str	r1, [sp, #24]
 8003346:	d010      	beq.n	800336a <_svfprintf_r+0x276>
 8003348:	f04f 0b00 	mov.w	fp, #0
 800334c:	9609      	str	r6, [sp, #36]	; 0x24
 800334e:	9906      	ldr	r1, [sp, #24]
 8003350:	3930      	subs	r1, #48	; 0x30
 8003352:	2909      	cmp	r1, #9
 8003354:	f63f af33 	bhi.w	80031be <_svfprintf_r+0xca>
 8003358:	fb00 1b0b 	mla	fp, r0, fp, r1
 800335c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800335e:	460e      	mov	r6, r1
 8003360:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003364:	9106      	str	r1, [sp, #24]
 8003366:	9609      	str	r6, [sp, #36]	; 0x24
 8003368:	e7f1      	b.n	800334e <_svfprintf_r+0x25a>
 800336a:	6839      	ldr	r1, [r7, #0]
 800336c:	9609      	str	r6, [sp, #36]	; 0x24
 800336e:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8003372:	3704      	adds	r7, #4
 8003374:	e791      	b.n	800329a <_svfprintf_r+0x1a6>
 8003376:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800337a:	e78e      	b.n	800329a <_svfprintf_r+0x1a6>
 800337c:	2100      	movs	r1, #0
 800337e:	910c      	str	r1, [sp, #48]	; 0x30
 8003380:	9906      	ldr	r1, [sp, #24]
 8003382:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003384:	3930      	subs	r1, #48	; 0x30
 8003386:	fb00 1106 	mla	r1, r0, r6, r1
 800338a:	910c      	str	r1, [sp, #48]	; 0x30
 800338c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800338e:	460e      	mov	r6, r1
 8003390:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003394:	9106      	str	r1, [sp, #24]
 8003396:	9906      	ldr	r1, [sp, #24]
 8003398:	9609      	str	r6, [sp, #36]	; 0x24
 800339a:	3930      	subs	r1, #48	; 0x30
 800339c:	2909      	cmp	r1, #9
 800339e:	d9ef      	bls.n	8003380 <_svfprintf_r+0x28c>
 80033a0:	e70d      	b.n	80031be <_svfprintf_r+0xca>
 80033a2:	f045 0508 	orr.w	r5, r5, #8
 80033a6:	e778      	b.n	800329a <_svfprintf_r+0x1a6>
 80033a8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80033ac:	e775      	b.n	800329a <_svfprintf_r+0x1a6>
 80033ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033b0:	7809      	ldrb	r1, [r1, #0]
 80033b2:	296c      	cmp	r1, #108	; 0x6c
 80033b4:	d105      	bne.n	80033c2 <_svfprintf_r+0x2ce>
 80033b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033b8:	3101      	adds	r1, #1
 80033ba:	9109      	str	r1, [sp, #36]	; 0x24
 80033bc:	f045 0520 	orr.w	r5, r5, #32
 80033c0:	e76b      	b.n	800329a <_svfprintf_r+0x1a6>
 80033c2:	f045 0510 	orr.w	r5, r5, #16
 80033c6:	e768      	b.n	800329a <_svfprintf_r+0x1a6>
 80033c8:	2600      	movs	r6, #0
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	9308      	str	r3, [sp, #32]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80033d4:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80033d8:	f04f 0b01 	mov.w	fp, #1
 80033dc:	4637      	mov	r7, r6
 80033de:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 80033e2:	e11c      	b.n	800361e <_svfprintf_r+0x52a>
 80033e4:	b10b      	cbz	r3, 80033ea <_svfprintf_r+0x2f6>
 80033e6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80033ea:	f045 0510 	orr.w	r5, r5, #16
 80033ee:	e75b      	b.n	80032a8 <_svfprintf_r+0x1b4>
 80033f0:	f015 0f10 	tst.w	r5, #16
 80033f4:	f107 0304 	add.w	r3, r7, #4
 80033f8:	d003      	beq.n	8003402 <_svfprintf_r+0x30e>
 80033fa:	683e      	ldr	r6, [r7, #0]
 80033fc:	9308      	str	r3, [sp, #32]
 80033fe:	17f7      	asrs	r7, r6, #31
 8003400:	e75d      	b.n	80032be <_svfprintf_r+0x1ca>
 8003402:	683e      	ldr	r6, [r7, #0]
 8003404:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003408:	9308      	str	r3, [sp, #32]
 800340a:	bf18      	it	ne
 800340c:	b236      	sxthne	r6, r6
 800340e:	e7f6      	b.n	80033fe <_svfprintf_r+0x30a>
 8003410:	b10b      	cbz	r3, 8003416 <_svfprintf_r+0x322>
 8003412:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003416:	3707      	adds	r7, #7
 8003418:	f027 0707 	bic.w	r7, r7, #7
 800341c:	f107 0308 	add.w	r3, r7, #8
 8003420:	9308      	str	r3, [sp, #32]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	930d      	str	r3, [sp, #52]	; 0x34
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800342e:	930e      	str	r3, [sp, #56]	; 0x38
 8003430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003432:	4638      	mov	r0, r7
 8003434:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8003438:	4631      	mov	r1, r6
 800343a:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <_svfprintf_r+0x470>)
 800343c:	f7fd fb4e 	bl	8000adc <__aeabi_dcmpun>
 8003440:	2800      	cmp	r0, #0
 8003442:	f040 85dc 	bne.w	8003ffe <_svfprintf_r+0xf0a>
 8003446:	f04f 32ff 	mov.w	r2, #4294967295
 800344a:	4b46      	ldr	r3, [pc, #280]	; (8003564 <_svfprintf_r+0x470>)
 800344c:	4638      	mov	r0, r7
 800344e:	4631      	mov	r1, r6
 8003450:	f7fd fb26 	bl	8000aa0 <__aeabi_dcmple>
 8003454:	2800      	cmp	r0, #0
 8003456:	f040 85d2 	bne.w	8003ffe <_svfprintf_r+0xf0a>
 800345a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800345c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800345e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003460:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003462:	f7fd fb13 	bl	8000a8c <__aeabi_dcmplt>
 8003466:	b110      	cbz	r0, 800346e <_svfprintf_r+0x37a>
 8003468:	232d      	movs	r3, #45	; 0x2d
 800346a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800346e:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <_svfprintf_r+0x474>)
 8003470:	4a3e      	ldr	r2, [pc, #248]	; (800356c <_svfprintf_r+0x478>)
 8003472:	9906      	ldr	r1, [sp, #24]
 8003474:	f04f 0b03 	mov.w	fp, #3
 8003478:	2947      	cmp	r1, #71	; 0x47
 800347a:	bfcc      	ite	gt
 800347c:	4690      	movgt	r8, r2
 800347e:	4698      	movle	r8, r3
 8003480:	2600      	movs	r6, #0
 8003482:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8003486:	4637      	mov	r7, r6
 8003488:	e0c9      	b.n	800361e <_svfprintf_r+0x52a>
 800348a:	f1bb 3fff 	cmp.w	fp, #4294967295
 800348e:	d026      	beq.n	80034de <_svfprintf_r+0x3ea>
 8003490:	9b06      	ldr	r3, [sp, #24]
 8003492:	f023 0320 	bic.w	r3, r3, #32
 8003496:	2b47      	cmp	r3, #71	; 0x47
 8003498:	d104      	bne.n	80034a4 <_svfprintf_r+0x3b0>
 800349a:	f1bb 0f00 	cmp.w	fp, #0
 800349e:	bf08      	it	eq
 80034a0:	f04f 0b01 	moveq.w	fp, #1
 80034a4:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80034a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80034aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034ac:	1e1f      	subs	r7, r3, #0
 80034ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034b0:	bfa8      	it	ge
 80034b2:	9710      	strge	r7, [sp, #64]	; 0x40
 80034b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80034b6:	bfbd      	ittte	lt
 80034b8:	463b      	movlt	r3, r7
 80034ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80034be:	9310      	strlt	r3, [sp, #64]	; 0x40
 80034c0:	2300      	movge	r3, #0
 80034c2:	bfb8      	it	lt
 80034c4:	232d      	movlt	r3, #45	; 0x2d
 80034c6:	9316      	str	r3, [sp, #88]	; 0x58
 80034c8:	9b06      	ldr	r3, [sp, #24]
 80034ca:	f023 0720 	bic.w	r7, r3, #32
 80034ce:	2f46      	cmp	r7, #70	; 0x46
 80034d0:	d008      	beq.n	80034e4 <_svfprintf_r+0x3f0>
 80034d2:	2f45      	cmp	r7, #69	; 0x45
 80034d4:	d142      	bne.n	800355c <_svfprintf_r+0x468>
 80034d6:	f10b 0601 	add.w	r6, fp, #1
 80034da:	2302      	movs	r3, #2
 80034dc:	e004      	b.n	80034e8 <_svfprintf_r+0x3f4>
 80034de:	f04f 0b06 	mov.w	fp, #6
 80034e2:	e7df      	b.n	80034a4 <_svfprintf_r+0x3b0>
 80034e4:	465e      	mov	r6, fp
 80034e6:	2303      	movs	r3, #3
 80034e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80034ea:	9204      	str	r2, [sp, #16]
 80034ec:	aa1c      	add	r2, sp, #112	; 0x70
 80034ee:	9203      	str	r2, [sp, #12]
 80034f0:	aa1b      	add	r2, sp, #108	; 0x6c
 80034f2:	9202      	str	r2, [sp, #8]
 80034f4:	e88d 0048 	stmia.w	sp, {r3, r6}
 80034f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80034fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034fc:	4650      	mov	r0, sl
 80034fe:	f000 fe57 	bl	80041b0 <_dtoa_r>
 8003502:	2f47      	cmp	r7, #71	; 0x47
 8003504:	4680      	mov	r8, r0
 8003506:	d102      	bne.n	800350e <_svfprintf_r+0x41a>
 8003508:	07e8      	lsls	r0, r5, #31
 800350a:	f140 8585 	bpl.w	8004018 <_svfprintf_r+0xf24>
 800350e:	eb08 0306 	add.w	r3, r8, r6
 8003512:	2f46      	cmp	r7, #70	; 0x46
 8003514:	9307      	str	r3, [sp, #28]
 8003516:	d111      	bne.n	800353c <_svfprintf_r+0x448>
 8003518:	f898 3000 	ldrb.w	r3, [r8]
 800351c:	2b30      	cmp	r3, #48	; 0x30
 800351e:	d109      	bne.n	8003534 <_svfprintf_r+0x440>
 8003520:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003522:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003524:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003526:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003528:	f7fd faa6 	bl	8000a78 <__aeabi_dcmpeq>
 800352c:	b910      	cbnz	r0, 8003534 <_svfprintf_r+0x440>
 800352e:	f1c6 0601 	rsb	r6, r6, #1
 8003532:	961b      	str	r6, [sp, #108]	; 0x6c
 8003534:	9a07      	ldr	r2, [sp, #28]
 8003536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003538:	441a      	add	r2, r3
 800353a:	9207      	str	r2, [sp, #28]
 800353c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800353e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003540:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003542:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003544:	f7fd fa98 	bl	8000a78 <__aeabi_dcmpeq>
 8003548:	b990      	cbnz	r0, 8003570 <_svfprintf_r+0x47c>
 800354a:	2230      	movs	r2, #48	; 0x30
 800354c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800354e:	9907      	ldr	r1, [sp, #28]
 8003550:	4299      	cmp	r1, r3
 8003552:	d90f      	bls.n	8003574 <_svfprintf_r+0x480>
 8003554:	1c59      	adds	r1, r3, #1
 8003556:	911f      	str	r1, [sp, #124]	; 0x7c
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	e7f7      	b.n	800354c <_svfprintf_r+0x458>
 800355c:	465e      	mov	r6, fp
 800355e:	e7bc      	b.n	80034da <_svfprintf_r+0x3e6>
 8003560:	08005f10 	.word	0x08005f10
 8003564:	7fefffff 	.word	0x7fefffff
 8003568:	08005f00 	.word	0x08005f00
 800356c:	08005f04 	.word	0x08005f04
 8003570:	9b07      	ldr	r3, [sp, #28]
 8003572:	931f      	str	r3, [sp, #124]	; 0x7c
 8003574:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003576:	2f47      	cmp	r7, #71	; 0x47
 8003578:	eba3 0308 	sub.w	r3, r3, r8
 800357c:	9307      	str	r3, [sp, #28]
 800357e:	f040 8100 	bne.w	8003782 <_svfprintf_r+0x68e>
 8003582:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003584:	1cd9      	adds	r1, r3, #3
 8003586:	db02      	blt.n	800358e <_svfprintf_r+0x49a>
 8003588:	459b      	cmp	fp, r3
 800358a:	f280 8126 	bge.w	80037da <_svfprintf_r+0x6e6>
 800358e:	9b06      	ldr	r3, [sp, #24]
 8003590:	3b02      	subs	r3, #2
 8003592:	9306      	str	r3, [sp, #24]
 8003594:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003596:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800359a:	1e53      	subs	r3, r2, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	bfa8      	it	ge
 80035a0:	222b      	movge	r2, #43	; 0x2b
 80035a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80035a4:	bfbc      	itt	lt
 80035a6:	f1c2 0301 	rsblt	r3, r2, #1
 80035aa:	222d      	movlt	r2, #45	; 0x2d
 80035ac:	2b09      	cmp	r3, #9
 80035ae:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 80035b2:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 80035b6:	f340 8100 	ble.w	80037ba <_svfprintf_r+0x6c6>
 80035ba:	260a      	movs	r6, #10
 80035bc:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 80035c0:	fb93 f0f6 	sdiv	r0, r3, r6
 80035c4:	fb06 3310 	mls	r3, r6, r0, r3
 80035c8:	2809      	cmp	r0, #9
 80035ca:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80035ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80035d2:	f102 31ff 	add.w	r1, r2, #4294967295
 80035d6:	4603      	mov	r3, r0
 80035d8:	f300 80e8 	bgt.w	80037ac <_svfprintf_r+0x6b8>
 80035dc:	3330      	adds	r3, #48	; 0x30
 80035de:	f801 3c01 	strb.w	r3, [r1, #-1]
 80035e2:	3a02      	subs	r2, #2
 80035e4:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 80035e8:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 80035ec:	4282      	cmp	r2, r0
 80035ee:	4619      	mov	r1, r3
 80035f0:	f0c0 80de 	bcc.w	80037b0 <_svfprintf_r+0x6bc>
 80035f4:	9a07      	ldr	r2, [sp, #28]
 80035f6:	ab1d      	add	r3, sp, #116	; 0x74
 80035f8:	1acb      	subs	r3, r1, r3
 80035fa:	2a01      	cmp	r2, #1
 80035fc:	9314      	str	r3, [sp, #80]	; 0x50
 80035fe:	eb03 0b02 	add.w	fp, r3, r2
 8003602:	dc02      	bgt.n	800360a <_svfprintf_r+0x516>
 8003604:	f015 0701 	ands.w	r7, r5, #1
 8003608:	d002      	beq.n	8003610 <_svfprintf_r+0x51c>
 800360a:	2700      	movs	r7, #0
 800360c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800360e:	449b      	add	fp, r3
 8003610:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003612:	b113      	cbz	r3, 800361a <_svfprintf_r+0x526>
 8003614:	232d      	movs	r3, #45	; 0x2d
 8003616:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800361a:	2600      	movs	r6, #0
 800361c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800361e:	455e      	cmp	r6, fp
 8003620:	4633      	mov	r3, r6
 8003622:	bfb8      	it	lt
 8003624:	465b      	movlt	r3, fp
 8003626:	930f      	str	r3, [sp, #60]	; 0x3c
 8003628:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800362c:	b113      	cbz	r3, 8003634 <_svfprintf_r+0x540>
 800362e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003630:	3301      	adds	r3, #1
 8003632:	930f      	str	r3, [sp, #60]	; 0x3c
 8003634:	f015 0302 	ands.w	r3, r5, #2
 8003638:	9316      	str	r3, [sp, #88]	; 0x58
 800363a:	bf1e      	ittt	ne
 800363c:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 800363e:	3302      	addne	r3, #2
 8003640:	930f      	strne	r3, [sp, #60]	; 0x3c
 8003642:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8003646:	9317      	str	r3, [sp, #92]	; 0x5c
 8003648:	d118      	bne.n	800367c <_svfprintf_r+0x588>
 800364a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800364c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	9310      	str	r3, [sp, #64]	; 0x40
 8003654:	dd12      	ble.n	800367c <_svfprintf_r+0x588>
 8003656:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003658:	2b10      	cmp	r3, #16
 800365a:	4bab      	ldr	r3, [pc, #684]	; (8003908 <_svfprintf_r+0x814>)
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	f300 81d9 	bgt.w	8003a14 <_svfprintf_r+0x920>
 8003662:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003666:	6063      	str	r3, [r4, #4]
 8003668:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800366a:	4413      	add	r3, r2
 800366c:	9323      	str	r3, [sp, #140]	; 0x8c
 800366e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003670:	3301      	adds	r3, #1
 8003672:	2b07      	cmp	r3, #7
 8003674:	9322      	str	r3, [sp, #136]	; 0x88
 8003676:	f300 81e6 	bgt.w	8003a46 <_svfprintf_r+0x952>
 800367a:	3408      	adds	r4, #8
 800367c:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8003680:	b173      	cbz	r3, 80036a0 <_svfprintf_r+0x5ac>
 8003682:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8003686:	6023      	str	r3, [r4, #0]
 8003688:	2301      	movs	r3, #1
 800368a:	6063      	str	r3, [r4, #4]
 800368c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800368e:	3301      	adds	r3, #1
 8003690:	9323      	str	r3, [sp, #140]	; 0x8c
 8003692:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003694:	3301      	adds	r3, #1
 8003696:	2b07      	cmp	r3, #7
 8003698:	9322      	str	r3, [sp, #136]	; 0x88
 800369a:	f300 81de 	bgt.w	8003a5a <_svfprintf_r+0x966>
 800369e:	3408      	adds	r4, #8
 80036a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80036a2:	b16b      	cbz	r3, 80036c0 <_svfprintf_r+0x5cc>
 80036a4:	ab1a      	add	r3, sp, #104	; 0x68
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	2302      	movs	r3, #2
 80036aa:	6063      	str	r3, [r4, #4]
 80036ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80036ae:	3302      	adds	r3, #2
 80036b0:	9323      	str	r3, [sp, #140]	; 0x8c
 80036b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036b4:	3301      	adds	r3, #1
 80036b6:	2b07      	cmp	r3, #7
 80036b8:	9322      	str	r3, [sp, #136]	; 0x88
 80036ba:	f300 81d8 	bgt.w	8003a6e <_svfprintf_r+0x97a>
 80036be:	3408      	adds	r4, #8
 80036c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80036c2:	2b80      	cmp	r3, #128	; 0x80
 80036c4:	d118      	bne.n	80036f8 <_svfprintf_r+0x604>
 80036c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80036c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	9310      	str	r3, [sp, #64]	; 0x40
 80036d0:	dd12      	ble.n	80036f8 <_svfprintf_r+0x604>
 80036d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	4b8d      	ldr	r3, [pc, #564]	; (800390c <_svfprintf_r+0x818>)
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	f300 81d2 	bgt.w	8003a82 <_svfprintf_r+0x98e>
 80036de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80036e2:	6063      	str	r3, [r4, #4]
 80036e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80036e6:	4413      	add	r3, r2
 80036e8:	9323      	str	r3, [sp, #140]	; 0x8c
 80036ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036ec:	3301      	adds	r3, #1
 80036ee:	2b07      	cmp	r3, #7
 80036f0:	9322      	str	r3, [sp, #136]	; 0x88
 80036f2:	f300 81df 	bgt.w	8003ab4 <_svfprintf_r+0x9c0>
 80036f6:	3408      	adds	r4, #8
 80036f8:	eba6 060b 	sub.w	r6, r6, fp
 80036fc:	2e00      	cmp	r6, #0
 80036fe:	dd0f      	ble.n	8003720 <_svfprintf_r+0x62c>
 8003700:	4b82      	ldr	r3, [pc, #520]	; (800390c <_svfprintf_r+0x818>)
 8003702:	2e10      	cmp	r6, #16
 8003704:	6023      	str	r3, [r4, #0]
 8003706:	f300 81df 	bgt.w	8003ac8 <_svfprintf_r+0x9d4>
 800370a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800370c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800370e:	3301      	adds	r3, #1
 8003710:	6066      	str	r6, [r4, #4]
 8003712:	2b07      	cmp	r3, #7
 8003714:	4406      	add	r6, r0
 8003716:	9623      	str	r6, [sp, #140]	; 0x8c
 8003718:	9322      	str	r3, [sp, #136]	; 0x88
 800371a:	f300 81ec 	bgt.w	8003af6 <_svfprintf_r+0xa02>
 800371e:	3408      	adds	r4, #8
 8003720:	05eb      	lsls	r3, r5, #23
 8003722:	f100 81f2 	bmi.w	8003b0a <_svfprintf_r+0xa16>
 8003726:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003728:	e884 0900 	stmia.w	r4, {r8, fp}
 800372c:	445b      	add	r3, fp
 800372e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003730:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003732:	3301      	adds	r3, #1
 8003734:	2b07      	cmp	r3, #7
 8003736:	9322      	str	r3, [sp, #136]	; 0x88
 8003738:	f340 8419 	ble.w	8003f6e <_svfprintf_r+0xe7a>
 800373c:	aa21      	add	r2, sp, #132	; 0x84
 800373e:	4649      	mov	r1, r9
 8003740:	4650      	mov	r0, sl
 8003742:	f002 f833 	bl	80057ac <__ssprint_r>
 8003746:	2800      	cmp	r0, #0
 8003748:	f040 8431 	bne.w	8003fae <_svfprintf_r+0xeba>
 800374c:	ac2e      	add	r4, sp, #184	; 0xb8
 800374e:	076b      	lsls	r3, r5, #29
 8003750:	f100 8410 	bmi.w	8003f74 <_svfprintf_r+0xe80>
 8003754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003758:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800375a:	428a      	cmp	r2, r1
 800375c:	bfac      	ite	ge
 800375e:	189b      	addge	r3, r3, r2
 8003760:	185b      	addlt	r3, r3, r1
 8003762:	930b      	str	r3, [sp, #44]	; 0x2c
 8003764:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003766:	b13b      	cbz	r3, 8003778 <_svfprintf_r+0x684>
 8003768:	aa21      	add	r2, sp, #132	; 0x84
 800376a:	4649      	mov	r1, r9
 800376c:	4650      	mov	r0, sl
 800376e:	f002 f81d 	bl	80057ac <__ssprint_r>
 8003772:	2800      	cmp	r0, #0
 8003774:	f040 841b 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003778:	2300      	movs	r3, #0
 800377a:	9f08      	ldr	r7, [sp, #32]
 800377c:	9322      	str	r3, [sp, #136]	; 0x88
 800377e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003780:	e4f2      	b.n	8003168 <_svfprintf_r+0x74>
 8003782:	9b06      	ldr	r3, [sp, #24]
 8003784:	2b65      	cmp	r3, #101	; 0x65
 8003786:	f77f af05 	ble.w	8003594 <_svfprintf_r+0x4a0>
 800378a:	9b06      	ldr	r3, [sp, #24]
 800378c:	2b66      	cmp	r3, #102	; 0x66
 800378e:	d124      	bne.n	80037da <_svfprintf_r+0x6e6>
 8003790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003792:	2b00      	cmp	r3, #0
 8003794:	dd19      	ble.n	80037ca <_svfprintf_r+0x6d6>
 8003796:	f1bb 0f00 	cmp.w	fp, #0
 800379a:	d101      	bne.n	80037a0 <_svfprintf_r+0x6ac>
 800379c:	07ea      	lsls	r2, r5, #31
 800379e:	d502      	bpl.n	80037a6 <_svfprintf_r+0x6b2>
 80037a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037a2:	4413      	add	r3, r2
 80037a4:	445b      	add	r3, fp
 80037a6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80037a8:	469b      	mov	fp, r3
 80037aa:	e731      	b.n	8003610 <_svfprintf_r+0x51c>
 80037ac:	460a      	mov	r2, r1
 80037ae:	e707      	b.n	80035c0 <_svfprintf_r+0x4cc>
 80037b0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80037b4:	f803 1b01 	strb.w	r1, [r3], #1
 80037b8:	e718      	b.n	80035ec <_svfprintf_r+0x4f8>
 80037ba:	2230      	movs	r2, #48	; 0x30
 80037bc:	4413      	add	r3, r2
 80037be:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 80037c2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80037c6:	a91e      	add	r1, sp, #120	; 0x78
 80037c8:	e714      	b.n	80035f4 <_svfprintf_r+0x500>
 80037ca:	f1bb 0f00 	cmp.w	fp, #0
 80037ce:	d101      	bne.n	80037d4 <_svfprintf_r+0x6e0>
 80037d0:	07eb      	lsls	r3, r5, #31
 80037d2:	d515      	bpl.n	8003800 <_svfprintf_r+0x70c>
 80037d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037d6:	3301      	adds	r3, #1
 80037d8:	e7e4      	b.n	80037a4 <_svfprintf_r+0x6b0>
 80037da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80037dc:	9b07      	ldr	r3, [sp, #28]
 80037de:	429a      	cmp	r2, r3
 80037e0:	db06      	blt.n	80037f0 <_svfprintf_r+0x6fc>
 80037e2:	07ef      	lsls	r7, r5, #31
 80037e4:	d50e      	bpl.n	8003804 <_svfprintf_r+0x710>
 80037e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037e8:	4413      	add	r3, r2
 80037ea:	2267      	movs	r2, #103	; 0x67
 80037ec:	9206      	str	r2, [sp, #24]
 80037ee:	e7da      	b.n	80037a6 <_svfprintf_r+0x6b2>
 80037f0:	9b07      	ldr	r3, [sp, #28]
 80037f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80037f4:	2a00      	cmp	r2, #0
 80037f6:	440b      	add	r3, r1
 80037f8:	dcf7      	bgt.n	80037ea <_svfprintf_r+0x6f6>
 80037fa:	f1c2 0201 	rsb	r2, r2, #1
 80037fe:	e7f3      	b.n	80037e8 <_svfprintf_r+0x6f4>
 8003800:	2301      	movs	r3, #1
 8003802:	e7d0      	b.n	80037a6 <_svfprintf_r+0x6b2>
 8003804:	4613      	mov	r3, r2
 8003806:	e7f0      	b.n	80037ea <_svfprintf_r+0x6f6>
 8003808:	b10b      	cbz	r3, 800380e <_svfprintf_r+0x71a>
 800380a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800380e:	f015 0f20 	tst.w	r5, #32
 8003812:	f107 0304 	add.w	r3, r7, #4
 8003816:	d008      	beq.n	800382a <_svfprintf_r+0x736>
 8003818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	17ce      	asrs	r6, r1, #31
 800381e:	4608      	mov	r0, r1
 8003820:	4631      	mov	r1, r6
 8003822:	e9c2 0100 	strd	r0, r1, [r2]
 8003826:	461f      	mov	r7, r3
 8003828:	e49e      	b.n	8003168 <_svfprintf_r+0x74>
 800382a:	06ee      	lsls	r6, r5, #27
 800382c:	d503      	bpl.n	8003836 <_svfprintf_r+0x742>
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003832:	6011      	str	r1, [r2, #0]
 8003834:	e7f7      	b.n	8003826 <_svfprintf_r+0x732>
 8003836:	0668      	lsls	r0, r5, #25
 8003838:	d5f9      	bpl.n	800382e <_svfprintf_r+0x73a>
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8003840:	8011      	strh	r1, [r2, #0]
 8003842:	e7f0      	b.n	8003826 <_svfprintf_r+0x732>
 8003844:	f045 0510 	orr.w	r5, r5, #16
 8003848:	f015 0320 	ands.w	r3, r5, #32
 800384c:	d022      	beq.n	8003894 <_svfprintf_r+0x7a0>
 800384e:	3707      	adds	r7, #7
 8003850:	f027 0707 	bic.w	r7, r7, #7
 8003854:	f107 0308 	add.w	r3, r7, #8
 8003858:	9308      	str	r3, [sp, #32]
 800385a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800385e:	2300      	movs	r3, #0
 8003860:	2200      	movs	r2, #0
 8003862:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003866:	f1bb 3fff 	cmp.w	fp, #4294967295
 800386a:	f000 83db 	beq.w	8004024 <_svfprintf_r+0xf30>
 800386e:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8003872:	920f      	str	r2, [sp, #60]	; 0x3c
 8003874:	ea56 0207 	orrs.w	r2, r6, r7
 8003878:	f040 83d9 	bne.w	800402e <_svfprintf_r+0xf3a>
 800387c:	f1bb 0f00 	cmp.w	fp, #0
 8003880:	f000 80aa 	beq.w	80039d8 <_svfprintf_r+0x8e4>
 8003884:	2b01      	cmp	r3, #1
 8003886:	d076      	beq.n	8003976 <_svfprintf_r+0x882>
 8003888:	2b02      	cmp	r3, #2
 800388a:	f000 8091 	beq.w	80039b0 <_svfprintf_r+0x8bc>
 800388e:	2600      	movs	r6, #0
 8003890:	2700      	movs	r7, #0
 8003892:	e3d2      	b.n	800403a <_svfprintf_r+0xf46>
 8003894:	1d3a      	adds	r2, r7, #4
 8003896:	f015 0110 	ands.w	r1, r5, #16
 800389a:	9208      	str	r2, [sp, #32]
 800389c:	d002      	beq.n	80038a4 <_svfprintf_r+0x7b0>
 800389e:	683e      	ldr	r6, [r7, #0]
 80038a0:	2700      	movs	r7, #0
 80038a2:	e7dd      	b.n	8003860 <_svfprintf_r+0x76c>
 80038a4:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80038a8:	d0f9      	beq.n	800389e <_svfprintf_r+0x7aa>
 80038aa:	883e      	ldrh	r6, [r7, #0]
 80038ac:	2700      	movs	r7, #0
 80038ae:	e7d6      	b.n	800385e <_svfprintf_r+0x76a>
 80038b0:	1d3b      	adds	r3, r7, #4
 80038b2:	9308      	str	r3, [sp, #32]
 80038b4:	2330      	movs	r3, #48	; 0x30
 80038b6:	2278      	movs	r2, #120	; 0x78
 80038b8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <_svfprintf_r+0x81c>)
 80038be:	683e      	ldr	r6, [r7, #0]
 80038c0:	9315      	str	r3, [sp, #84]	; 0x54
 80038c2:	2700      	movs	r7, #0
 80038c4:	f045 0502 	orr.w	r5, r5, #2
 80038c8:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 80038cc:	2302      	movs	r3, #2
 80038ce:	9206      	str	r2, [sp, #24]
 80038d0:	e7c6      	b.n	8003860 <_svfprintf_r+0x76c>
 80038d2:	2600      	movs	r6, #0
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	f1bb 3fff 	cmp.w	fp, #4294967295
 80038da:	9308      	str	r3, [sp, #32]
 80038dc:	f8d7 8000 	ldr.w	r8, [r7]
 80038e0:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80038e4:	d00a      	beq.n	80038fc <_svfprintf_r+0x808>
 80038e6:	465a      	mov	r2, fp
 80038e8:	4631      	mov	r1, r6
 80038ea:	4640      	mov	r0, r8
 80038ec:	f001 fc56 	bl	800519c <memchr>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	f000 808d 	beq.w	8003a10 <_svfprintf_r+0x91c>
 80038f6:	eba0 0b08 	sub.w	fp, r0, r8
 80038fa:	e5c4      	b.n	8003486 <_svfprintf_r+0x392>
 80038fc:	4640      	mov	r0, r8
 80038fe:	f7fc fc93 	bl	8000228 <strlen>
 8003902:	4683      	mov	fp, r0
 8003904:	e5bf      	b.n	8003486 <_svfprintf_r+0x392>
 8003906:	bf00      	nop
 8003908:	08005f34 	.word	0x08005f34
 800390c:	08005f44 	.word	0x08005f44
 8003910:	08005f21 	.word	0x08005f21
 8003914:	f045 0510 	orr.w	r5, r5, #16
 8003918:	06a9      	lsls	r1, r5, #26
 800391a:	d509      	bpl.n	8003930 <_svfprintf_r+0x83c>
 800391c:	3707      	adds	r7, #7
 800391e:	f027 0707 	bic.w	r7, r7, #7
 8003922:	f107 0308 	add.w	r3, r7, #8
 8003926:	9308      	str	r3, [sp, #32]
 8003928:	e9d7 6700 	ldrd	r6, r7, [r7]
 800392c:	2301      	movs	r3, #1
 800392e:	e797      	b.n	8003860 <_svfprintf_r+0x76c>
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	f015 0f10 	tst.w	r5, #16
 8003936:	9308      	str	r3, [sp, #32]
 8003938:	d001      	beq.n	800393e <_svfprintf_r+0x84a>
 800393a:	683e      	ldr	r6, [r7, #0]
 800393c:	e002      	b.n	8003944 <_svfprintf_r+0x850>
 800393e:	066a      	lsls	r2, r5, #25
 8003940:	d5fb      	bpl.n	800393a <_svfprintf_r+0x846>
 8003942:	883e      	ldrh	r6, [r7, #0]
 8003944:	2700      	movs	r7, #0
 8003946:	e7f1      	b.n	800392c <_svfprintf_r+0x838>
 8003948:	b10b      	cbz	r3, 800394e <_svfprintf_r+0x85a>
 800394a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800394e:	4ba3      	ldr	r3, [pc, #652]	; (8003bdc <_svfprintf_r+0xae8>)
 8003950:	e4c5      	b.n	80032de <_svfprintf_r+0x1ea>
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	f015 0f10 	tst.w	r5, #16
 8003958:	9308      	str	r3, [sp, #32]
 800395a:	d001      	beq.n	8003960 <_svfprintf_r+0x86c>
 800395c:	683e      	ldr	r6, [r7, #0]
 800395e:	e002      	b.n	8003966 <_svfprintf_r+0x872>
 8003960:	066e      	lsls	r6, r5, #25
 8003962:	d5fb      	bpl.n	800395c <_svfprintf_r+0x868>
 8003964:	883e      	ldrh	r6, [r7, #0]
 8003966:	2700      	movs	r7, #0
 8003968:	e4c5      	b.n	80032f6 <_svfprintf_r+0x202>
 800396a:	4643      	mov	r3, r8
 800396c:	e366      	b.n	800403c <_svfprintf_r+0xf48>
 800396e:	2f00      	cmp	r7, #0
 8003970:	bf08      	it	eq
 8003972:	2e0a      	cmpeq	r6, #10
 8003974:	d205      	bcs.n	8003982 <_svfprintf_r+0x88e>
 8003976:	3630      	adds	r6, #48	; 0x30
 8003978:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 800397c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8003980:	e377      	b.n	8004072 <_svfprintf_r+0xf7e>
 8003982:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8003986:	4630      	mov	r0, r6
 8003988:	4639      	mov	r1, r7
 800398a:	220a      	movs	r2, #10
 800398c:	2300      	movs	r3, #0
 800398e:	f7fd f933 	bl	8000bf8 <__aeabi_uldivmod>
 8003992:	3230      	adds	r2, #48	; 0x30
 8003994:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8003998:	2300      	movs	r3, #0
 800399a:	4630      	mov	r0, r6
 800399c:	4639      	mov	r1, r7
 800399e:	220a      	movs	r2, #10
 80039a0:	f7fd f92a 	bl	8000bf8 <__aeabi_uldivmod>
 80039a4:	4606      	mov	r6, r0
 80039a6:	460f      	mov	r7, r1
 80039a8:	ea56 0307 	orrs.w	r3, r6, r7
 80039ac:	d1eb      	bne.n	8003986 <_svfprintf_r+0x892>
 80039ae:	e360      	b.n	8004072 <_svfprintf_r+0xf7e>
 80039b0:	2600      	movs	r6, #0
 80039b2:	2700      	movs	r7, #0
 80039b4:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80039b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80039ba:	f006 030f 	and.w	r3, r6, #15
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	093a      	lsrs	r2, r7, #4
 80039c2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80039c6:	0933      	lsrs	r3, r6, #4
 80039c8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80039cc:	461e      	mov	r6, r3
 80039ce:	4617      	mov	r7, r2
 80039d0:	ea56 0307 	orrs.w	r3, r6, r7
 80039d4:	d1f0      	bne.n	80039b8 <_svfprintf_r+0x8c4>
 80039d6:	e34c      	b.n	8004072 <_svfprintf_r+0xf7e>
 80039d8:	b93b      	cbnz	r3, 80039ea <_svfprintf_r+0x8f6>
 80039da:	07ea      	lsls	r2, r5, #31
 80039dc:	d505      	bpl.n	80039ea <_svfprintf_r+0x8f6>
 80039de:	2330      	movs	r3, #48	; 0x30
 80039e0:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80039e4:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80039e8:	e343      	b.n	8004072 <_svfprintf_r+0xf7e>
 80039ea:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80039ee:	e340      	b.n	8004072 <_svfprintf_r+0xf7e>
 80039f0:	b10b      	cbz	r3, 80039f6 <_svfprintf_r+0x902>
 80039f2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80039f6:	9b06      	ldr	r3, [sp, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 82f7 	beq.w	8003fec <_svfprintf_r+0xef8>
 80039fe:	2600      	movs	r6, #0
 8003a00:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003a04:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8003a08:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8003a0c:	9708      	str	r7, [sp, #32]
 8003a0e:	e4e3      	b.n	80033d8 <_svfprintf_r+0x2e4>
 8003a10:	4606      	mov	r6, r0
 8003a12:	e538      	b.n	8003486 <_svfprintf_r+0x392>
 8003a14:	2310      	movs	r3, #16
 8003a16:	6063      	str	r3, [r4, #4]
 8003a18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003a1a:	3310      	adds	r3, #16
 8003a1c:	9323      	str	r3, [sp, #140]	; 0x8c
 8003a1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a20:	3301      	adds	r3, #1
 8003a22:	2b07      	cmp	r3, #7
 8003a24:	9322      	str	r3, [sp, #136]	; 0x88
 8003a26:	dc04      	bgt.n	8003a32 <_svfprintf_r+0x93e>
 8003a28:	3408      	adds	r4, #8
 8003a2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a2c:	3b10      	subs	r3, #16
 8003a2e:	9310      	str	r3, [sp, #64]	; 0x40
 8003a30:	e611      	b.n	8003656 <_svfprintf_r+0x562>
 8003a32:	aa21      	add	r2, sp, #132	; 0x84
 8003a34:	4649      	mov	r1, r9
 8003a36:	4650      	mov	r0, sl
 8003a38:	f001 feb8 	bl	80057ac <__ssprint_r>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	f040 82b6 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003a42:	ac2e      	add	r4, sp, #184	; 0xb8
 8003a44:	e7f1      	b.n	8003a2a <_svfprintf_r+0x936>
 8003a46:	aa21      	add	r2, sp, #132	; 0x84
 8003a48:	4649      	mov	r1, r9
 8003a4a:	4650      	mov	r0, sl
 8003a4c:	f001 feae 	bl	80057ac <__ssprint_r>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	f040 82ac 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003a56:	ac2e      	add	r4, sp, #184	; 0xb8
 8003a58:	e610      	b.n	800367c <_svfprintf_r+0x588>
 8003a5a:	aa21      	add	r2, sp, #132	; 0x84
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	4650      	mov	r0, sl
 8003a60:	f001 fea4 	bl	80057ac <__ssprint_r>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	f040 82a2 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003a6a:	ac2e      	add	r4, sp, #184	; 0xb8
 8003a6c:	e618      	b.n	80036a0 <_svfprintf_r+0x5ac>
 8003a6e:	aa21      	add	r2, sp, #132	; 0x84
 8003a70:	4649      	mov	r1, r9
 8003a72:	4650      	mov	r0, sl
 8003a74:	f001 fe9a 	bl	80057ac <__ssprint_r>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	f040 8298 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003a7e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003a80:	e61e      	b.n	80036c0 <_svfprintf_r+0x5cc>
 8003a82:	2310      	movs	r3, #16
 8003a84:	6063      	str	r3, [r4, #4]
 8003a86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003a88:	3310      	adds	r3, #16
 8003a8a:	9323      	str	r3, [sp, #140]	; 0x8c
 8003a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a8e:	3301      	adds	r3, #1
 8003a90:	2b07      	cmp	r3, #7
 8003a92:	9322      	str	r3, [sp, #136]	; 0x88
 8003a94:	dc04      	bgt.n	8003aa0 <_svfprintf_r+0x9ac>
 8003a96:	3408      	adds	r4, #8
 8003a98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a9a:	3b10      	subs	r3, #16
 8003a9c:	9310      	str	r3, [sp, #64]	; 0x40
 8003a9e:	e618      	b.n	80036d2 <_svfprintf_r+0x5de>
 8003aa0:	aa21      	add	r2, sp, #132	; 0x84
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	4650      	mov	r0, sl
 8003aa6:	f001 fe81 	bl	80057ac <__ssprint_r>
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	f040 827f 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003ab0:	ac2e      	add	r4, sp, #184	; 0xb8
 8003ab2:	e7f1      	b.n	8003a98 <_svfprintf_r+0x9a4>
 8003ab4:	aa21      	add	r2, sp, #132	; 0x84
 8003ab6:	4649      	mov	r1, r9
 8003ab8:	4650      	mov	r0, sl
 8003aba:	f001 fe77 	bl	80057ac <__ssprint_r>
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	f040 8275 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003ac4:	ac2e      	add	r4, sp, #184	; 0xb8
 8003ac6:	e617      	b.n	80036f8 <_svfprintf_r+0x604>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	6063      	str	r3, [r4, #4]
 8003acc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ace:	3310      	adds	r3, #16
 8003ad0:	9323      	str	r3, [sp, #140]	; 0x8c
 8003ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	2b07      	cmp	r3, #7
 8003ad8:	9322      	str	r3, [sp, #136]	; 0x88
 8003ada:	dc02      	bgt.n	8003ae2 <_svfprintf_r+0x9ee>
 8003adc:	3408      	adds	r4, #8
 8003ade:	3e10      	subs	r6, #16
 8003ae0:	e60e      	b.n	8003700 <_svfprintf_r+0x60c>
 8003ae2:	aa21      	add	r2, sp, #132	; 0x84
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	4650      	mov	r0, sl
 8003ae8:	f001 fe60 	bl	80057ac <__ssprint_r>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	f040 825e 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003af2:	ac2e      	add	r4, sp, #184	; 0xb8
 8003af4:	e7f3      	b.n	8003ade <_svfprintf_r+0x9ea>
 8003af6:	aa21      	add	r2, sp, #132	; 0x84
 8003af8:	4649      	mov	r1, r9
 8003afa:	4650      	mov	r0, sl
 8003afc:	f001 fe56 	bl	80057ac <__ssprint_r>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	f040 8254 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003b06:	ac2e      	add	r4, sp, #184	; 0xb8
 8003b08:	e60a      	b.n	8003720 <_svfprintf_r+0x62c>
 8003b0a:	9b06      	ldr	r3, [sp, #24]
 8003b0c:	2b65      	cmp	r3, #101	; 0x65
 8003b0e:	f340 81a9 	ble.w	8003e64 <_svfprintf_r+0xd70>
 8003b12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003b14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003b16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b18:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003b1a:	f7fc ffad 	bl	8000a78 <__aeabi_dcmpeq>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d062      	beq.n	8003be8 <_svfprintf_r+0xaf4>
 8003b22:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <_svfprintf_r+0xaec>)
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	2301      	movs	r3, #1
 8003b28:	6063      	str	r3, [r4, #4]
 8003b2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003b30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b32:	3301      	adds	r3, #1
 8003b34:	2b07      	cmp	r3, #7
 8003b36:	9322      	str	r3, [sp, #136]	; 0x88
 8003b38:	dc25      	bgt.n	8003b86 <_svfprintf_r+0xa92>
 8003b3a:	3408      	adds	r4, #8
 8003b3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b3e:	9a07      	ldr	r2, [sp, #28]
 8003b40:	4293      	cmp	r3, r2
 8003b42:	db02      	blt.n	8003b4a <_svfprintf_r+0xa56>
 8003b44:	07ee      	lsls	r6, r5, #31
 8003b46:	f57f ae02 	bpl.w	800374e <_svfprintf_r+0x65a>
 8003b4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b4e:	6023      	str	r3, [r4, #0]
 8003b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b52:	6063      	str	r3, [r4, #4]
 8003b54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b56:	4413      	add	r3, r2
 8003b58:	9323      	str	r3, [sp, #140]	; 0x8c
 8003b5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	2b07      	cmp	r3, #7
 8003b60:	9322      	str	r3, [sp, #136]	; 0x88
 8003b62:	dc1a      	bgt.n	8003b9a <_svfprintf_r+0xaa6>
 8003b64:	3408      	adds	r4, #8
 8003b66:	9b07      	ldr	r3, [sp, #28]
 8003b68:	1e5e      	subs	r6, r3, #1
 8003b6a:	2e00      	cmp	r6, #0
 8003b6c:	f77f adef 	ble.w	800374e <_svfprintf_r+0x65a>
 8003b70:	f04f 0810 	mov.w	r8, #16
 8003b74:	4f1b      	ldr	r7, [pc, #108]	; (8003be4 <_svfprintf_r+0xaf0>)
 8003b76:	2e10      	cmp	r6, #16
 8003b78:	6027      	str	r7, [r4, #0]
 8003b7a:	dc18      	bgt.n	8003bae <_svfprintf_r+0xaba>
 8003b7c:	6066      	str	r6, [r4, #4]
 8003b7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b80:	441e      	add	r6, r3
 8003b82:	9623      	str	r6, [sp, #140]	; 0x8c
 8003b84:	e5d4      	b.n	8003730 <_svfprintf_r+0x63c>
 8003b86:	aa21      	add	r2, sp, #132	; 0x84
 8003b88:	4649      	mov	r1, r9
 8003b8a:	4650      	mov	r0, sl
 8003b8c:	f001 fe0e 	bl	80057ac <__ssprint_r>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	f040 820c 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003b96:	ac2e      	add	r4, sp, #184	; 0xb8
 8003b98:	e7d0      	b.n	8003b3c <_svfprintf_r+0xa48>
 8003b9a:	aa21      	add	r2, sp, #132	; 0x84
 8003b9c:	4649      	mov	r1, r9
 8003b9e:	4650      	mov	r0, sl
 8003ba0:	f001 fe04 	bl	80057ac <__ssprint_r>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	f040 8202 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003baa:	ac2e      	add	r4, sp, #184	; 0xb8
 8003bac:	e7db      	b.n	8003b66 <_svfprintf_r+0xa72>
 8003bae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003bb0:	f8c4 8004 	str.w	r8, [r4, #4]
 8003bb4:	3310      	adds	r3, #16
 8003bb6:	9323      	str	r3, [sp, #140]	; 0x8c
 8003bb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bba:	3301      	adds	r3, #1
 8003bbc:	2b07      	cmp	r3, #7
 8003bbe:	9322      	str	r3, [sp, #136]	; 0x88
 8003bc0:	dc02      	bgt.n	8003bc8 <_svfprintf_r+0xad4>
 8003bc2:	3408      	adds	r4, #8
 8003bc4:	3e10      	subs	r6, #16
 8003bc6:	e7d6      	b.n	8003b76 <_svfprintf_r+0xa82>
 8003bc8:	aa21      	add	r2, sp, #132	; 0x84
 8003bca:	4649      	mov	r1, r9
 8003bcc:	4650      	mov	r0, sl
 8003bce:	f001 fded 	bl	80057ac <__ssprint_r>
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	f040 81eb 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003bd8:	ac2e      	add	r4, sp, #184	; 0xb8
 8003bda:	e7f3      	b.n	8003bc4 <_svfprintf_r+0xad0>
 8003bdc:	08005f21 	.word	0x08005f21
 8003be0:	08005f32 	.word	0x08005f32
 8003be4:	08005f44 	.word	0x08005f44
 8003be8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	dc7a      	bgt.n	8003ce4 <_svfprintf_r+0xbf0>
 8003bee:	4b9b      	ldr	r3, [pc, #620]	; (8003e5c <_svfprintf_r+0xd68>)
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	6063      	str	r3, [r4, #4]
 8003bf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	9323      	str	r3, [sp, #140]	; 0x8c
 8003bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bfe:	3301      	adds	r3, #1
 8003c00:	2b07      	cmp	r3, #7
 8003c02:	9322      	str	r3, [sp, #136]	; 0x88
 8003c04:	dc44      	bgt.n	8003c90 <_svfprintf_r+0xb9c>
 8003c06:	3408      	adds	r4, #8
 8003c08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c0a:	b923      	cbnz	r3, 8003c16 <_svfprintf_r+0xb22>
 8003c0c:	9b07      	ldr	r3, [sp, #28]
 8003c0e:	b913      	cbnz	r3, 8003c16 <_svfprintf_r+0xb22>
 8003c10:	07e8      	lsls	r0, r5, #31
 8003c12:	f57f ad9c 	bpl.w	800374e <_svfprintf_r+0x65a>
 8003c16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c1e:	6063      	str	r3, [r4, #4]
 8003c20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c22:	4413      	add	r3, r2
 8003c24:	9323      	str	r3, [sp, #140]	; 0x8c
 8003c26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c28:	3301      	adds	r3, #1
 8003c2a:	2b07      	cmp	r3, #7
 8003c2c:	9322      	str	r3, [sp, #136]	; 0x88
 8003c2e:	dc39      	bgt.n	8003ca4 <_svfprintf_r+0xbb0>
 8003c30:	f104 0308 	add.w	r3, r4, #8
 8003c34:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003c36:	2e00      	cmp	r6, #0
 8003c38:	da19      	bge.n	8003c6e <_svfprintf_r+0xb7a>
 8003c3a:	2410      	movs	r4, #16
 8003c3c:	4f88      	ldr	r7, [pc, #544]	; (8003e60 <_svfprintf_r+0xd6c>)
 8003c3e:	4276      	negs	r6, r6
 8003c40:	2e10      	cmp	r6, #16
 8003c42:	601f      	str	r7, [r3, #0]
 8003c44:	dc38      	bgt.n	8003cb8 <_svfprintf_r+0xbc4>
 8003c46:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003c48:	605e      	str	r6, [r3, #4]
 8003c4a:	4416      	add	r6, r2
 8003c4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c4e:	9623      	str	r6, [sp, #140]	; 0x8c
 8003c50:	3201      	adds	r2, #1
 8003c52:	2a07      	cmp	r2, #7
 8003c54:	f103 0308 	add.w	r3, r3, #8
 8003c58:	9222      	str	r2, [sp, #136]	; 0x88
 8003c5a:	dd08      	ble.n	8003c6e <_svfprintf_r+0xb7a>
 8003c5c:	aa21      	add	r2, sp, #132	; 0x84
 8003c5e:	4649      	mov	r1, r9
 8003c60:	4650      	mov	r0, sl
 8003c62:	f001 fda3 	bl	80057ac <__ssprint_r>
 8003c66:	2800      	cmp	r0, #0
 8003c68:	f040 81a1 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003c6c:	ab2e      	add	r3, sp, #184	; 0xb8
 8003c6e:	9a07      	ldr	r2, [sp, #28]
 8003c70:	9907      	ldr	r1, [sp, #28]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003c76:	f8c3 8000 	str.w	r8, [r3]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	9223      	str	r2, [sp, #140]	; 0x8c
 8003c7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c80:	3201      	adds	r2, #1
 8003c82:	2a07      	cmp	r2, #7
 8003c84:	9222      	str	r2, [sp, #136]	; 0x88
 8003c86:	f73f ad59 	bgt.w	800373c <_svfprintf_r+0x648>
 8003c8a:	f103 0408 	add.w	r4, r3, #8
 8003c8e:	e55e      	b.n	800374e <_svfprintf_r+0x65a>
 8003c90:	aa21      	add	r2, sp, #132	; 0x84
 8003c92:	4649      	mov	r1, r9
 8003c94:	4650      	mov	r0, sl
 8003c96:	f001 fd89 	bl	80057ac <__ssprint_r>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	f040 8187 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003ca0:	ac2e      	add	r4, sp, #184	; 0xb8
 8003ca2:	e7b1      	b.n	8003c08 <_svfprintf_r+0xb14>
 8003ca4:	aa21      	add	r2, sp, #132	; 0x84
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	4650      	mov	r0, sl
 8003caa:	f001 fd7f 	bl	80057ac <__ssprint_r>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	f040 817d 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003cb4:	ab2e      	add	r3, sp, #184	; 0xb8
 8003cb6:	e7bd      	b.n	8003c34 <_svfprintf_r+0xb40>
 8003cb8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003cba:	605c      	str	r4, [r3, #4]
 8003cbc:	3210      	adds	r2, #16
 8003cbe:	9223      	str	r2, [sp, #140]	; 0x8c
 8003cc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003cc2:	3201      	adds	r2, #1
 8003cc4:	2a07      	cmp	r2, #7
 8003cc6:	9222      	str	r2, [sp, #136]	; 0x88
 8003cc8:	dc02      	bgt.n	8003cd0 <_svfprintf_r+0xbdc>
 8003cca:	3308      	adds	r3, #8
 8003ccc:	3e10      	subs	r6, #16
 8003cce:	e7b7      	b.n	8003c40 <_svfprintf_r+0xb4c>
 8003cd0:	aa21      	add	r2, sp, #132	; 0x84
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	4650      	mov	r0, sl
 8003cd6:	f001 fd69 	bl	80057ac <__ssprint_r>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	f040 8167 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003ce0:	ab2e      	add	r3, sp, #184	; 0xb8
 8003ce2:	e7f3      	b.n	8003ccc <_svfprintf_r+0xbd8>
 8003ce4:	9b07      	ldr	r3, [sp, #28]
 8003ce6:	42bb      	cmp	r3, r7
 8003ce8:	bfa8      	it	ge
 8003cea:	463b      	movge	r3, r7
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	461e      	mov	r6, r3
 8003cf0:	dd0b      	ble.n	8003d0a <_svfprintf_r+0xc16>
 8003cf2:	6063      	str	r3, [r4, #4]
 8003cf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003cf6:	f8c4 8000 	str.w	r8, [r4]
 8003cfa:	4433      	add	r3, r6
 8003cfc:	9323      	str	r3, [sp, #140]	; 0x8c
 8003cfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d00:	3301      	adds	r3, #1
 8003d02:	2b07      	cmp	r3, #7
 8003d04:	9322      	str	r3, [sp, #136]	; 0x88
 8003d06:	dc5f      	bgt.n	8003dc8 <_svfprintf_r+0xcd4>
 8003d08:	3408      	adds	r4, #8
 8003d0a:	2e00      	cmp	r6, #0
 8003d0c:	bfb4      	ite	lt
 8003d0e:	463e      	movlt	r6, r7
 8003d10:	1bbe      	subge	r6, r7, r6
 8003d12:	2e00      	cmp	r6, #0
 8003d14:	dd0f      	ble.n	8003d36 <_svfprintf_r+0xc42>
 8003d16:	f8df b148 	ldr.w	fp, [pc, #328]	; 8003e60 <_svfprintf_r+0xd6c>
 8003d1a:	2e10      	cmp	r6, #16
 8003d1c:	f8c4 b000 	str.w	fp, [r4]
 8003d20:	dc5c      	bgt.n	8003ddc <_svfprintf_r+0xce8>
 8003d22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d24:	6066      	str	r6, [r4, #4]
 8003d26:	441e      	add	r6, r3
 8003d28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d2a:	9623      	str	r6, [sp, #140]	; 0x8c
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	2b07      	cmp	r3, #7
 8003d30:	9322      	str	r3, [sp, #136]	; 0x88
 8003d32:	dc6a      	bgt.n	8003e0a <_svfprintf_r+0xd16>
 8003d34:	3408      	adds	r4, #8
 8003d36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d38:	9a07      	ldr	r2, [sp, #28]
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	db01      	blt.n	8003d42 <_svfprintf_r+0xc4e>
 8003d3e:	07e9      	lsls	r1, r5, #31
 8003d40:	d50d      	bpl.n	8003d5e <_svfprintf_r+0xc6a>
 8003d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d46:	6023      	str	r3, [r4, #0]
 8003d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d4a:	6063      	str	r3, [r4, #4]
 8003d4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d4e:	4413      	add	r3, r2
 8003d50:	9323      	str	r3, [sp, #140]	; 0x8c
 8003d52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d54:	3301      	adds	r3, #1
 8003d56:	2b07      	cmp	r3, #7
 8003d58:	9322      	str	r3, [sp, #136]	; 0x88
 8003d5a:	dc60      	bgt.n	8003e1e <_svfprintf_r+0xd2a>
 8003d5c:	3408      	adds	r4, #8
 8003d5e:	9b07      	ldr	r3, [sp, #28]
 8003d60:	9a07      	ldr	r2, [sp, #28]
 8003d62:	1bde      	subs	r6, r3, r7
 8003d64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	429e      	cmp	r6, r3
 8003d6a:	bfa8      	it	ge
 8003d6c:	461e      	movge	r6, r3
 8003d6e:	2e00      	cmp	r6, #0
 8003d70:	dd0b      	ble.n	8003d8a <_svfprintf_r+0xc96>
 8003d72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d74:	4447      	add	r7, r8
 8003d76:	4433      	add	r3, r6
 8003d78:	9323      	str	r3, [sp, #140]	; 0x8c
 8003d7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d7c:	6027      	str	r7, [r4, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	2b07      	cmp	r3, #7
 8003d82:	6066      	str	r6, [r4, #4]
 8003d84:	9322      	str	r3, [sp, #136]	; 0x88
 8003d86:	dc54      	bgt.n	8003e32 <_svfprintf_r+0xd3e>
 8003d88:	3408      	adds	r4, #8
 8003d8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d8c:	9a07      	ldr	r2, [sp, #28]
 8003d8e:	2e00      	cmp	r6, #0
 8003d90:	eba2 0303 	sub.w	r3, r2, r3
 8003d94:	bfb4      	ite	lt
 8003d96:	461e      	movlt	r6, r3
 8003d98:	1b9e      	subge	r6, r3, r6
 8003d9a:	2e00      	cmp	r6, #0
 8003d9c:	f77f acd7 	ble.w	800374e <_svfprintf_r+0x65a>
 8003da0:	f04f 0810 	mov.w	r8, #16
 8003da4:	4f2e      	ldr	r7, [pc, #184]	; (8003e60 <_svfprintf_r+0xd6c>)
 8003da6:	2e10      	cmp	r6, #16
 8003da8:	6027      	str	r7, [r4, #0]
 8003daa:	f77f aee7 	ble.w	8003b7c <_svfprintf_r+0xa88>
 8003dae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003db0:	f8c4 8004 	str.w	r8, [r4, #4]
 8003db4:	3310      	adds	r3, #16
 8003db6:	9323      	str	r3, [sp, #140]	; 0x8c
 8003db8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dba:	3301      	adds	r3, #1
 8003dbc:	2b07      	cmp	r3, #7
 8003dbe:	9322      	str	r3, [sp, #136]	; 0x88
 8003dc0:	dc41      	bgt.n	8003e46 <_svfprintf_r+0xd52>
 8003dc2:	3408      	adds	r4, #8
 8003dc4:	3e10      	subs	r6, #16
 8003dc6:	e7ee      	b.n	8003da6 <_svfprintf_r+0xcb2>
 8003dc8:	aa21      	add	r2, sp, #132	; 0x84
 8003dca:	4649      	mov	r1, r9
 8003dcc:	4650      	mov	r0, sl
 8003dce:	f001 fced 	bl	80057ac <__ssprint_r>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	f040 80eb 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003dd8:	ac2e      	add	r4, sp, #184	; 0xb8
 8003dda:	e796      	b.n	8003d0a <_svfprintf_r+0xc16>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	6063      	str	r3, [r4, #4]
 8003de0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003de2:	3310      	adds	r3, #16
 8003de4:	9323      	str	r3, [sp, #140]	; 0x8c
 8003de6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003de8:	3301      	adds	r3, #1
 8003dea:	2b07      	cmp	r3, #7
 8003dec:	9322      	str	r3, [sp, #136]	; 0x88
 8003dee:	dc02      	bgt.n	8003df6 <_svfprintf_r+0xd02>
 8003df0:	3408      	adds	r4, #8
 8003df2:	3e10      	subs	r6, #16
 8003df4:	e791      	b.n	8003d1a <_svfprintf_r+0xc26>
 8003df6:	aa21      	add	r2, sp, #132	; 0x84
 8003df8:	4649      	mov	r1, r9
 8003dfa:	4650      	mov	r0, sl
 8003dfc:	f001 fcd6 	bl	80057ac <__ssprint_r>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	f040 80d4 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003e06:	ac2e      	add	r4, sp, #184	; 0xb8
 8003e08:	e7f3      	b.n	8003df2 <_svfprintf_r+0xcfe>
 8003e0a:	aa21      	add	r2, sp, #132	; 0x84
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	4650      	mov	r0, sl
 8003e10:	f001 fccc 	bl	80057ac <__ssprint_r>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	f040 80ca 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003e1a:	ac2e      	add	r4, sp, #184	; 0xb8
 8003e1c:	e78b      	b.n	8003d36 <_svfprintf_r+0xc42>
 8003e1e:	aa21      	add	r2, sp, #132	; 0x84
 8003e20:	4649      	mov	r1, r9
 8003e22:	4650      	mov	r0, sl
 8003e24:	f001 fcc2 	bl	80057ac <__ssprint_r>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f040 80c0 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003e2e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003e30:	e795      	b.n	8003d5e <_svfprintf_r+0xc6a>
 8003e32:	aa21      	add	r2, sp, #132	; 0x84
 8003e34:	4649      	mov	r1, r9
 8003e36:	4650      	mov	r0, sl
 8003e38:	f001 fcb8 	bl	80057ac <__ssprint_r>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	f040 80b6 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003e42:	ac2e      	add	r4, sp, #184	; 0xb8
 8003e44:	e7a1      	b.n	8003d8a <_svfprintf_r+0xc96>
 8003e46:	aa21      	add	r2, sp, #132	; 0x84
 8003e48:	4649      	mov	r1, r9
 8003e4a:	4650      	mov	r0, sl
 8003e4c:	f001 fcae 	bl	80057ac <__ssprint_r>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	f040 80ac 	bne.w	8003fae <_svfprintf_r+0xeba>
 8003e56:	ac2e      	add	r4, sp, #184	; 0xb8
 8003e58:	e7b4      	b.n	8003dc4 <_svfprintf_r+0xcd0>
 8003e5a:	bf00      	nop
 8003e5c:	08005f32 	.word	0x08005f32
 8003e60:	08005f44 	.word	0x08005f44
 8003e64:	9b07      	ldr	r3, [sp, #28]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	dc01      	bgt.n	8003e6e <_svfprintf_r+0xd7a>
 8003e6a:	07ea      	lsls	r2, r5, #31
 8003e6c:	d576      	bpl.n	8003f5c <_svfprintf_r+0xe68>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	6063      	str	r3, [r4, #4]
 8003e72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e74:	f8c4 8000 	str.w	r8, [r4]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	9323      	str	r3, [sp, #140]	; 0x8c
 8003e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e7e:	3301      	adds	r3, #1
 8003e80:	2b07      	cmp	r3, #7
 8003e82:	9322      	str	r3, [sp, #136]	; 0x88
 8003e84:	dc36      	bgt.n	8003ef4 <_svfprintf_r+0xe00>
 8003e86:	3408      	adds	r4, #8
 8003e88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e90:	6063      	str	r3, [r4, #4]
 8003e92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e94:	4413      	add	r3, r2
 8003e96:	9323      	str	r3, [sp, #140]	; 0x8c
 8003e98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	2b07      	cmp	r3, #7
 8003e9e:	9322      	str	r3, [sp, #136]	; 0x88
 8003ea0:	dc31      	bgt.n	8003f06 <_svfprintf_r+0xe12>
 8003ea2:	3408      	adds	r4, #8
 8003ea4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003ea6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ea8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003eaa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003eac:	f7fc fde4 	bl	8000a78 <__aeabi_dcmpeq>
 8003eb0:	9b07      	ldr	r3, [sp, #28]
 8003eb2:	1e5e      	subs	r6, r3, #1
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d12f      	bne.n	8003f18 <_svfprintf_r+0xe24>
 8003eb8:	f108 0301 	add.w	r3, r8, #1
 8003ebc:	e884 0048 	stmia.w	r4, {r3, r6}
 8003ec0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ec2:	9a07      	ldr	r2, [sp, #28]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	9323      	str	r3, [sp, #140]	; 0x8c
 8003eca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ecc:	3301      	adds	r3, #1
 8003ece:	2b07      	cmp	r3, #7
 8003ed0:	9322      	str	r3, [sp, #136]	; 0x88
 8003ed2:	dd4a      	ble.n	8003f6a <_svfprintf_r+0xe76>
 8003ed4:	aa21      	add	r2, sp, #132	; 0x84
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	4650      	mov	r0, sl
 8003eda:	f001 fc67 	bl	80057ac <__ssprint_r>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d165      	bne.n	8003fae <_svfprintf_r+0xeba>
 8003ee2:	ac2e      	add	r4, sp, #184	; 0xb8
 8003ee4:	ab1d      	add	r3, sp, #116	; 0x74
 8003ee6:	6023      	str	r3, [r4, #0]
 8003ee8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003eea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003eec:	6063      	str	r3, [r4, #4]
 8003eee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ef0:	4413      	add	r3, r2
 8003ef2:	e41c      	b.n	800372e <_svfprintf_r+0x63a>
 8003ef4:	aa21      	add	r2, sp, #132	; 0x84
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	4650      	mov	r0, sl
 8003efa:	f001 fc57 	bl	80057ac <__ssprint_r>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d155      	bne.n	8003fae <_svfprintf_r+0xeba>
 8003f02:	ac2e      	add	r4, sp, #184	; 0xb8
 8003f04:	e7c0      	b.n	8003e88 <_svfprintf_r+0xd94>
 8003f06:	aa21      	add	r2, sp, #132	; 0x84
 8003f08:	4649      	mov	r1, r9
 8003f0a:	4650      	mov	r0, sl
 8003f0c:	f001 fc4e 	bl	80057ac <__ssprint_r>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	d14c      	bne.n	8003fae <_svfprintf_r+0xeba>
 8003f14:	ac2e      	add	r4, sp, #184	; 0xb8
 8003f16:	e7c5      	b.n	8003ea4 <_svfprintf_r+0xdb0>
 8003f18:	2e00      	cmp	r6, #0
 8003f1a:	dde3      	ble.n	8003ee4 <_svfprintf_r+0xdf0>
 8003f1c:	f04f 0810 	mov.w	r8, #16
 8003f20:	4f58      	ldr	r7, [pc, #352]	; (8004084 <_svfprintf_r+0xf90>)
 8003f22:	2e10      	cmp	r6, #16
 8003f24:	6027      	str	r7, [r4, #0]
 8003f26:	dc04      	bgt.n	8003f32 <_svfprintf_r+0xe3e>
 8003f28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f2a:	6066      	str	r6, [r4, #4]
 8003f2c:	441e      	add	r6, r3
 8003f2e:	9623      	str	r6, [sp, #140]	; 0x8c
 8003f30:	e7cb      	b.n	8003eca <_svfprintf_r+0xdd6>
 8003f32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f34:	f8c4 8004 	str.w	r8, [r4, #4]
 8003f38:	3310      	adds	r3, #16
 8003f3a:	9323      	str	r3, [sp, #140]	; 0x8c
 8003f3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f3e:	3301      	adds	r3, #1
 8003f40:	2b07      	cmp	r3, #7
 8003f42:	9322      	str	r3, [sp, #136]	; 0x88
 8003f44:	dc02      	bgt.n	8003f4c <_svfprintf_r+0xe58>
 8003f46:	3408      	adds	r4, #8
 8003f48:	3e10      	subs	r6, #16
 8003f4a:	e7ea      	b.n	8003f22 <_svfprintf_r+0xe2e>
 8003f4c:	aa21      	add	r2, sp, #132	; 0x84
 8003f4e:	4649      	mov	r1, r9
 8003f50:	4650      	mov	r0, sl
 8003f52:	f001 fc2b 	bl	80057ac <__ssprint_r>
 8003f56:	bb50      	cbnz	r0, 8003fae <_svfprintf_r+0xeba>
 8003f58:	ac2e      	add	r4, sp, #184	; 0xb8
 8003f5a:	e7f5      	b.n	8003f48 <_svfprintf_r+0xe54>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	6063      	str	r3, [r4, #4]
 8003f60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f62:	f8c4 8000 	str.w	r8, [r4]
 8003f66:	3301      	adds	r3, #1
 8003f68:	e7ae      	b.n	8003ec8 <_svfprintf_r+0xdd4>
 8003f6a:	3408      	adds	r4, #8
 8003f6c:	e7ba      	b.n	8003ee4 <_svfprintf_r+0xdf0>
 8003f6e:	3408      	adds	r4, #8
 8003f70:	f7ff bbed 	b.w	800374e <_svfprintf_r+0x65a>
 8003f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003f78:	1a9d      	subs	r5, r3, r2
 8003f7a:	2d00      	cmp	r5, #0
 8003f7c:	f77f abea 	ble.w	8003754 <_svfprintf_r+0x660>
 8003f80:	2610      	movs	r6, #16
 8003f82:	4b41      	ldr	r3, [pc, #260]	; (8004088 <_svfprintf_r+0xf94>)
 8003f84:	2d10      	cmp	r5, #16
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	dc1b      	bgt.n	8003fc2 <_svfprintf_r+0xece>
 8003f8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f8c:	6065      	str	r5, [r4, #4]
 8003f8e:	441d      	add	r5, r3
 8003f90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f92:	9523      	str	r5, [sp, #140]	; 0x8c
 8003f94:	3301      	adds	r3, #1
 8003f96:	2b07      	cmp	r3, #7
 8003f98:	9322      	str	r3, [sp, #136]	; 0x88
 8003f9a:	f77f abdb 	ble.w	8003754 <_svfprintf_r+0x660>
 8003f9e:	aa21      	add	r2, sp, #132	; 0x84
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4650      	mov	r0, sl
 8003fa4:	f001 fc02 	bl	80057ac <__ssprint_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	f43f abd3 	beq.w	8003754 <_svfprintf_r+0x660>
 8003fae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003fb2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fb8:	bf18      	it	ne
 8003fba:	f04f 33ff 	movne.w	r3, #4294967295
 8003fbe:	f7ff b8bd 	b.w	800313c <_svfprintf_r+0x48>
 8003fc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fc4:	6066      	str	r6, [r4, #4]
 8003fc6:	3310      	adds	r3, #16
 8003fc8:	9323      	str	r3, [sp, #140]	; 0x8c
 8003fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fcc:	3301      	adds	r3, #1
 8003fce:	2b07      	cmp	r3, #7
 8003fd0:	9322      	str	r3, [sp, #136]	; 0x88
 8003fd2:	dc02      	bgt.n	8003fda <_svfprintf_r+0xee6>
 8003fd4:	3408      	adds	r4, #8
 8003fd6:	3d10      	subs	r5, #16
 8003fd8:	e7d3      	b.n	8003f82 <_svfprintf_r+0xe8e>
 8003fda:	aa21      	add	r2, sp, #132	; 0x84
 8003fdc:	4649      	mov	r1, r9
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f001 fbe4 	bl	80057ac <__ssprint_r>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d1e2      	bne.n	8003fae <_svfprintf_r+0xeba>
 8003fe8:	ac2e      	add	r4, sp, #184	; 0xb8
 8003fea:	e7f4      	b.n	8003fd6 <_svfprintf_r+0xee2>
 8003fec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0dd      	beq.n	8003fae <_svfprintf_r+0xeba>
 8003ff2:	aa21      	add	r2, sp, #132	; 0x84
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	4650      	mov	r0, sl
 8003ff8:	f001 fbd8 	bl	80057ac <__ssprint_r>
 8003ffc:	e7d7      	b.n	8003fae <_svfprintf_r+0xeba>
 8003ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004002:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004004:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004006:	f7fc fd69 	bl	8000adc <__aeabi_dcmpun>
 800400a:	2800      	cmp	r0, #0
 800400c:	f43f aa3d 	beq.w	800348a <_svfprintf_r+0x396>
 8004010:	4b1e      	ldr	r3, [pc, #120]	; (800408c <_svfprintf_r+0xf98>)
 8004012:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <_svfprintf_r+0xf9c>)
 8004014:	f7ff ba2d 	b.w	8003472 <_svfprintf_r+0x37e>
 8004018:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800401a:	eba3 0308 	sub.w	r3, r3, r8
 800401e:	9307      	str	r3, [sp, #28]
 8004020:	f7ff baaf 	b.w	8003582 <_svfprintf_r+0x48e>
 8004024:	ea56 0207 	orrs.w	r2, r6, r7
 8004028:	950f      	str	r5, [sp, #60]	; 0x3c
 800402a:	f43f ac2b 	beq.w	8003884 <_svfprintf_r+0x790>
 800402e:	2b01      	cmp	r3, #1
 8004030:	f43f ac9d 	beq.w	800396e <_svfprintf_r+0x87a>
 8004034:	2b02      	cmp	r3, #2
 8004036:	f43f acbd 	beq.w	80039b4 <_svfprintf_r+0x8c0>
 800403a:	ab2e      	add	r3, sp, #184	; 0xb8
 800403c:	08f1      	lsrs	r1, r6, #3
 800403e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8004042:	08f8      	lsrs	r0, r7, #3
 8004044:	f006 0207 	and.w	r2, r6, #7
 8004048:	4607      	mov	r7, r0
 800404a:	460e      	mov	r6, r1
 800404c:	3230      	adds	r2, #48	; 0x30
 800404e:	ea56 0107 	orrs.w	r1, r6, r7
 8004052:	f103 38ff 	add.w	r8, r3, #4294967295
 8004056:	f803 2c01 	strb.w	r2, [r3, #-1]
 800405a:	f47f ac86 	bne.w	800396a <_svfprintf_r+0x876>
 800405e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004060:	07c9      	lsls	r1, r1, #31
 8004062:	d506      	bpl.n	8004072 <_svfprintf_r+0xf7e>
 8004064:	2a30      	cmp	r2, #48	; 0x30
 8004066:	d004      	beq.n	8004072 <_svfprintf_r+0xf7e>
 8004068:	2230      	movs	r2, #48	; 0x30
 800406a:	f808 2c01 	strb.w	r2, [r8, #-1]
 800406e:	f1a3 0802 	sub.w	r8, r3, #2
 8004072:	ab2e      	add	r3, sp, #184	; 0xb8
 8004074:	465e      	mov	r6, fp
 8004076:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004078:	eba3 0b08 	sub.w	fp, r3, r8
 800407c:	2700      	movs	r7, #0
 800407e:	f7ff bace 	b.w	800361e <_svfprintf_r+0x52a>
 8004082:	bf00      	nop
 8004084:	08005f44 	.word	0x08005f44
 8004088:	08005f34 	.word	0x08005f34
 800408c:	08005f08 	.word	0x08005f08
 8004090:	08005f0c 	.word	0x08005f0c

08004094 <quorem>:
 8004094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004098:	6903      	ldr	r3, [r0, #16]
 800409a:	690c      	ldr	r4, [r1, #16]
 800409c:	4680      	mov	r8, r0
 800409e:	429c      	cmp	r4, r3
 80040a0:	f300 8082 	bgt.w	80041a8 <quorem+0x114>
 80040a4:	3c01      	subs	r4, #1
 80040a6:	f101 0714 	add.w	r7, r1, #20
 80040aa:	f100 0614 	add.w	r6, r0, #20
 80040ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80040b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80040b6:	3501      	adds	r5, #1
 80040b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80040bc:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80040c0:	eb06 030e 	add.w	r3, r6, lr
 80040c4:	eb07 090e 	add.w	r9, r7, lr
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	b38d      	cbz	r5, 8004130 <quorem+0x9c>
 80040cc:	f04f 0a00 	mov.w	sl, #0
 80040d0:	4638      	mov	r0, r7
 80040d2:	46b4      	mov	ip, r6
 80040d4:	46d3      	mov	fp, sl
 80040d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80040da:	b293      	uxth	r3, r2
 80040dc:	fb05 a303 	mla	r3, r5, r3, sl
 80040e0:	0c12      	lsrs	r2, r2, #16
 80040e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80040e6:	fb05 a202 	mla	r2, r5, r2, sl
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	ebab 0303 	sub.w	r3, fp, r3
 80040f0:	f8bc b000 	ldrh.w	fp, [ip]
 80040f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80040f8:	445b      	add	r3, fp
 80040fa:	fa1f fb82 	uxth.w	fp, r2
 80040fe:	f8dc 2000 	ldr.w	r2, [ip]
 8004102:	4581      	cmp	r9, r0
 8004104:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800410c:	b29b      	uxth	r3, r3
 800410e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004112:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004116:	f84c 3b04 	str.w	r3, [ip], #4
 800411a:	d2dc      	bcs.n	80040d6 <quorem+0x42>
 800411c:	f856 300e 	ldr.w	r3, [r6, lr]
 8004120:	b933      	cbnz	r3, 8004130 <quorem+0x9c>
 8004122:	9b01      	ldr	r3, [sp, #4]
 8004124:	3b04      	subs	r3, #4
 8004126:	429e      	cmp	r6, r3
 8004128:	461a      	mov	r2, r3
 800412a:	d331      	bcc.n	8004190 <quorem+0xfc>
 800412c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004130:	4640      	mov	r0, r8
 8004132:	f001 fa62 	bl	80055fa <__mcmp>
 8004136:	2800      	cmp	r0, #0
 8004138:	db26      	blt.n	8004188 <quorem+0xf4>
 800413a:	4630      	mov	r0, r6
 800413c:	f04f 0e00 	mov.w	lr, #0
 8004140:	3501      	adds	r5, #1
 8004142:	f857 1b04 	ldr.w	r1, [r7], #4
 8004146:	f8d0 c000 	ldr.w	ip, [r0]
 800414a:	b28b      	uxth	r3, r1
 800414c:	ebae 0303 	sub.w	r3, lr, r3
 8004150:	fa1f f28c 	uxth.w	r2, ip
 8004154:	4413      	add	r3, r2
 8004156:	0c0a      	lsrs	r2, r1, #16
 8004158:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800415c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004160:	b29b      	uxth	r3, r3
 8004162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004166:	45b9      	cmp	r9, r7
 8004168:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800416c:	f840 3b04 	str.w	r3, [r0], #4
 8004170:	d2e7      	bcs.n	8004142 <quorem+0xae>
 8004172:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004176:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800417a:	b92a      	cbnz	r2, 8004188 <quorem+0xf4>
 800417c:	3b04      	subs	r3, #4
 800417e:	429e      	cmp	r6, r3
 8004180:	461a      	mov	r2, r3
 8004182:	d30b      	bcc.n	800419c <quorem+0x108>
 8004184:	f8c8 4010 	str.w	r4, [r8, #16]
 8004188:	4628      	mov	r0, r5
 800418a:	b003      	add	sp, #12
 800418c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	3b04      	subs	r3, #4
 8004194:	2a00      	cmp	r2, #0
 8004196:	d1c9      	bne.n	800412c <quorem+0x98>
 8004198:	3c01      	subs	r4, #1
 800419a:	e7c4      	b.n	8004126 <quorem+0x92>
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	3b04      	subs	r3, #4
 80041a0:	2a00      	cmp	r2, #0
 80041a2:	d1ef      	bne.n	8004184 <quorem+0xf0>
 80041a4:	3c01      	subs	r4, #1
 80041a6:	e7ea      	b.n	800417e <quorem+0xea>
 80041a8:	2000      	movs	r0, #0
 80041aa:	e7ee      	b.n	800418a <quorem+0xf6>
 80041ac:	0000      	movs	r0, r0
	...

080041b0 <_dtoa_r>:
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80041b6:	b095      	sub	sp, #84	; 0x54
 80041b8:	4604      	mov	r4, r0
 80041ba:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80041bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041c0:	b93e      	cbnz	r6, 80041d2 <_dtoa_r+0x22>
 80041c2:	2010      	movs	r0, #16
 80041c4:	f000 fdd6 	bl	8004d74 <malloc>
 80041c8:	6260      	str	r0, [r4, #36]	; 0x24
 80041ca:	6046      	str	r6, [r0, #4]
 80041cc:	6086      	str	r6, [r0, #8]
 80041ce:	6006      	str	r6, [r0, #0]
 80041d0:	60c6      	str	r6, [r0, #12]
 80041d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041d4:	6819      	ldr	r1, [r3, #0]
 80041d6:	b151      	cbz	r1, 80041ee <_dtoa_r+0x3e>
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	2301      	movs	r3, #1
 80041dc:	4093      	lsls	r3, r2
 80041de:	604a      	str	r2, [r1, #4]
 80041e0:	608b      	str	r3, [r1, #8]
 80041e2:	4620      	mov	r0, r4
 80041e4:	f001 f834 	bl	8005250 <_Bfree>
 80041e8:	2200      	movs	r2, #0
 80041ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	9b03      	ldr	r3, [sp, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bfb7      	itett	lt
 80041f4:	2301      	movlt	r3, #1
 80041f6:	2300      	movge	r3, #0
 80041f8:	602b      	strlt	r3, [r5, #0]
 80041fa:	9b03      	ldrlt	r3, [sp, #12]
 80041fc:	bfae      	itee	ge
 80041fe:	602b      	strge	r3, [r5, #0]
 8004200:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004204:	9303      	strlt	r3, [sp, #12]
 8004206:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800420a:	4bab      	ldr	r3, [pc, #684]	; (80044b8 <_dtoa_r+0x308>)
 800420c:	ea33 0309 	bics.w	r3, r3, r9
 8004210:	d11b      	bne.n	800424a <_dtoa_r+0x9a>
 8004212:	f242 730f 	movw	r3, #9999	; 0x270f
 8004216:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	9b02      	ldr	r3, [sp, #8]
 800421c:	b923      	cbnz	r3, 8004228 <_dtoa_r+0x78>
 800421e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8004222:	2800      	cmp	r0, #0
 8004224:	f000 8583 	beq.w	8004d2e <_dtoa_r+0xb7e>
 8004228:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800422a:	b953      	cbnz	r3, 8004242 <_dtoa_r+0x92>
 800422c:	4ba3      	ldr	r3, [pc, #652]	; (80044bc <_dtoa_r+0x30c>)
 800422e:	e021      	b.n	8004274 <_dtoa_r+0xc4>
 8004230:	4ba3      	ldr	r3, [pc, #652]	; (80044c0 <_dtoa_r+0x310>)
 8004232:	9306      	str	r3, [sp, #24]
 8004234:	3308      	adds	r3, #8
 8004236:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	9806      	ldr	r0, [sp, #24]
 800423c:	b015      	add	sp, #84	; 0x54
 800423e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004242:	4b9e      	ldr	r3, [pc, #632]	; (80044bc <_dtoa_r+0x30c>)
 8004244:	9306      	str	r3, [sp, #24]
 8004246:	3303      	adds	r3, #3
 8004248:	e7f5      	b.n	8004236 <_dtoa_r+0x86>
 800424a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800424e:	2200      	movs	r2, #0
 8004250:	2300      	movs	r3, #0
 8004252:	4630      	mov	r0, r6
 8004254:	4639      	mov	r1, r7
 8004256:	f7fc fc0f 	bl	8000a78 <__aeabi_dcmpeq>
 800425a:	4680      	mov	r8, r0
 800425c:	b160      	cbz	r0, 8004278 <_dtoa_r+0xc8>
 800425e:	2301      	movs	r3, #1
 8004260:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 855e 	beq.w	8004d28 <_dtoa_r+0xb78>
 800426c:	4b95      	ldr	r3, [pc, #596]	; (80044c4 <_dtoa_r+0x314>)
 800426e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	3b01      	subs	r3, #1
 8004274:	9306      	str	r3, [sp, #24]
 8004276:	e7e0      	b.n	800423a <_dtoa_r+0x8a>
 8004278:	ab12      	add	r3, sp, #72	; 0x48
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	ab13      	add	r3, sp, #76	; 0x4c
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	4632      	mov	r2, r6
 8004282:	463b      	mov	r3, r7
 8004284:	4620      	mov	r0, r4
 8004286:	f001 fa31 	bl	80056ec <__d2b>
 800428a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800428e:	4682      	mov	sl, r0
 8004290:	2d00      	cmp	r5, #0
 8004292:	d07d      	beq.n	8004390 <_dtoa_r+0x1e0>
 8004294:	4630      	mov	r0, r6
 8004296:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800429a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800429e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80042a2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80042a6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80042aa:	2200      	movs	r2, #0
 80042ac:	4b86      	ldr	r3, [pc, #536]	; (80044c8 <_dtoa_r+0x318>)
 80042ae:	f7fb ffc7 	bl	8000240 <__aeabi_dsub>
 80042b2:	a37b      	add	r3, pc, #492	; (adr r3, 80044a0 <_dtoa_r+0x2f0>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fc f976 	bl	80005a8 <__aeabi_dmul>
 80042bc:	a37a      	add	r3, pc, #488	; (adr r3, 80044a8 <_dtoa_r+0x2f8>)
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f7fb ffbf 	bl	8000244 <__adddf3>
 80042c6:	4606      	mov	r6, r0
 80042c8:	4628      	mov	r0, r5
 80042ca:	460f      	mov	r7, r1
 80042cc:	f7fc f906 	bl	80004dc <__aeabi_i2d>
 80042d0:	a377      	add	r3, pc, #476	; (adr r3, 80044b0 <_dtoa_r+0x300>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fc f967 	bl	80005a8 <__aeabi_dmul>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4630      	mov	r0, r6
 80042e0:	4639      	mov	r1, r7
 80042e2:	f7fb ffaf 	bl	8000244 <__adddf3>
 80042e6:	4606      	mov	r6, r0
 80042e8:	460f      	mov	r7, r1
 80042ea:	f7fc fc0d 	bl	8000b08 <__aeabi_d2iz>
 80042ee:	2200      	movs	r2, #0
 80042f0:	4683      	mov	fp, r0
 80042f2:	2300      	movs	r3, #0
 80042f4:	4630      	mov	r0, r6
 80042f6:	4639      	mov	r1, r7
 80042f8:	f7fc fbc8 	bl	8000a8c <__aeabi_dcmplt>
 80042fc:	b158      	cbz	r0, 8004316 <_dtoa_r+0x166>
 80042fe:	4658      	mov	r0, fp
 8004300:	f7fc f8ec 	bl	80004dc <__aeabi_i2d>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4630      	mov	r0, r6
 800430a:	4639      	mov	r1, r7
 800430c:	f7fc fbb4 	bl	8000a78 <__aeabi_dcmpeq>
 8004310:	b908      	cbnz	r0, 8004316 <_dtoa_r+0x166>
 8004312:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004316:	f1bb 0f16 	cmp.w	fp, #22
 800431a:	d858      	bhi.n	80043ce <_dtoa_r+0x21e>
 800431c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004320:	496a      	ldr	r1, [pc, #424]	; (80044cc <_dtoa_r+0x31c>)
 8004322:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800432a:	f7fc fbcd 	bl	8000ac8 <__aeabi_dcmpgt>
 800432e:	2800      	cmp	r0, #0
 8004330:	d04f      	beq.n	80043d2 <_dtoa_r+0x222>
 8004332:	2300      	movs	r3, #0
 8004334:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004338:	930d      	str	r3, [sp, #52]	; 0x34
 800433a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800433c:	1b5d      	subs	r5, r3, r5
 800433e:	1e6b      	subs	r3, r5, #1
 8004340:	9307      	str	r3, [sp, #28]
 8004342:	bf43      	ittte	mi
 8004344:	2300      	movmi	r3, #0
 8004346:	f1c5 0801 	rsbmi	r8, r5, #1
 800434a:	9307      	strmi	r3, [sp, #28]
 800434c:	f04f 0800 	movpl.w	r8, #0
 8004350:	f1bb 0f00 	cmp.w	fp, #0
 8004354:	db3f      	blt.n	80043d6 <_dtoa_r+0x226>
 8004356:	9b07      	ldr	r3, [sp, #28]
 8004358:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800435c:	445b      	add	r3, fp
 800435e:	9307      	str	r3, [sp, #28]
 8004360:	2300      	movs	r3, #0
 8004362:	9308      	str	r3, [sp, #32]
 8004364:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004366:	2b09      	cmp	r3, #9
 8004368:	f200 80b4 	bhi.w	80044d4 <_dtoa_r+0x324>
 800436c:	2b05      	cmp	r3, #5
 800436e:	bfc4      	itt	gt
 8004370:	3b04      	subgt	r3, #4
 8004372:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004374:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004376:	bfc8      	it	gt
 8004378:	2600      	movgt	r6, #0
 800437a:	f1a3 0302 	sub.w	r3, r3, #2
 800437e:	bfd8      	it	le
 8004380:	2601      	movle	r6, #1
 8004382:	2b03      	cmp	r3, #3
 8004384:	f200 80b2 	bhi.w	80044ec <_dtoa_r+0x33c>
 8004388:	e8df f003 	tbb	[pc, r3]
 800438c:	782d8684 	.word	0x782d8684
 8004390:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004392:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004394:	441d      	add	r5, r3
 8004396:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800439a:	2b20      	cmp	r3, #32
 800439c:	dd11      	ble.n	80043c2 <_dtoa_r+0x212>
 800439e:	9a02      	ldr	r2, [sp, #8]
 80043a0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80043a4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80043a8:	fa22 f000 	lsr.w	r0, r2, r0
 80043ac:	fa09 f303 	lsl.w	r3, r9, r3
 80043b0:	4318      	orrs	r0, r3
 80043b2:	f7fc f883 	bl	80004bc <__aeabi_ui2d>
 80043b6:	2301      	movs	r3, #1
 80043b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80043bc:	3d01      	subs	r5, #1
 80043be:	9310      	str	r3, [sp, #64]	; 0x40
 80043c0:	e773      	b.n	80042aa <_dtoa_r+0xfa>
 80043c2:	f1c3 0020 	rsb	r0, r3, #32
 80043c6:	9b02      	ldr	r3, [sp, #8]
 80043c8:	fa03 f000 	lsl.w	r0, r3, r0
 80043cc:	e7f1      	b.n	80043b2 <_dtoa_r+0x202>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e7b2      	b.n	8004338 <_dtoa_r+0x188>
 80043d2:	900d      	str	r0, [sp, #52]	; 0x34
 80043d4:	e7b1      	b.n	800433a <_dtoa_r+0x18a>
 80043d6:	f1cb 0300 	rsb	r3, fp, #0
 80043da:	9308      	str	r3, [sp, #32]
 80043dc:	2300      	movs	r3, #0
 80043de:	eba8 080b 	sub.w	r8, r8, fp
 80043e2:	930c      	str	r3, [sp, #48]	; 0x30
 80043e4:	e7be      	b.n	8004364 <_dtoa_r+0x1b4>
 80043e6:	2301      	movs	r3, #1
 80043e8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f340 8080 	ble.w	80044f2 <_dtoa_r+0x342>
 80043f2:	4699      	mov	r9, r3
 80043f4:	9304      	str	r3, [sp, #16]
 80043f6:	2200      	movs	r2, #0
 80043f8:	2104      	movs	r1, #4
 80043fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80043fc:	606a      	str	r2, [r5, #4]
 80043fe:	f101 0214 	add.w	r2, r1, #20
 8004402:	429a      	cmp	r2, r3
 8004404:	d97a      	bls.n	80044fc <_dtoa_r+0x34c>
 8004406:	6869      	ldr	r1, [r5, #4]
 8004408:	4620      	mov	r0, r4
 800440a:	f000 feed 	bl	80051e8 <_Balloc>
 800440e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004410:	6028      	str	r0, [r5, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f1b9 0f0e 	cmp.w	r9, #14
 8004418:	9306      	str	r3, [sp, #24]
 800441a:	f200 80f0 	bhi.w	80045fe <_dtoa_r+0x44e>
 800441e:	2e00      	cmp	r6, #0
 8004420:	f000 80ed 	beq.w	80045fe <_dtoa_r+0x44e>
 8004424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004428:	f1bb 0f00 	cmp.w	fp, #0
 800442c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004430:	dd79      	ble.n	8004526 <_dtoa_r+0x376>
 8004432:	4a26      	ldr	r2, [pc, #152]	; (80044cc <_dtoa_r+0x31c>)
 8004434:	f00b 030f 	and.w	r3, fp, #15
 8004438:	ea4f 162b 	mov.w	r6, fp, asr #4
 800443c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004440:	06f0      	lsls	r0, r6, #27
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800444a:	d55c      	bpl.n	8004506 <_dtoa_r+0x356>
 800444c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004450:	4b1f      	ldr	r3, [pc, #124]	; (80044d0 <_dtoa_r+0x320>)
 8004452:	2503      	movs	r5, #3
 8004454:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004458:	f7fc f9d0 	bl	80007fc <__aeabi_ddiv>
 800445c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004460:	f006 060f 	and.w	r6, r6, #15
 8004464:	4f1a      	ldr	r7, [pc, #104]	; (80044d0 <_dtoa_r+0x320>)
 8004466:	2e00      	cmp	r6, #0
 8004468:	d14f      	bne.n	800450a <_dtoa_r+0x35a>
 800446a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800446e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004472:	f7fc f9c3 	bl	80007fc <__aeabi_ddiv>
 8004476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800447a:	e06e      	b.n	800455a <_dtoa_r+0x3aa>
 800447c:	2301      	movs	r3, #1
 800447e:	9309      	str	r3, [sp, #36]	; 0x24
 8004480:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004482:	445b      	add	r3, fp
 8004484:	f103 0901 	add.w	r9, r3, #1
 8004488:	9304      	str	r3, [sp, #16]
 800448a:	464b      	mov	r3, r9
 800448c:	2b01      	cmp	r3, #1
 800448e:	bfb8      	it	lt
 8004490:	2301      	movlt	r3, #1
 8004492:	e7b0      	b.n	80043f6 <_dtoa_r+0x246>
 8004494:	2300      	movs	r3, #0
 8004496:	e7a7      	b.n	80043e8 <_dtoa_r+0x238>
 8004498:	2300      	movs	r3, #0
 800449a:	e7f0      	b.n	800447e <_dtoa_r+0x2ce>
 800449c:	f3af 8000 	nop.w
 80044a0:	636f4361 	.word	0x636f4361
 80044a4:	3fd287a7 	.word	0x3fd287a7
 80044a8:	8b60c8b3 	.word	0x8b60c8b3
 80044ac:	3fc68a28 	.word	0x3fc68a28
 80044b0:	509f79fb 	.word	0x509f79fb
 80044b4:	3fd34413 	.word	0x3fd34413
 80044b8:	7ff00000 	.word	0x7ff00000
 80044bc:	08005f5d 	.word	0x08005f5d
 80044c0:	08005f54 	.word	0x08005f54
 80044c4:	08005f33 	.word	0x08005f33
 80044c8:	3ff80000 	.word	0x3ff80000
 80044cc:	08005f90 	.word	0x08005f90
 80044d0:	08005f68 	.word	0x08005f68
 80044d4:	2601      	movs	r6, #1
 80044d6:	2300      	movs	r3, #0
 80044d8:	9609      	str	r6, [sp, #36]	; 0x24
 80044da:	931e      	str	r3, [sp, #120]	; 0x78
 80044dc:	f04f 33ff 	mov.w	r3, #4294967295
 80044e0:	2200      	movs	r2, #0
 80044e2:	9304      	str	r3, [sp, #16]
 80044e4:	4699      	mov	r9, r3
 80044e6:	2312      	movs	r3, #18
 80044e8:	921f      	str	r2, [sp, #124]	; 0x7c
 80044ea:	e784      	b.n	80043f6 <_dtoa_r+0x246>
 80044ec:	2301      	movs	r3, #1
 80044ee:	9309      	str	r3, [sp, #36]	; 0x24
 80044f0:	e7f4      	b.n	80044dc <_dtoa_r+0x32c>
 80044f2:	2301      	movs	r3, #1
 80044f4:	9304      	str	r3, [sp, #16]
 80044f6:	4699      	mov	r9, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	e7f5      	b.n	80044e8 <_dtoa_r+0x338>
 80044fc:	686a      	ldr	r2, [r5, #4]
 80044fe:	0049      	lsls	r1, r1, #1
 8004500:	3201      	adds	r2, #1
 8004502:	606a      	str	r2, [r5, #4]
 8004504:	e77b      	b.n	80043fe <_dtoa_r+0x24e>
 8004506:	2502      	movs	r5, #2
 8004508:	e7ac      	b.n	8004464 <_dtoa_r+0x2b4>
 800450a:	07f1      	lsls	r1, r6, #31
 800450c:	d508      	bpl.n	8004520 <_dtoa_r+0x370>
 800450e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004516:	f7fc f847 	bl	80005a8 <__aeabi_dmul>
 800451a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800451e:	3501      	adds	r5, #1
 8004520:	1076      	asrs	r6, r6, #1
 8004522:	3708      	adds	r7, #8
 8004524:	e79f      	b.n	8004466 <_dtoa_r+0x2b6>
 8004526:	f000 80a5 	beq.w	8004674 <_dtoa_r+0x4c4>
 800452a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800452e:	f1cb 0600 	rsb	r6, fp, #0
 8004532:	4ba2      	ldr	r3, [pc, #648]	; (80047bc <_dtoa_r+0x60c>)
 8004534:	f006 020f 	and.w	r2, r6, #15
 8004538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f7fc f832 	bl	80005a8 <__aeabi_dmul>
 8004544:	2502      	movs	r5, #2
 8004546:	2300      	movs	r3, #0
 8004548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800454c:	4f9c      	ldr	r7, [pc, #624]	; (80047c0 <_dtoa_r+0x610>)
 800454e:	1136      	asrs	r6, r6, #4
 8004550:	2e00      	cmp	r6, #0
 8004552:	f040 8084 	bne.w	800465e <_dtoa_r+0x4ae>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d18d      	bne.n	8004476 <_dtoa_r+0x2c6>
 800455a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 808b 	beq.w	8004678 <_dtoa_r+0x4c8>
 8004562:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004566:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800456a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800456e:	2200      	movs	r2, #0
 8004570:	4b94      	ldr	r3, [pc, #592]	; (80047c4 <_dtoa_r+0x614>)
 8004572:	f7fc fa8b 	bl	8000a8c <__aeabi_dcmplt>
 8004576:	2800      	cmp	r0, #0
 8004578:	d07e      	beq.n	8004678 <_dtoa_r+0x4c8>
 800457a:	f1b9 0f00 	cmp.w	r9, #0
 800457e:	d07b      	beq.n	8004678 <_dtoa_r+0x4c8>
 8004580:	9b04      	ldr	r3, [sp, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	dd37      	ble.n	80045f6 <_dtoa_r+0x446>
 8004586:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800458a:	2200      	movs	r2, #0
 800458c:	4b8e      	ldr	r3, [pc, #568]	; (80047c8 <_dtoa_r+0x618>)
 800458e:	f7fc f80b 	bl	80005a8 <__aeabi_dmul>
 8004592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004596:	9e04      	ldr	r6, [sp, #16]
 8004598:	f10b 37ff 	add.w	r7, fp, #4294967295
 800459c:	3501      	adds	r5, #1
 800459e:	4628      	mov	r0, r5
 80045a0:	f7fb ff9c 	bl	80004dc <__aeabi_i2d>
 80045a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045a8:	f7fb fffe 	bl	80005a8 <__aeabi_dmul>
 80045ac:	4b87      	ldr	r3, [pc, #540]	; (80047cc <_dtoa_r+0x61c>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	f7fb fe48 	bl	8000244 <__adddf3>
 80045b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045ba:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80045be:	950b      	str	r5, [sp, #44]	; 0x2c
 80045c0:	2e00      	cmp	r6, #0
 80045c2:	d15c      	bne.n	800467e <_dtoa_r+0x4ce>
 80045c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <_dtoa_r+0x620>)
 80045cc:	f7fb fe38 	bl	8000240 <__aeabi_dsub>
 80045d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045d2:	462b      	mov	r3, r5
 80045d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045d8:	f7fc fa76 	bl	8000ac8 <__aeabi_dcmpgt>
 80045dc:	2800      	cmp	r0, #0
 80045de:	f040 82f7 	bne.w	8004bd0 <_dtoa_r+0xa20>
 80045e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045e8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80045ec:	f7fc fa4e 	bl	8000a8c <__aeabi_dcmplt>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	f040 82eb 	bne.w	8004bcc <_dtoa_r+0xa1c>
 80045f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80045fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004600:	2b00      	cmp	r3, #0
 8004602:	f2c0 8150 	blt.w	80048a6 <_dtoa_r+0x6f6>
 8004606:	f1bb 0f0e 	cmp.w	fp, #14
 800460a:	f300 814c 	bgt.w	80048a6 <_dtoa_r+0x6f6>
 800460e:	4b6b      	ldr	r3, [pc, #428]	; (80047bc <_dtoa_r+0x60c>)
 8004610:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800461c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800461e:	2b00      	cmp	r3, #0
 8004620:	f280 80da 	bge.w	80047d8 <_dtoa_r+0x628>
 8004624:	f1b9 0f00 	cmp.w	r9, #0
 8004628:	f300 80d6 	bgt.w	80047d8 <_dtoa_r+0x628>
 800462c:	f040 82cd 	bne.w	8004bca <_dtoa_r+0xa1a>
 8004630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004634:	2200      	movs	r2, #0
 8004636:	4b66      	ldr	r3, [pc, #408]	; (80047d0 <_dtoa_r+0x620>)
 8004638:	f7fb ffb6 	bl	80005a8 <__aeabi_dmul>
 800463c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004640:	f7fc fa38 	bl	8000ab4 <__aeabi_dcmpge>
 8004644:	464e      	mov	r6, r9
 8004646:	464f      	mov	r7, r9
 8004648:	2800      	cmp	r0, #0
 800464a:	f040 82a4 	bne.w	8004b96 <_dtoa_r+0x9e6>
 800464e:	9b06      	ldr	r3, [sp, #24]
 8004650:	9a06      	ldr	r2, [sp, #24]
 8004652:	1c5d      	adds	r5, r3, #1
 8004654:	2331      	movs	r3, #49	; 0x31
 8004656:	f10b 0b01 	add.w	fp, fp, #1
 800465a:	7013      	strb	r3, [r2, #0]
 800465c:	e29f      	b.n	8004b9e <_dtoa_r+0x9ee>
 800465e:	07f2      	lsls	r2, r6, #31
 8004660:	d505      	bpl.n	800466e <_dtoa_r+0x4be>
 8004662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004666:	f7fb ff9f 	bl	80005a8 <__aeabi_dmul>
 800466a:	2301      	movs	r3, #1
 800466c:	3501      	adds	r5, #1
 800466e:	1076      	asrs	r6, r6, #1
 8004670:	3708      	adds	r7, #8
 8004672:	e76d      	b.n	8004550 <_dtoa_r+0x3a0>
 8004674:	2502      	movs	r5, #2
 8004676:	e770      	b.n	800455a <_dtoa_r+0x3aa>
 8004678:	465f      	mov	r7, fp
 800467a:	464e      	mov	r6, r9
 800467c:	e78f      	b.n	800459e <_dtoa_r+0x3ee>
 800467e:	9a06      	ldr	r2, [sp, #24]
 8004680:	4b4e      	ldr	r3, [pc, #312]	; (80047bc <_dtoa_r+0x60c>)
 8004682:	4432      	add	r2, r6
 8004684:	9211      	str	r2, [sp, #68]	; 0x44
 8004686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004688:	1e71      	subs	r1, r6, #1
 800468a:	2a00      	cmp	r2, #0
 800468c:	d048      	beq.n	8004720 <_dtoa_r+0x570>
 800468e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	2000      	movs	r0, #0
 8004698:	494e      	ldr	r1, [pc, #312]	; (80047d4 <_dtoa_r+0x624>)
 800469a:	f7fc f8af 	bl	80007fc <__aeabi_ddiv>
 800469e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80046a2:	f7fb fdcd 	bl	8000240 <__aeabi_dsub>
 80046a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80046aa:	9d06      	ldr	r5, [sp, #24]
 80046ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046b0:	f7fc fa2a 	bl	8000b08 <__aeabi_d2iz>
 80046b4:	4606      	mov	r6, r0
 80046b6:	f7fb ff11 	bl	80004dc <__aeabi_i2d>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046c2:	f7fb fdbd 	bl	8000240 <__aeabi_dsub>
 80046c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80046ca:	3630      	adds	r6, #48	; 0x30
 80046cc:	f805 6b01 	strb.w	r6, [r5], #1
 80046d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046d4:	f7fc f9da 	bl	8000a8c <__aeabi_dcmplt>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d164      	bne.n	80047a6 <_dtoa_r+0x5f6>
 80046dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046e0:	2000      	movs	r0, #0
 80046e2:	4938      	ldr	r1, [pc, #224]	; (80047c4 <_dtoa_r+0x614>)
 80046e4:	f7fb fdac 	bl	8000240 <__aeabi_dsub>
 80046e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80046ec:	f7fc f9ce 	bl	8000a8c <__aeabi_dcmplt>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f040 80b9 	bne.w	8004868 <_dtoa_r+0x6b8>
 80046f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046f8:	429d      	cmp	r5, r3
 80046fa:	f43f af7c 	beq.w	80045f6 <_dtoa_r+0x446>
 80046fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004702:	2200      	movs	r2, #0
 8004704:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <_dtoa_r+0x618>)
 8004706:	f7fb ff4f 	bl	80005a8 <__aeabi_dmul>
 800470a:	2200      	movs	r2, #0
 800470c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004714:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <_dtoa_r+0x618>)
 8004716:	f7fb ff47 	bl	80005a8 <__aeabi_dmul>
 800471a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800471e:	e7c5      	b.n	80046ac <_dtoa_r+0x4fc>
 8004720:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004728:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800472c:	f7fb ff3c 	bl	80005a8 <__aeabi_dmul>
 8004730:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004734:	9d06      	ldr	r5, [sp, #24]
 8004736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800473a:	f7fc f9e5 	bl	8000b08 <__aeabi_d2iz>
 800473e:	4606      	mov	r6, r0
 8004740:	f7fb fecc 	bl	80004dc <__aeabi_i2d>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800474c:	f7fb fd78 	bl	8000240 <__aeabi_dsub>
 8004750:	3630      	adds	r6, #48	; 0x30
 8004752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004754:	f805 6b01 	strb.w	r6, [r5], #1
 8004758:	42ab      	cmp	r3, r5
 800475a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	d124      	bne.n	80047ae <_dtoa_r+0x5fe>
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <_dtoa_r+0x624>)
 8004766:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800476a:	f7fb fd6b 	bl	8000244 <__adddf3>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004776:	f7fc f9a7 	bl	8000ac8 <__aeabi_dcmpgt>
 800477a:	2800      	cmp	r0, #0
 800477c:	d174      	bne.n	8004868 <_dtoa_r+0x6b8>
 800477e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004782:	2000      	movs	r0, #0
 8004784:	4913      	ldr	r1, [pc, #76]	; (80047d4 <_dtoa_r+0x624>)
 8004786:	f7fb fd5b 	bl	8000240 <__aeabi_dsub>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004792:	f7fc f97b 	bl	8000a8c <__aeabi_dcmplt>
 8004796:	2800      	cmp	r0, #0
 8004798:	f43f af2d 	beq.w	80045f6 <_dtoa_r+0x446>
 800479c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047a0:	1e6a      	subs	r2, r5, #1
 80047a2:	2b30      	cmp	r3, #48	; 0x30
 80047a4:	d001      	beq.n	80047aa <_dtoa_r+0x5fa>
 80047a6:	46bb      	mov	fp, r7
 80047a8:	e04d      	b.n	8004846 <_dtoa_r+0x696>
 80047aa:	4615      	mov	r5, r2
 80047ac:	e7f6      	b.n	800479c <_dtoa_r+0x5ec>
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <_dtoa_r+0x618>)
 80047b0:	f7fb fefa 	bl	80005a8 <__aeabi_dmul>
 80047b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047b8:	e7bd      	b.n	8004736 <_dtoa_r+0x586>
 80047ba:	bf00      	nop
 80047bc:	08005f90 	.word	0x08005f90
 80047c0:	08005f68 	.word	0x08005f68
 80047c4:	3ff00000 	.word	0x3ff00000
 80047c8:	40240000 	.word	0x40240000
 80047cc:	401c0000 	.word	0x401c0000
 80047d0:	40140000 	.word	0x40140000
 80047d4:	3fe00000 	.word	0x3fe00000
 80047d8:	9d06      	ldr	r5, [sp, #24]
 80047da:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80047de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047e2:	4630      	mov	r0, r6
 80047e4:	4639      	mov	r1, r7
 80047e6:	f7fc f809 	bl	80007fc <__aeabi_ddiv>
 80047ea:	f7fc f98d 	bl	8000b08 <__aeabi_d2iz>
 80047ee:	4680      	mov	r8, r0
 80047f0:	f7fb fe74 	bl	80004dc <__aeabi_i2d>
 80047f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047f8:	f7fb fed6 	bl	80005a8 <__aeabi_dmul>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4630      	mov	r0, r6
 8004802:	4639      	mov	r1, r7
 8004804:	f7fb fd1c 	bl	8000240 <__aeabi_dsub>
 8004808:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800480c:	f805 6b01 	strb.w	r6, [r5], #1
 8004810:	9e06      	ldr	r6, [sp, #24]
 8004812:	4602      	mov	r2, r0
 8004814:	1bae      	subs	r6, r5, r6
 8004816:	45b1      	cmp	r9, r6
 8004818:	460b      	mov	r3, r1
 800481a:	d137      	bne.n	800488c <_dtoa_r+0x6dc>
 800481c:	f7fb fd12 	bl	8000244 <__adddf3>
 8004820:	4606      	mov	r6, r0
 8004822:	460f      	mov	r7, r1
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800482c:	f7fc f92e 	bl	8000a8c <__aeabi_dcmplt>
 8004830:	b9c8      	cbnz	r0, 8004866 <_dtoa_r+0x6b6>
 8004832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004836:	4632      	mov	r2, r6
 8004838:	463b      	mov	r3, r7
 800483a:	f7fc f91d 	bl	8000a78 <__aeabi_dcmpeq>
 800483e:	b110      	cbz	r0, 8004846 <_dtoa_r+0x696>
 8004840:	f018 0f01 	tst.w	r8, #1
 8004844:	d10f      	bne.n	8004866 <_dtoa_r+0x6b6>
 8004846:	4651      	mov	r1, sl
 8004848:	4620      	mov	r0, r4
 800484a:	f000 fd01 	bl	8005250 <_Bfree>
 800484e:	2300      	movs	r3, #0
 8004850:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004852:	702b      	strb	r3, [r5, #0]
 8004854:	f10b 0301 	add.w	r3, fp, #1
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800485c:	2b00      	cmp	r3, #0
 800485e:	f43f acec 	beq.w	800423a <_dtoa_r+0x8a>
 8004862:	601d      	str	r5, [r3, #0]
 8004864:	e4e9      	b.n	800423a <_dtoa_r+0x8a>
 8004866:	465f      	mov	r7, fp
 8004868:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800486c:	1e6b      	subs	r3, r5, #1
 800486e:	2a39      	cmp	r2, #57	; 0x39
 8004870:	d106      	bne.n	8004880 <_dtoa_r+0x6d0>
 8004872:	9a06      	ldr	r2, [sp, #24]
 8004874:	429a      	cmp	r2, r3
 8004876:	d107      	bne.n	8004888 <_dtoa_r+0x6d8>
 8004878:	2330      	movs	r3, #48	; 0x30
 800487a:	7013      	strb	r3, [r2, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	3701      	adds	r7, #1
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	3201      	adds	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	e78e      	b.n	80047a6 <_dtoa_r+0x5f6>
 8004888:	461d      	mov	r5, r3
 800488a:	e7ed      	b.n	8004868 <_dtoa_r+0x6b8>
 800488c:	2200      	movs	r2, #0
 800488e:	4bb5      	ldr	r3, [pc, #724]	; (8004b64 <_dtoa_r+0x9b4>)
 8004890:	f7fb fe8a 	bl	80005a8 <__aeabi_dmul>
 8004894:	2200      	movs	r2, #0
 8004896:	2300      	movs	r3, #0
 8004898:	4606      	mov	r6, r0
 800489a:	460f      	mov	r7, r1
 800489c:	f7fc f8ec 	bl	8000a78 <__aeabi_dcmpeq>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d09c      	beq.n	80047de <_dtoa_r+0x62e>
 80048a4:	e7cf      	b.n	8004846 <_dtoa_r+0x696>
 80048a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048a8:	2a00      	cmp	r2, #0
 80048aa:	f000 8129 	beq.w	8004b00 <_dtoa_r+0x950>
 80048ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80048b0:	2a01      	cmp	r2, #1
 80048b2:	f300 810e 	bgt.w	8004ad2 <_dtoa_r+0x922>
 80048b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80048b8:	2a00      	cmp	r2, #0
 80048ba:	f000 8106 	beq.w	8004aca <_dtoa_r+0x91a>
 80048be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80048c2:	4645      	mov	r5, r8
 80048c4:	9e08      	ldr	r6, [sp, #32]
 80048c6:	9a07      	ldr	r2, [sp, #28]
 80048c8:	2101      	movs	r1, #1
 80048ca:	441a      	add	r2, r3
 80048cc:	4620      	mov	r0, r4
 80048ce:	4498      	add	r8, r3
 80048d0:	9207      	str	r2, [sp, #28]
 80048d2:	f000 fd5d 	bl	8005390 <__i2b>
 80048d6:	4607      	mov	r7, r0
 80048d8:	2d00      	cmp	r5, #0
 80048da:	dd0b      	ble.n	80048f4 <_dtoa_r+0x744>
 80048dc:	9b07      	ldr	r3, [sp, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	dd08      	ble.n	80048f4 <_dtoa_r+0x744>
 80048e2:	42ab      	cmp	r3, r5
 80048e4:	bfa8      	it	ge
 80048e6:	462b      	movge	r3, r5
 80048e8:	9a07      	ldr	r2, [sp, #28]
 80048ea:	eba8 0803 	sub.w	r8, r8, r3
 80048ee:	1aed      	subs	r5, r5, r3
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	9307      	str	r3, [sp, #28]
 80048f4:	9b08      	ldr	r3, [sp, #32]
 80048f6:	b1fb      	cbz	r3, 8004938 <_dtoa_r+0x788>
 80048f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8104 	beq.w	8004b08 <_dtoa_r+0x958>
 8004900:	2e00      	cmp	r6, #0
 8004902:	dd11      	ble.n	8004928 <_dtoa_r+0x778>
 8004904:	4639      	mov	r1, r7
 8004906:	4632      	mov	r2, r6
 8004908:	4620      	mov	r0, r4
 800490a:	f000 fdd7 	bl	80054bc <__pow5mult>
 800490e:	4652      	mov	r2, sl
 8004910:	4601      	mov	r1, r0
 8004912:	4607      	mov	r7, r0
 8004914:	4620      	mov	r0, r4
 8004916:	f000 fd44 	bl	80053a2 <__multiply>
 800491a:	4651      	mov	r1, sl
 800491c:	900a      	str	r0, [sp, #40]	; 0x28
 800491e:	4620      	mov	r0, r4
 8004920:	f000 fc96 	bl	8005250 <_Bfree>
 8004924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004926:	469a      	mov	sl, r3
 8004928:	9b08      	ldr	r3, [sp, #32]
 800492a:	1b9a      	subs	r2, r3, r6
 800492c:	d004      	beq.n	8004938 <_dtoa_r+0x788>
 800492e:	4651      	mov	r1, sl
 8004930:	4620      	mov	r0, r4
 8004932:	f000 fdc3 	bl	80054bc <__pow5mult>
 8004936:	4682      	mov	sl, r0
 8004938:	2101      	movs	r1, #1
 800493a:	4620      	mov	r0, r4
 800493c:	f000 fd28 	bl	8005390 <__i2b>
 8004940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004942:	4606      	mov	r6, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	f340 80e1 	ble.w	8004b0c <_dtoa_r+0x95c>
 800494a:	461a      	mov	r2, r3
 800494c:	4601      	mov	r1, r0
 800494e:	4620      	mov	r0, r4
 8004950:	f000 fdb4 	bl	80054bc <__pow5mult>
 8004954:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004956:	4606      	mov	r6, r0
 8004958:	2b01      	cmp	r3, #1
 800495a:	f340 80da 	ble.w	8004b12 <_dtoa_r+0x962>
 800495e:	2300      	movs	r3, #0
 8004960:	9308      	str	r3, [sp, #32]
 8004962:	6933      	ldr	r3, [r6, #16]
 8004964:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004968:	6918      	ldr	r0, [r3, #16]
 800496a:	f000 fcc3 	bl	80052f4 <__hi0bits>
 800496e:	f1c0 0020 	rsb	r0, r0, #32
 8004972:	9b07      	ldr	r3, [sp, #28]
 8004974:	4418      	add	r0, r3
 8004976:	f010 001f 	ands.w	r0, r0, #31
 800497a:	f000 80f0 	beq.w	8004b5e <_dtoa_r+0x9ae>
 800497e:	f1c0 0320 	rsb	r3, r0, #32
 8004982:	2b04      	cmp	r3, #4
 8004984:	f340 80e2 	ble.w	8004b4c <_dtoa_r+0x99c>
 8004988:	9b07      	ldr	r3, [sp, #28]
 800498a:	f1c0 001c 	rsb	r0, r0, #28
 800498e:	4480      	add	r8, r0
 8004990:	4405      	add	r5, r0
 8004992:	4403      	add	r3, r0
 8004994:	9307      	str	r3, [sp, #28]
 8004996:	f1b8 0f00 	cmp.w	r8, #0
 800499a:	dd05      	ble.n	80049a8 <_dtoa_r+0x7f8>
 800499c:	4651      	mov	r1, sl
 800499e:	4642      	mov	r2, r8
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 fdd9 	bl	8005558 <__lshift>
 80049a6:	4682      	mov	sl, r0
 80049a8:	9b07      	ldr	r3, [sp, #28]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	dd05      	ble.n	80049ba <_dtoa_r+0x80a>
 80049ae:	4631      	mov	r1, r6
 80049b0:	461a      	mov	r2, r3
 80049b2:	4620      	mov	r0, r4
 80049b4:	f000 fdd0 	bl	8005558 <__lshift>
 80049b8:	4606      	mov	r6, r0
 80049ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80d3 	beq.w	8004b68 <_dtoa_r+0x9b8>
 80049c2:	4631      	mov	r1, r6
 80049c4:	4650      	mov	r0, sl
 80049c6:	f000 fe18 	bl	80055fa <__mcmp>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	f280 80cc 	bge.w	8004b68 <_dtoa_r+0x9b8>
 80049d0:	2300      	movs	r3, #0
 80049d2:	4651      	mov	r1, sl
 80049d4:	220a      	movs	r2, #10
 80049d6:	4620      	mov	r0, r4
 80049d8:	f000 fc51 	bl	800527e <__multadd>
 80049dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80049e2:	4682      	mov	sl, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 81a9 	beq.w	8004d3c <_dtoa_r+0xb8c>
 80049ea:	2300      	movs	r3, #0
 80049ec:	4639      	mov	r1, r7
 80049ee:	220a      	movs	r2, #10
 80049f0:	4620      	mov	r0, r4
 80049f2:	f000 fc44 	bl	800527e <__multadd>
 80049f6:	9b04      	ldr	r3, [sp, #16]
 80049f8:	4607      	mov	r7, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	dc03      	bgt.n	8004a06 <_dtoa_r+0x856>
 80049fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	f300 80b9 	bgt.w	8004b78 <_dtoa_r+0x9c8>
 8004a06:	2d00      	cmp	r5, #0
 8004a08:	dd05      	ble.n	8004a16 <_dtoa_r+0x866>
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	462a      	mov	r2, r5
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f000 fda2 	bl	8005558 <__lshift>
 8004a14:	4607      	mov	r7, r0
 8004a16:	9b08      	ldr	r3, [sp, #32]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8110 	beq.w	8004c3e <_dtoa_r+0xa8e>
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4620      	mov	r0, r4
 8004a22:	f000 fbe1 	bl	80051e8 <_Balloc>
 8004a26:	4605      	mov	r5, r0
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	f107 010c 	add.w	r1, r7, #12
 8004a2e:	3202      	adds	r2, #2
 8004a30:	0092      	lsls	r2, r2, #2
 8004a32:	300c      	adds	r0, #12
 8004a34:	f000 fbc0 	bl	80051b8 <memcpy>
 8004a38:	2201      	movs	r2, #1
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f000 fd8b 	bl	8005558 <__lshift>
 8004a42:	9707      	str	r7, [sp, #28]
 8004a44:	4607      	mov	r7, r0
 8004a46:	9b02      	ldr	r3, [sp, #8]
 8004a48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	9308      	str	r3, [sp, #32]
 8004a52:	4631      	mov	r1, r6
 8004a54:	4650      	mov	r0, sl
 8004a56:	f7ff fb1d 	bl	8004094 <quorem>
 8004a5a:	9907      	ldr	r1, [sp, #28]
 8004a5c:	4605      	mov	r5, r0
 8004a5e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004a62:	4650      	mov	r0, sl
 8004a64:	f000 fdc9 	bl	80055fa <__mcmp>
 8004a68:	463a      	mov	r2, r7
 8004a6a:	9002      	str	r0, [sp, #8]
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f000 fddd 	bl	800562e <__mdiff>
 8004a74:	68c3      	ldr	r3, [r0, #12]
 8004a76:	4602      	mov	r2, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f040 80e2 	bne.w	8004c42 <_dtoa_r+0xa92>
 8004a7e:	4601      	mov	r1, r0
 8004a80:	9009      	str	r0, [sp, #36]	; 0x24
 8004a82:	4650      	mov	r0, sl
 8004a84:	f000 fdb9 	bl	80055fa <__mcmp>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	4620      	mov	r0, r4
 8004a90:	9309      	str	r3, [sp, #36]	; 0x24
 8004a92:	f000 fbdd 	bl	8005250 <_Bfree>
 8004a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f040 80d4 	bne.w	8004c46 <_dtoa_r+0xa96>
 8004a9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004aa0:	2a00      	cmp	r2, #0
 8004aa2:	f040 80d0 	bne.w	8004c46 <_dtoa_r+0xa96>
 8004aa6:	9a08      	ldr	r2, [sp, #32]
 8004aa8:	2a00      	cmp	r2, #0
 8004aaa:	f040 80cc 	bne.w	8004c46 <_dtoa_r+0xa96>
 8004aae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004ab2:	f000 80e8 	beq.w	8004c86 <_dtoa_r+0xad6>
 8004ab6:	9b02      	ldr	r3, [sp, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	dd01      	ble.n	8004ac0 <_dtoa_r+0x910>
 8004abc:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004ac0:	f108 0501 	add.w	r5, r8, #1
 8004ac4:	f888 9000 	strb.w	r9, [r8]
 8004ac8:	e06b      	b.n	8004ba2 <_dtoa_r+0x9f2>
 8004aca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004acc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ad0:	e6f7      	b.n	80048c2 <_dtoa_r+0x712>
 8004ad2:	9b08      	ldr	r3, [sp, #32]
 8004ad4:	f109 36ff 	add.w	r6, r9, #4294967295
 8004ad8:	42b3      	cmp	r3, r6
 8004ada:	bfb7      	itett	lt
 8004adc:	9b08      	ldrlt	r3, [sp, #32]
 8004ade:	1b9e      	subge	r6, r3, r6
 8004ae0:	1af2      	sublt	r2, r6, r3
 8004ae2:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004ae4:	bfbf      	itttt	lt
 8004ae6:	9608      	strlt	r6, [sp, #32]
 8004ae8:	189b      	addlt	r3, r3, r2
 8004aea:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004aec:	2600      	movlt	r6, #0
 8004aee:	f1b9 0f00 	cmp.w	r9, #0
 8004af2:	bfb9      	ittee	lt
 8004af4:	eba8 0509 	sublt.w	r5, r8, r9
 8004af8:	2300      	movlt	r3, #0
 8004afa:	4645      	movge	r5, r8
 8004afc:	464b      	movge	r3, r9
 8004afe:	e6e2      	b.n	80048c6 <_dtoa_r+0x716>
 8004b00:	9e08      	ldr	r6, [sp, #32]
 8004b02:	4645      	mov	r5, r8
 8004b04:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b06:	e6e7      	b.n	80048d8 <_dtoa_r+0x728>
 8004b08:	9a08      	ldr	r2, [sp, #32]
 8004b0a:	e710      	b.n	800492e <_dtoa_r+0x77e>
 8004b0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	dc18      	bgt.n	8004b44 <_dtoa_r+0x994>
 8004b12:	9b02      	ldr	r3, [sp, #8]
 8004b14:	b9b3      	cbnz	r3, 8004b44 <_dtoa_r+0x994>
 8004b16:	9b03      	ldr	r3, [sp, #12]
 8004b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b1c:	b9a3      	cbnz	r3, 8004b48 <_dtoa_r+0x998>
 8004b1e:	9b03      	ldr	r3, [sp, #12]
 8004b20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b24:	0d1b      	lsrs	r3, r3, #20
 8004b26:	051b      	lsls	r3, r3, #20
 8004b28:	b12b      	cbz	r3, 8004b36 <_dtoa_r+0x986>
 8004b2a:	9b07      	ldr	r3, [sp, #28]
 8004b2c:	f108 0801 	add.w	r8, r8, #1
 8004b30:	3301      	adds	r3, #1
 8004b32:	9307      	str	r3, [sp, #28]
 8004b34:	2301      	movs	r3, #1
 8004b36:	9308      	str	r3, [sp, #32]
 8004b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f47f af11 	bne.w	8004962 <_dtoa_r+0x7b2>
 8004b40:	2001      	movs	r0, #1
 8004b42:	e716      	b.n	8004972 <_dtoa_r+0x7c2>
 8004b44:	2300      	movs	r3, #0
 8004b46:	e7f6      	b.n	8004b36 <_dtoa_r+0x986>
 8004b48:	9b02      	ldr	r3, [sp, #8]
 8004b4a:	e7f4      	b.n	8004b36 <_dtoa_r+0x986>
 8004b4c:	f43f af23 	beq.w	8004996 <_dtoa_r+0x7e6>
 8004b50:	9a07      	ldr	r2, [sp, #28]
 8004b52:	331c      	adds	r3, #28
 8004b54:	441a      	add	r2, r3
 8004b56:	4498      	add	r8, r3
 8004b58:	441d      	add	r5, r3
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	e71a      	b.n	8004994 <_dtoa_r+0x7e4>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	e7f6      	b.n	8004b50 <_dtoa_r+0x9a0>
 8004b62:	bf00      	nop
 8004b64:	40240000 	.word	0x40240000
 8004b68:	f1b9 0f00 	cmp.w	r9, #0
 8004b6c:	dc33      	bgt.n	8004bd6 <_dtoa_r+0xa26>
 8004b6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	dd30      	ble.n	8004bd6 <_dtoa_r+0xa26>
 8004b74:	f8cd 9010 	str.w	r9, [sp, #16]
 8004b78:	9b04      	ldr	r3, [sp, #16]
 8004b7a:	b963      	cbnz	r3, 8004b96 <_dtoa_r+0x9e6>
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	2205      	movs	r2, #5
 8004b80:	4620      	mov	r0, r4
 8004b82:	f000 fb7c 	bl	800527e <__multadd>
 8004b86:	4601      	mov	r1, r0
 8004b88:	4606      	mov	r6, r0
 8004b8a:	4650      	mov	r0, sl
 8004b8c:	f000 fd35 	bl	80055fa <__mcmp>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	f73f ad5c 	bgt.w	800464e <_dtoa_r+0x49e>
 8004b96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b98:	9d06      	ldr	r5, [sp, #24]
 8004b9a:	ea6f 0b03 	mvn.w	fp, r3
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9307      	str	r3, [sp, #28]
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f000 fb53 	bl	8005250 <_Bfree>
 8004baa:	2f00      	cmp	r7, #0
 8004bac:	f43f ae4b 	beq.w	8004846 <_dtoa_r+0x696>
 8004bb0:	9b07      	ldr	r3, [sp, #28]
 8004bb2:	b12b      	cbz	r3, 8004bc0 <_dtoa_r+0xa10>
 8004bb4:	42bb      	cmp	r3, r7
 8004bb6:	d003      	beq.n	8004bc0 <_dtoa_r+0xa10>
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f000 fb48 	bl	8005250 <_Bfree>
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f000 fb44 	bl	8005250 <_Bfree>
 8004bc8:	e63d      	b.n	8004846 <_dtoa_r+0x696>
 8004bca:	2600      	movs	r6, #0
 8004bcc:	4637      	mov	r7, r6
 8004bce:	e7e2      	b.n	8004b96 <_dtoa_r+0x9e6>
 8004bd0:	46bb      	mov	fp, r7
 8004bd2:	4637      	mov	r7, r6
 8004bd4:	e53b      	b.n	800464e <_dtoa_r+0x49e>
 8004bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd8:	f8cd 9010 	str.w	r9, [sp, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f47f af12 	bne.w	8004a06 <_dtoa_r+0x856>
 8004be2:	9d06      	ldr	r5, [sp, #24]
 8004be4:	4631      	mov	r1, r6
 8004be6:	4650      	mov	r0, sl
 8004be8:	f7ff fa54 	bl	8004094 <quorem>
 8004bec:	9b06      	ldr	r3, [sp, #24]
 8004bee:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004bf2:	f805 9b01 	strb.w	r9, [r5], #1
 8004bf6:	9a04      	ldr	r2, [sp, #16]
 8004bf8:	1aeb      	subs	r3, r5, r3
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	f300 8081 	bgt.w	8004d02 <_dtoa_r+0xb52>
 8004c00:	9b06      	ldr	r3, [sp, #24]
 8004c02:	2a01      	cmp	r2, #1
 8004c04:	bfac      	ite	ge
 8004c06:	189b      	addge	r3, r3, r2
 8004c08:	3301      	addlt	r3, #1
 8004c0a:	4698      	mov	r8, r3
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9307      	str	r3, [sp, #28]
 8004c10:	4651      	mov	r1, sl
 8004c12:	2201      	movs	r2, #1
 8004c14:	4620      	mov	r0, r4
 8004c16:	f000 fc9f 	bl	8005558 <__lshift>
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	4682      	mov	sl, r0
 8004c1e:	f000 fcec 	bl	80055fa <__mcmp>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	dc34      	bgt.n	8004c90 <_dtoa_r+0xae0>
 8004c26:	d102      	bne.n	8004c2e <_dtoa_r+0xa7e>
 8004c28:	f019 0f01 	tst.w	r9, #1
 8004c2c:	d130      	bne.n	8004c90 <_dtoa_r+0xae0>
 8004c2e:	4645      	mov	r5, r8
 8004c30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c34:	1e6a      	subs	r2, r5, #1
 8004c36:	2b30      	cmp	r3, #48	; 0x30
 8004c38:	d1b3      	bne.n	8004ba2 <_dtoa_r+0x9f2>
 8004c3a:	4615      	mov	r5, r2
 8004c3c:	e7f8      	b.n	8004c30 <_dtoa_r+0xa80>
 8004c3e:	4638      	mov	r0, r7
 8004c40:	e6ff      	b.n	8004a42 <_dtoa_r+0x892>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e722      	b.n	8004a8c <_dtoa_r+0x8dc>
 8004c46:	9a02      	ldr	r2, [sp, #8]
 8004c48:	2a00      	cmp	r2, #0
 8004c4a:	db04      	blt.n	8004c56 <_dtoa_r+0xaa6>
 8004c4c:	d128      	bne.n	8004ca0 <_dtoa_r+0xaf0>
 8004c4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004c50:	bb32      	cbnz	r2, 8004ca0 <_dtoa_r+0xaf0>
 8004c52:	9a08      	ldr	r2, [sp, #32]
 8004c54:	bb22      	cbnz	r2, 8004ca0 <_dtoa_r+0xaf0>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f77f af32 	ble.w	8004ac0 <_dtoa_r+0x910>
 8004c5c:	4651      	mov	r1, sl
 8004c5e:	2201      	movs	r2, #1
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 fc79 	bl	8005558 <__lshift>
 8004c66:	4631      	mov	r1, r6
 8004c68:	4682      	mov	sl, r0
 8004c6a:	f000 fcc6 	bl	80055fa <__mcmp>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	dc05      	bgt.n	8004c7e <_dtoa_r+0xace>
 8004c72:	f47f af25 	bne.w	8004ac0 <_dtoa_r+0x910>
 8004c76:	f019 0f01 	tst.w	r9, #1
 8004c7a:	f43f af21 	beq.w	8004ac0 <_dtoa_r+0x910>
 8004c7e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004c82:	f47f af1b 	bne.w	8004abc <_dtoa_r+0x90c>
 8004c86:	2339      	movs	r3, #57	; 0x39
 8004c88:	f108 0801 	add.w	r8, r8, #1
 8004c8c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8004c90:	4645      	mov	r5, r8
 8004c92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c96:	1e6a      	subs	r2, r5, #1
 8004c98:	2b39      	cmp	r3, #57	; 0x39
 8004c9a:	d03a      	beq.n	8004d12 <_dtoa_r+0xb62>
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	e03f      	b.n	8004d20 <_dtoa_r+0xb70>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f108 0501 	add.w	r5, r8, #1
 8004ca6:	dd05      	ble.n	8004cb4 <_dtoa_r+0xb04>
 8004ca8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004cac:	d0eb      	beq.n	8004c86 <_dtoa_r+0xad6>
 8004cae:	f109 0901 	add.w	r9, r9, #1
 8004cb2:	e707      	b.n	8004ac4 <_dtoa_r+0x914>
 8004cb4:	9b06      	ldr	r3, [sp, #24]
 8004cb6:	9a04      	ldr	r2, [sp, #16]
 8004cb8:	1aeb      	subs	r3, r5, r3
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	46a8      	mov	r8, r5
 8004cbe:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004cc2:	d0a5      	beq.n	8004c10 <_dtoa_r+0xa60>
 8004cc4:	4651      	mov	r1, sl
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	220a      	movs	r2, #10
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f000 fad7 	bl	800527e <__multadd>
 8004cd0:	9b07      	ldr	r3, [sp, #28]
 8004cd2:	4682      	mov	sl, r0
 8004cd4:	42bb      	cmp	r3, r7
 8004cd6:	f04f 020a 	mov.w	r2, #10
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	9907      	ldr	r1, [sp, #28]
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	d104      	bne.n	8004cee <_dtoa_r+0xb3e>
 8004ce4:	f000 facb 	bl	800527e <__multadd>
 8004ce8:	9007      	str	r0, [sp, #28]
 8004cea:	4607      	mov	r7, r0
 8004cec:	e6b1      	b.n	8004a52 <_dtoa_r+0x8a2>
 8004cee:	f000 fac6 	bl	800527e <__multadd>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9007      	str	r0, [sp, #28]
 8004cf6:	220a      	movs	r2, #10
 8004cf8:	4639      	mov	r1, r7
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f000 fabf 	bl	800527e <__multadd>
 8004d00:	e7f3      	b.n	8004cea <_dtoa_r+0xb3a>
 8004d02:	4651      	mov	r1, sl
 8004d04:	2300      	movs	r3, #0
 8004d06:	220a      	movs	r2, #10
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f000 fab8 	bl	800527e <__multadd>
 8004d0e:	4682      	mov	sl, r0
 8004d10:	e768      	b.n	8004be4 <_dtoa_r+0xa34>
 8004d12:	9b06      	ldr	r3, [sp, #24]
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d105      	bne.n	8004d24 <_dtoa_r+0xb74>
 8004d18:	2331      	movs	r3, #49	; 0x31
 8004d1a:	9a06      	ldr	r2, [sp, #24]
 8004d1c:	f10b 0b01 	add.w	fp, fp, #1
 8004d20:	7013      	strb	r3, [r2, #0]
 8004d22:	e73e      	b.n	8004ba2 <_dtoa_r+0x9f2>
 8004d24:	4615      	mov	r5, r2
 8004d26:	e7b4      	b.n	8004c92 <_dtoa_r+0xae2>
 8004d28:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <_dtoa_r+0xba0>)
 8004d2a:	f7ff baa3 	b.w	8004274 <_dtoa_r+0xc4>
 8004d2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f47f aa7d 	bne.w	8004230 <_dtoa_r+0x80>
 8004d36:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <_dtoa_r+0xba4>)
 8004d38:	f7ff ba9c 	b.w	8004274 <_dtoa_r+0xc4>
 8004d3c:	9b04      	ldr	r3, [sp, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f73f af4f 	bgt.w	8004be2 <_dtoa_r+0xa32>
 8004d44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	f77f af4b 	ble.w	8004be2 <_dtoa_r+0xa32>
 8004d4c:	e714      	b.n	8004b78 <_dtoa_r+0x9c8>
 8004d4e:	bf00      	nop
 8004d50:	08005f32 	.word	0x08005f32
 8004d54:	08005f54 	.word	0x08005f54

08004d58 <_localeconv_r>:
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <_localeconv_r+0x14>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6a18      	ldr	r0, [r3, #32]
 8004d5e:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <_localeconv_r+0x18>)
 8004d60:	2800      	cmp	r0, #0
 8004d62:	bf08      	it	eq
 8004d64:	4618      	moveq	r0, r3
 8004d66:	30f0      	adds	r0, #240	; 0xf0
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	2000000c 	.word	0x2000000c
 8004d70:	20000510 	.word	0x20000510

08004d74 <malloc>:
 8004d74:	4b02      	ldr	r3, [pc, #8]	; (8004d80 <malloc+0xc>)
 8004d76:	4601      	mov	r1, r0
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f000 b803 	b.w	8004d84 <_malloc_r>
 8004d7e:	bf00      	nop
 8004d80:	2000000c 	.word	0x2000000c

08004d84 <_malloc_r>:
 8004d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d88:	f101 040b 	add.w	r4, r1, #11
 8004d8c:	2c16      	cmp	r4, #22
 8004d8e:	4681      	mov	r9, r0
 8004d90:	d907      	bls.n	8004da2 <_malloc_r+0x1e>
 8004d92:	f034 0407 	bics.w	r4, r4, #7
 8004d96:	d505      	bpl.n	8004da4 <_malloc_r+0x20>
 8004d98:	230c      	movs	r3, #12
 8004d9a:	f8c9 3000 	str.w	r3, [r9]
 8004d9e:	2600      	movs	r6, #0
 8004da0:	e131      	b.n	8005006 <_malloc_r+0x282>
 8004da2:	2410      	movs	r4, #16
 8004da4:	428c      	cmp	r4, r1
 8004da6:	d3f7      	bcc.n	8004d98 <_malloc_r+0x14>
 8004da8:	4648      	mov	r0, r9
 8004daa:	f000 fa11 	bl	80051d0 <__malloc_lock>
 8004dae:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004db2:	4d9b      	ldr	r5, [pc, #620]	; (8005020 <_malloc_r+0x29c>)
 8004db4:	d236      	bcs.n	8004e24 <_malloc_r+0xa0>
 8004db6:	f104 0208 	add.w	r2, r4, #8
 8004dba:	442a      	add	r2, r5
 8004dbc:	6856      	ldr	r6, [r2, #4]
 8004dbe:	f1a2 0108 	sub.w	r1, r2, #8
 8004dc2:	428e      	cmp	r6, r1
 8004dc4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004dc8:	d102      	bne.n	8004dd0 <_malloc_r+0x4c>
 8004dca:	68d6      	ldr	r6, [r2, #12]
 8004dcc:	42b2      	cmp	r2, r6
 8004dce:	d010      	beq.n	8004df2 <_malloc_r+0x6e>
 8004dd0:	6873      	ldr	r3, [r6, #4]
 8004dd2:	68f2      	ldr	r2, [r6, #12]
 8004dd4:	68b1      	ldr	r1, [r6, #8]
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	60ca      	str	r2, [r1, #12]
 8004ddc:	4433      	add	r3, r6
 8004dde:	6091      	str	r1, [r2, #8]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	4648      	mov	r0, r9
 8004dea:	f000 f9f7 	bl	80051dc <__malloc_unlock>
 8004dee:	3608      	adds	r6, #8
 8004df0:	e109      	b.n	8005006 <_malloc_r+0x282>
 8004df2:	3302      	adds	r3, #2
 8004df4:	4a8b      	ldr	r2, [pc, #556]	; (8005024 <_malloc_r+0x2a0>)
 8004df6:	692e      	ldr	r6, [r5, #16]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4296      	cmp	r6, r2
 8004dfc:	d06d      	beq.n	8004eda <_malloc_r+0x156>
 8004dfe:	6870      	ldr	r0, [r6, #4]
 8004e00:	f020 0003 	bic.w	r0, r0, #3
 8004e04:	1b07      	subs	r7, r0, r4
 8004e06:	2f0f      	cmp	r7, #15
 8004e08:	dd47      	ble.n	8004e9a <_malloc_r+0x116>
 8004e0a:	1933      	adds	r3, r6, r4
 8004e0c:	f044 0401 	orr.w	r4, r4, #1
 8004e10:	6074      	str	r4, [r6, #4]
 8004e12:	616b      	str	r3, [r5, #20]
 8004e14:	612b      	str	r3, [r5, #16]
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	609a      	str	r2, [r3, #8]
 8004e1a:	f047 0201 	orr.w	r2, r7, #1
 8004e1e:	605a      	str	r2, [r3, #4]
 8004e20:	5037      	str	r7, [r6, r0]
 8004e22:	e7e1      	b.n	8004de8 <_malloc_r+0x64>
 8004e24:	0a63      	lsrs	r3, r4, #9
 8004e26:	d02a      	beq.n	8004e7e <_malloc_r+0xfa>
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d812      	bhi.n	8004e52 <_malloc_r+0xce>
 8004e2c:	09a3      	lsrs	r3, r4, #6
 8004e2e:	3338      	adds	r3, #56	; 0x38
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004e36:	6856      	ldr	r6, [r2, #4]
 8004e38:	f1a2 0008 	sub.w	r0, r2, #8
 8004e3c:	4286      	cmp	r6, r0
 8004e3e:	d006      	beq.n	8004e4e <_malloc_r+0xca>
 8004e40:	6872      	ldr	r2, [r6, #4]
 8004e42:	f022 0203 	bic.w	r2, r2, #3
 8004e46:	1b11      	subs	r1, r2, r4
 8004e48:	290f      	cmp	r1, #15
 8004e4a:	dd1c      	ble.n	8004e86 <_malloc_r+0x102>
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	3301      	adds	r3, #1
 8004e50:	e7d0      	b.n	8004df4 <_malloc_r+0x70>
 8004e52:	2b14      	cmp	r3, #20
 8004e54:	d801      	bhi.n	8004e5a <_malloc_r+0xd6>
 8004e56:	335b      	adds	r3, #91	; 0x5b
 8004e58:	e7ea      	b.n	8004e30 <_malloc_r+0xac>
 8004e5a:	2b54      	cmp	r3, #84	; 0x54
 8004e5c:	d802      	bhi.n	8004e64 <_malloc_r+0xe0>
 8004e5e:	0b23      	lsrs	r3, r4, #12
 8004e60:	336e      	adds	r3, #110	; 0x6e
 8004e62:	e7e5      	b.n	8004e30 <_malloc_r+0xac>
 8004e64:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004e68:	d802      	bhi.n	8004e70 <_malloc_r+0xec>
 8004e6a:	0be3      	lsrs	r3, r4, #15
 8004e6c:	3377      	adds	r3, #119	; 0x77
 8004e6e:	e7df      	b.n	8004e30 <_malloc_r+0xac>
 8004e70:	f240 5254 	movw	r2, #1364	; 0x554
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d804      	bhi.n	8004e82 <_malloc_r+0xfe>
 8004e78:	0ca3      	lsrs	r3, r4, #18
 8004e7a:	337c      	adds	r3, #124	; 0x7c
 8004e7c:	e7d8      	b.n	8004e30 <_malloc_r+0xac>
 8004e7e:	233f      	movs	r3, #63	; 0x3f
 8004e80:	e7d6      	b.n	8004e30 <_malloc_r+0xac>
 8004e82:	237e      	movs	r3, #126	; 0x7e
 8004e84:	e7d4      	b.n	8004e30 <_malloc_r+0xac>
 8004e86:	2900      	cmp	r1, #0
 8004e88:	68f1      	ldr	r1, [r6, #12]
 8004e8a:	db04      	blt.n	8004e96 <_malloc_r+0x112>
 8004e8c:	68b3      	ldr	r3, [r6, #8]
 8004e8e:	60d9      	str	r1, [r3, #12]
 8004e90:	608b      	str	r3, [r1, #8]
 8004e92:	18b3      	adds	r3, r6, r2
 8004e94:	e7a4      	b.n	8004de0 <_malloc_r+0x5c>
 8004e96:	460e      	mov	r6, r1
 8004e98:	e7d0      	b.n	8004e3c <_malloc_r+0xb8>
 8004e9a:	2f00      	cmp	r7, #0
 8004e9c:	616a      	str	r2, [r5, #20]
 8004e9e:	612a      	str	r2, [r5, #16]
 8004ea0:	db05      	blt.n	8004eae <_malloc_r+0x12a>
 8004ea2:	4430      	add	r0, r6
 8004ea4:	6843      	ldr	r3, [r0, #4]
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	6043      	str	r3, [r0, #4]
 8004eac:	e79c      	b.n	8004de8 <_malloc_r+0x64>
 8004eae:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004eb2:	d244      	bcs.n	8004f3e <_malloc_r+0x1ba>
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	08c0      	lsrs	r0, r0, #3
 8004eb8:	1087      	asrs	r7, r0, #2
 8004eba:	fa02 f707 	lsl.w	r7, r2, r7
 8004ebe:	686a      	ldr	r2, [r5, #4]
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	433a      	orrs	r2, r7
 8004ec4:	606a      	str	r2, [r5, #4]
 8004ec6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8004eca:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004ece:	3a08      	subs	r2, #8
 8004ed0:	60f2      	str	r2, [r6, #12]
 8004ed2:	60b7      	str	r7, [r6, #8]
 8004ed4:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8004ed8:	60fe      	str	r6, [r7, #12]
 8004eda:	2001      	movs	r0, #1
 8004edc:	109a      	asrs	r2, r3, #2
 8004ede:	fa00 f202 	lsl.w	r2, r0, r2
 8004ee2:	6868      	ldr	r0, [r5, #4]
 8004ee4:	4282      	cmp	r2, r0
 8004ee6:	f200 809f 	bhi.w	8005028 <_malloc_r+0x2a4>
 8004eea:	4202      	tst	r2, r0
 8004eec:	d106      	bne.n	8004efc <_malloc_r+0x178>
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	0052      	lsls	r2, r2, #1
 8004ef4:	4202      	tst	r2, r0
 8004ef6:	f103 0304 	add.w	r3, r3, #4
 8004efa:	d0fa      	beq.n	8004ef2 <_malloc_r+0x16e>
 8004efc:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8004f00:	46e0      	mov	r8, ip
 8004f02:	469e      	mov	lr, r3
 8004f04:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004f08:	4546      	cmp	r6, r8
 8004f0a:	d153      	bne.n	8004fb4 <_malloc_r+0x230>
 8004f0c:	f10e 0e01 	add.w	lr, lr, #1
 8004f10:	f01e 0f03 	tst.w	lr, #3
 8004f14:	f108 0808 	add.w	r8, r8, #8
 8004f18:	d1f4      	bne.n	8004f04 <_malloc_r+0x180>
 8004f1a:	0798      	lsls	r0, r3, #30
 8004f1c:	d179      	bne.n	8005012 <_malloc_r+0x28e>
 8004f1e:	686b      	ldr	r3, [r5, #4]
 8004f20:	ea23 0302 	bic.w	r3, r3, r2
 8004f24:	606b      	str	r3, [r5, #4]
 8004f26:	6868      	ldr	r0, [r5, #4]
 8004f28:	0052      	lsls	r2, r2, #1
 8004f2a:	4282      	cmp	r2, r0
 8004f2c:	d87c      	bhi.n	8005028 <_malloc_r+0x2a4>
 8004f2e:	2a00      	cmp	r2, #0
 8004f30:	d07a      	beq.n	8005028 <_malloc_r+0x2a4>
 8004f32:	4673      	mov	r3, lr
 8004f34:	4202      	tst	r2, r0
 8004f36:	d1e1      	bne.n	8004efc <_malloc_r+0x178>
 8004f38:	3304      	adds	r3, #4
 8004f3a:	0052      	lsls	r2, r2, #1
 8004f3c:	e7fa      	b.n	8004f34 <_malloc_r+0x1b0>
 8004f3e:	0a42      	lsrs	r2, r0, #9
 8004f40:	2a04      	cmp	r2, #4
 8004f42:	d815      	bhi.n	8004f70 <_malloc_r+0x1ec>
 8004f44:	0982      	lsrs	r2, r0, #6
 8004f46:	3238      	adds	r2, #56	; 0x38
 8004f48:	1c57      	adds	r7, r2, #1
 8004f4a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004f4e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004f52:	45be      	cmp	lr, r7
 8004f54:	d126      	bne.n	8004fa4 <_malloc_r+0x220>
 8004f56:	2001      	movs	r0, #1
 8004f58:	1092      	asrs	r2, r2, #2
 8004f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f5e:	6868      	ldr	r0, [r5, #4]
 8004f60:	4310      	orrs	r0, r2
 8004f62:	6068      	str	r0, [r5, #4]
 8004f64:	f8c6 e00c 	str.w	lr, [r6, #12]
 8004f68:	60b7      	str	r7, [r6, #8]
 8004f6a:	f8ce 6008 	str.w	r6, [lr, #8]
 8004f6e:	e7b3      	b.n	8004ed8 <_malloc_r+0x154>
 8004f70:	2a14      	cmp	r2, #20
 8004f72:	d801      	bhi.n	8004f78 <_malloc_r+0x1f4>
 8004f74:	325b      	adds	r2, #91	; 0x5b
 8004f76:	e7e7      	b.n	8004f48 <_malloc_r+0x1c4>
 8004f78:	2a54      	cmp	r2, #84	; 0x54
 8004f7a:	d802      	bhi.n	8004f82 <_malloc_r+0x1fe>
 8004f7c:	0b02      	lsrs	r2, r0, #12
 8004f7e:	326e      	adds	r2, #110	; 0x6e
 8004f80:	e7e2      	b.n	8004f48 <_malloc_r+0x1c4>
 8004f82:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004f86:	d802      	bhi.n	8004f8e <_malloc_r+0x20a>
 8004f88:	0bc2      	lsrs	r2, r0, #15
 8004f8a:	3277      	adds	r2, #119	; 0x77
 8004f8c:	e7dc      	b.n	8004f48 <_malloc_r+0x1c4>
 8004f8e:	f240 5754 	movw	r7, #1364	; 0x554
 8004f92:	42ba      	cmp	r2, r7
 8004f94:	bf9a      	itte	ls
 8004f96:	0c82      	lsrls	r2, r0, #18
 8004f98:	327c      	addls	r2, #124	; 0x7c
 8004f9a:	227e      	movhi	r2, #126	; 0x7e
 8004f9c:	e7d4      	b.n	8004f48 <_malloc_r+0x1c4>
 8004f9e:	68bf      	ldr	r7, [r7, #8]
 8004fa0:	45be      	cmp	lr, r7
 8004fa2:	d004      	beq.n	8004fae <_malloc_r+0x22a>
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	f022 0203 	bic.w	r2, r2, #3
 8004faa:	4290      	cmp	r0, r2
 8004fac:	d3f7      	bcc.n	8004f9e <_malloc_r+0x21a>
 8004fae:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004fb2:	e7d7      	b.n	8004f64 <_malloc_r+0x1e0>
 8004fb4:	6870      	ldr	r0, [r6, #4]
 8004fb6:	68f7      	ldr	r7, [r6, #12]
 8004fb8:	f020 0003 	bic.w	r0, r0, #3
 8004fbc:	eba0 0a04 	sub.w	sl, r0, r4
 8004fc0:	f1ba 0f0f 	cmp.w	sl, #15
 8004fc4:	dd10      	ble.n	8004fe8 <_malloc_r+0x264>
 8004fc6:	68b2      	ldr	r2, [r6, #8]
 8004fc8:	1933      	adds	r3, r6, r4
 8004fca:	f044 0401 	orr.w	r4, r4, #1
 8004fce:	6074      	str	r4, [r6, #4]
 8004fd0:	60d7      	str	r7, [r2, #12]
 8004fd2:	60ba      	str	r2, [r7, #8]
 8004fd4:	f04a 0201 	orr.w	r2, sl, #1
 8004fd8:	616b      	str	r3, [r5, #20]
 8004fda:	612b      	str	r3, [r5, #16]
 8004fdc:	60d9      	str	r1, [r3, #12]
 8004fde:	6099      	str	r1, [r3, #8]
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	f846 a000 	str.w	sl, [r6, r0]
 8004fe6:	e6ff      	b.n	8004de8 <_malloc_r+0x64>
 8004fe8:	f1ba 0f00 	cmp.w	sl, #0
 8004fec:	db0f      	blt.n	800500e <_malloc_r+0x28a>
 8004fee:	4430      	add	r0, r6
 8004ff0:	6843      	ldr	r3, [r0, #4]
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6043      	str	r3, [r0, #4]
 8004ff8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004ffc:	4648      	mov	r0, r9
 8004ffe:	60df      	str	r7, [r3, #12]
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	f000 f8eb 	bl	80051dc <__malloc_unlock>
 8005006:	4630      	mov	r0, r6
 8005008:	b003      	add	sp, #12
 800500a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500e:	463e      	mov	r6, r7
 8005010:	e77a      	b.n	8004f08 <_malloc_r+0x184>
 8005012:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005016:	3b01      	subs	r3, #1
 8005018:	4584      	cmp	ip, r0
 800501a:	f43f af7e 	beq.w	8004f1a <_malloc_r+0x196>
 800501e:	e782      	b.n	8004f26 <_malloc_r+0x1a2>
 8005020:	20000100 	.word	0x20000100
 8005024:	20000108 	.word	0x20000108
 8005028:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800502c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005030:	f026 0603 	bic.w	r6, r6, #3
 8005034:	42b4      	cmp	r4, r6
 8005036:	d803      	bhi.n	8005040 <_malloc_r+0x2bc>
 8005038:	1b33      	subs	r3, r6, r4
 800503a:	2b0f      	cmp	r3, #15
 800503c:	f300 8095 	bgt.w	800516a <_malloc_r+0x3e6>
 8005040:	4a4f      	ldr	r2, [pc, #316]	; (8005180 <_malloc_r+0x3fc>)
 8005042:	eb0b 0306 	add.w	r3, fp, r6
 8005046:	6817      	ldr	r7, [r2, #0]
 8005048:	4a4e      	ldr	r2, [pc, #312]	; (8005184 <_malloc_r+0x400>)
 800504a:	3710      	adds	r7, #16
 800504c:	6811      	ldr	r1, [r2, #0]
 800504e:	4427      	add	r7, r4
 8005050:	3101      	adds	r1, #1
 8005052:	d005      	beq.n	8005060 <_malloc_r+0x2dc>
 8005054:	494c      	ldr	r1, [pc, #304]	; (8005188 <_malloc_r+0x404>)
 8005056:	3901      	subs	r1, #1
 8005058:	440f      	add	r7, r1
 800505a:	3101      	adds	r1, #1
 800505c:	4249      	negs	r1, r1
 800505e:	400f      	ands	r7, r1
 8005060:	4639      	mov	r1, r7
 8005062:	4648      	mov	r0, r9
 8005064:	9201      	str	r2, [sp, #4]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	f000 fb90 	bl	800578c <_sbrk_r>
 800506c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005070:	4680      	mov	r8, r0
 8005072:	d055      	beq.n	8005120 <_malloc_r+0x39c>
 8005074:	9b00      	ldr	r3, [sp, #0]
 8005076:	9a01      	ldr	r2, [sp, #4]
 8005078:	4283      	cmp	r3, r0
 800507a:	d901      	bls.n	8005080 <_malloc_r+0x2fc>
 800507c:	45ab      	cmp	fp, r5
 800507e:	d14f      	bne.n	8005120 <_malloc_r+0x39c>
 8005080:	4842      	ldr	r0, [pc, #264]	; (800518c <_malloc_r+0x408>)
 8005082:	4543      	cmp	r3, r8
 8005084:	6801      	ldr	r1, [r0, #0]
 8005086:	4682      	mov	sl, r0
 8005088:	eb07 0e01 	add.w	lr, r7, r1
 800508c:	f8c0 e000 	str.w	lr, [r0]
 8005090:	493f      	ldr	r1, [pc, #252]	; (8005190 <_malloc_r+0x40c>)
 8005092:	d113      	bne.n	80050bc <_malloc_r+0x338>
 8005094:	420b      	tst	r3, r1
 8005096:	d111      	bne.n	80050bc <_malloc_r+0x338>
 8005098:	68ab      	ldr	r3, [r5, #8]
 800509a:	443e      	add	r6, r7
 800509c:	f046 0601 	orr.w	r6, r6, #1
 80050a0:	605e      	str	r6, [r3, #4]
 80050a2:	4a3c      	ldr	r2, [pc, #240]	; (8005194 <_malloc_r+0x410>)
 80050a4:	f8da 3000 	ldr.w	r3, [sl]
 80050a8:	6811      	ldr	r1, [r2, #0]
 80050aa:	428b      	cmp	r3, r1
 80050ac:	bf88      	it	hi
 80050ae:	6013      	strhi	r3, [r2, #0]
 80050b0:	4a39      	ldr	r2, [pc, #228]	; (8005198 <_malloc_r+0x414>)
 80050b2:	6811      	ldr	r1, [r2, #0]
 80050b4:	428b      	cmp	r3, r1
 80050b6:	bf88      	it	hi
 80050b8:	6013      	strhi	r3, [r2, #0]
 80050ba:	e031      	b.n	8005120 <_malloc_r+0x39c>
 80050bc:	6810      	ldr	r0, [r2, #0]
 80050be:	3001      	adds	r0, #1
 80050c0:	bf1b      	ittet	ne
 80050c2:	eba8 0303 	subne.w	r3, r8, r3
 80050c6:	4473      	addne	r3, lr
 80050c8:	f8c2 8000 	streq.w	r8, [r2]
 80050cc:	f8ca 3000 	strne.w	r3, [sl]
 80050d0:	f018 0007 	ands.w	r0, r8, #7
 80050d4:	bf1c      	itt	ne
 80050d6:	f1c0 0008 	rsbne	r0, r0, #8
 80050da:	4480      	addne	r8, r0
 80050dc:	4b2a      	ldr	r3, [pc, #168]	; (8005188 <_malloc_r+0x404>)
 80050de:	4447      	add	r7, r8
 80050e0:	4418      	add	r0, r3
 80050e2:	400f      	ands	r7, r1
 80050e4:	1bc7      	subs	r7, r0, r7
 80050e6:	4639      	mov	r1, r7
 80050e8:	4648      	mov	r0, r9
 80050ea:	f000 fb4f 	bl	800578c <_sbrk_r>
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	bf04      	itt	eq
 80050f2:	4640      	moveq	r0, r8
 80050f4:	2700      	moveq	r7, #0
 80050f6:	f8da 3000 	ldr.w	r3, [sl]
 80050fa:	eba0 0008 	sub.w	r0, r0, r8
 80050fe:	443b      	add	r3, r7
 8005100:	4407      	add	r7, r0
 8005102:	f047 0701 	orr.w	r7, r7, #1
 8005106:	45ab      	cmp	fp, r5
 8005108:	f8c5 8008 	str.w	r8, [r5, #8]
 800510c:	f8ca 3000 	str.w	r3, [sl]
 8005110:	f8c8 7004 	str.w	r7, [r8, #4]
 8005114:	d0c5      	beq.n	80050a2 <_malloc_r+0x31e>
 8005116:	2e0f      	cmp	r6, #15
 8005118:	d810      	bhi.n	800513c <_malloc_r+0x3b8>
 800511a:	2301      	movs	r3, #1
 800511c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005120:	68ab      	ldr	r3, [r5, #8]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	f022 0203 	bic.w	r2, r2, #3
 8005128:	4294      	cmp	r4, r2
 800512a:	eba2 0304 	sub.w	r3, r2, r4
 800512e:	d801      	bhi.n	8005134 <_malloc_r+0x3b0>
 8005130:	2b0f      	cmp	r3, #15
 8005132:	dc1a      	bgt.n	800516a <_malloc_r+0x3e6>
 8005134:	4648      	mov	r0, r9
 8005136:	f000 f851 	bl	80051dc <__malloc_unlock>
 800513a:	e630      	b.n	8004d9e <_malloc_r+0x1a>
 800513c:	2205      	movs	r2, #5
 800513e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005142:	3e0c      	subs	r6, #12
 8005144:	f026 0607 	bic.w	r6, r6, #7
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	4333      	orrs	r3, r6
 800514e:	f8cb 3004 	str.w	r3, [fp, #4]
 8005152:	2e0f      	cmp	r6, #15
 8005154:	eb0b 0306 	add.w	r3, fp, r6
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	d9a1      	bls.n	80050a2 <_malloc_r+0x31e>
 800515e:	f10b 0108 	add.w	r1, fp, #8
 8005162:	4648      	mov	r0, r9
 8005164:	f000 fc20 	bl	80059a8 <_free_r>
 8005168:	e79b      	b.n	80050a2 <_malloc_r+0x31e>
 800516a:	68ae      	ldr	r6, [r5, #8]
 800516c:	f044 0201 	orr.w	r2, r4, #1
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	4434      	add	r4, r6
 8005176:	6072      	str	r2, [r6, #4]
 8005178:	60ac      	str	r4, [r5, #8]
 800517a:	6063      	str	r3, [r4, #4]
 800517c:	e634      	b.n	8004de8 <_malloc_r+0x64>
 800517e:	bf00      	nop
 8005180:	200006cc 	.word	0x200006cc
 8005184:	20000508 	.word	0x20000508
 8005188:	00000080 	.word	0x00000080
 800518c:	2000069c 	.word	0x2000069c
 8005190:	0000007f 	.word	0x0000007f
 8005194:	200006c4 	.word	0x200006c4
 8005198:	200006c8 	.word	0x200006c8

0800519c <memchr>:
 800519c:	b510      	push	{r4, lr}
 800519e:	b2c9      	uxtb	r1, r1
 80051a0:	4402      	add	r2, r0
 80051a2:	4290      	cmp	r0, r2
 80051a4:	4603      	mov	r3, r0
 80051a6:	d101      	bne.n	80051ac <memchr+0x10>
 80051a8:	2000      	movs	r0, #0
 80051aa:	bd10      	pop	{r4, pc}
 80051ac:	781c      	ldrb	r4, [r3, #0]
 80051ae:	3001      	adds	r0, #1
 80051b0:	428c      	cmp	r4, r1
 80051b2:	d1f6      	bne.n	80051a2 <memchr+0x6>
 80051b4:	4618      	mov	r0, r3
 80051b6:	bd10      	pop	{r4, pc}

080051b8 <memcpy>:
 80051b8:	b510      	push	{r4, lr}
 80051ba:	1e43      	subs	r3, r0, #1
 80051bc:	440a      	add	r2, r1
 80051be:	4291      	cmp	r1, r2
 80051c0:	d100      	bne.n	80051c4 <memcpy+0xc>
 80051c2:	bd10      	pop	{r4, pc}
 80051c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051cc:	e7f7      	b.n	80051be <memcpy+0x6>
	...

080051d0 <__malloc_lock>:
 80051d0:	4801      	ldr	r0, [pc, #4]	; (80051d8 <__malloc_lock+0x8>)
 80051d2:	f000 bca5 	b.w	8005b20 <__retarget_lock_acquire_recursive>
 80051d6:	bf00      	nop
 80051d8:	20000708 	.word	0x20000708

080051dc <__malloc_unlock>:
 80051dc:	4801      	ldr	r0, [pc, #4]	; (80051e4 <__malloc_unlock+0x8>)
 80051de:	f000 bca0 	b.w	8005b22 <__retarget_lock_release_recursive>
 80051e2:	bf00      	nop
 80051e4:	20000708 	.word	0x20000708

080051e8 <_Balloc>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80051ec:	4604      	mov	r4, r0
 80051ee:	460e      	mov	r6, r1
 80051f0:	b93d      	cbnz	r5, 8005202 <_Balloc+0x1a>
 80051f2:	2010      	movs	r0, #16
 80051f4:	f7ff fdbe 	bl	8004d74 <malloc>
 80051f8:	6260      	str	r0, [r4, #36]	; 0x24
 80051fa:	6045      	str	r5, [r0, #4]
 80051fc:	6085      	str	r5, [r0, #8]
 80051fe:	6005      	str	r5, [r0, #0]
 8005200:	60c5      	str	r5, [r0, #12]
 8005202:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005204:	68eb      	ldr	r3, [r5, #12]
 8005206:	b183      	cbz	r3, 800522a <_Balloc+0x42>
 8005208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005210:	b9b8      	cbnz	r0, 8005242 <_Balloc+0x5a>
 8005212:	2101      	movs	r1, #1
 8005214:	fa01 f506 	lsl.w	r5, r1, r6
 8005218:	1d6a      	adds	r2, r5, #5
 800521a:	0092      	lsls	r2, r2, #2
 800521c:	4620      	mov	r0, r4
 800521e:	f000 fb3f 	bl	80058a0 <_calloc_r>
 8005222:	b160      	cbz	r0, 800523e <_Balloc+0x56>
 8005224:	6046      	str	r6, [r0, #4]
 8005226:	6085      	str	r5, [r0, #8]
 8005228:	e00e      	b.n	8005248 <_Balloc+0x60>
 800522a:	2221      	movs	r2, #33	; 0x21
 800522c:	2104      	movs	r1, #4
 800522e:	4620      	mov	r0, r4
 8005230:	f000 fb36 	bl	80058a0 <_calloc_r>
 8005234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005236:	60e8      	str	r0, [r5, #12]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e4      	bne.n	8005208 <_Balloc+0x20>
 800523e:	2000      	movs	r0, #0
 8005240:	bd70      	pop	{r4, r5, r6, pc}
 8005242:	6802      	ldr	r2, [r0, #0]
 8005244:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005248:	2300      	movs	r3, #0
 800524a:	6103      	str	r3, [r0, #16]
 800524c:	60c3      	str	r3, [r0, #12]
 800524e:	bd70      	pop	{r4, r5, r6, pc}

08005250 <_Bfree>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005254:	4606      	mov	r6, r0
 8005256:	460d      	mov	r5, r1
 8005258:	b93c      	cbnz	r4, 800526a <_Bfree+0x1a>
 800525a:	2010      	movs	r0, #16
 800525c:	f7ff fd8a 	bl	8004d74 <malloc>
 8005260:	6270      	str	r0, [r6, #36]	; 0x24
 8005262:	6044      	str	r4, [r0, #4]
 8005264:	6084      	str	r4, [r0, #8]
 8005266:	6004      	str	r4, [r0, #0]
 8005268:	60c4      	str	r4, [r0, #12]
 800526a:	b13d      	cbz	r5, 800527c <_Bfree+0x2c>
 800526c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800526e:	686a      	ldr	r2, [r5, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005276:	6029      	str	r1, [r5, #0]
 8005278:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800527c:	bd70      	pop	{r4, r5, r6, pc}

0800527e <__multadd>:
 800527e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005282:	461f      	mov	r7, r3
 8005284:	4606      	mov	r6, r0
 8005286:	460c      	mov	r4, r1
 8005288:	2300      	movs	r3, #0
 800528a:	690d      	ldr	r5, [r1, #16]
 800528c:	f101 0e14 	add.w	lr, r1, #20
 8005290:	f8de 0000 	ldr.w	r0, [lr]
 8005294:	3301      	adds	r3, #1
 8005296:	b281      	uxth	r1, r0
 8005298:	fb02 7101 	mla	r1, r2, r1, r7
 800529c:	0c00      	lsrs	r0, r0, #16
 800529e:	0c0f      	lsrs	r7, r1, #16
 80052a0:	fb02 7000 	mla	r0, r2, r0, r7
 80052a4:	b289      	uxth	r1, r1
 80052a6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80052aa:	429d      	cmp	r5, r3
 80052ac:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80052b0:	f84e 1b04 	str.w	r1, [lr], #4
 80052b4:	dcec      	bgt.n	8005290 <__multadd+0x12>
 80052b6:	b1d7      	cbz	r7, 80052ee <__multadd+0x70>
 80052b8:	68a3      	ldr	r3, [r4, #8]
 80052ba:	429d      	cmp	r5, r3
 80052bc:	db12      	blt.n	80052e4 <__multadd+0x66>
 80052be:	6861      	ldr	r1, [r4, #4]
 80052c0:	4630      	mov	r0, r6
 80052c2:	3101      	adds	r1, #1
 80052c4:	f7ff ff90 	bl	80051e8 <_Balloc>
 80052c8:	4680      	mov	r8, r0
 80052ca:	6922      	ldr	r2, [r4, #16]
 80052cc:	f104 010c 	add.w	r1, r4, #12
 80052d0:	3202      	adds	r2, #2
 80052d2:	0092      	lsls	r2, r2, #2
 80052d4:	300c      	adds	r0, #12
 80052d6:	f7ff ff6f 	bl	80051b8 <memcpy>
 80052da:	4621      	mov	r1, r4
 80052dc:	4630      	mov	r0, r6
 80052de:	f7ff ffb7 	bl	8005250 <_Bfree>
 80052e2:	4644      	mov	r4, r8
 80052e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80052e8:	3501      	adds	r5, #1
 80052ea:	615f      	str	r7, [r3, #20]
 80052ec:	6125      	str	r5, [r4, #16]
 80052ee:	4620      	mov	r0, r4
 80052f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080052f4 <__hi0bits>:
 80052f4:	0c02      	lsrs	r2, r0, #16
 80052f6:	0412      	lsls	r2, r2, #16
 80052f8:	4603      	mov	r3, r0
 80052fa:	b9b2      	cbnz	r2, 800532a <__hi0bits+0x36>
 80052fc:	0403      	lsls	r3, r0, #16
 80052fe:	2010      	movs	r0, #16
 8005300:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005304:	bf04      	itt	eq
 8005306:	021b      	lsleq	r3, r3, #8
 8005308:	3008      	addeq	r0, #8
 800530a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800530e:	bf04      	itt	eq
 8005310:	011b      	lsleq	r3, r3, #4
 8005312:	3004      	addeq	r0, #4
 8005314:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005318:	bf04      	itt	eq
 800531a:	009b      	lsleq	r3, r3, #2
 800531c:	3002      	addeq	r0, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	db06      	blt.n	8005330 <__hi0bits+0x3c>
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	d503      	bpl.n	800532e <__hi0bits+0x3a>
 8005326:	3001      	adds	r0, #1
 8005328:	4770      	bx	lr
 800532a:	2000      	movs	r0, #0
 800532c:	e7e8      	b.n	8005300 <__hi0bits+0xc>
 800532e:	2020      	movs	r0, #32
 8005330:	4770      	bx	lr

08005332 <__lo0bits>:
 8005332:	6803      	ldr	r3, [r0, #0]
 8005334:	4601      	mov	r1, r0
 8005336:	f013 0207 	ands.w	r2, r3, #7
 800533a:	d00b      	beq.n	8005354 <__lo0bits+0x22>
 800533c:	07da      	lsls	r2, r3, #31
 800533e:	d423      	bmi.n	8005388 <__lo0bits+0x56>
 8005340:	0798      	lsls	r0, r3, #30
 8005342:	bf49      	itett	mi
 8005344:	085b      	lsrmi	r3, r3, #1
 8005346:	089b      	lsrpl	r3, r3, #2
 8005348:	2001      	movmi	r0, #1
 800534a:	600b      	strmi	r3, [r1, #0]
 800534c:	bf5c      	itt	pl
 800534e:	600b      	strpl	r3, [r1, #0]
 8005350:	2002      	movpl	r0, #2
 8005352:	4770      	bx	lr
 8005354:	b298      	uxth	r0, r3
 8005356:	b9a8      	cbnz	r0, 8005384 <__lo0bits+0x52>
 8005358:	2010      	movs	r0, #16
 800535a:	0c1b      	lsrs	r3, r3, #16
 800535c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005360:	bf04      	itt	eq
 8005362:	0a1b      	lsreq	r3, r3, #8
 8005364:	3008      	addeq	r0, #8
 8005366:	071a      	lsls	r2, r3, #28
 8005368:	bf04      	itt	eq
 800536a:	091b      	lsreq	r3, r3, #4
 800536c:	3004      	addeq	r0, #4
 800536e:	079a      	lsls	r2, r3, #30
 8005370:	bf04      	itt	eq
 8005372:	089b      	lsreq	r3, r3, #2
 8005374:	3002      	addeq	r0, #2
 8005376:	07da      	lsls	r2, r3, #31
 8005378:	d402      	bmi.n	8005380 <__lo0bits+0x4e>
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	d006      	beq.n	800538c <__lo0bits+0x5a>
 800537e:	3001      	adds	r0, #1
 8005380:	600b      	str	r3, [r1, #0]
 8005382:	4770      	bx	lr
 8005384:	4610      	mov	r0, r2
 8005386:	e7e9      	b.n	800535c <__lo0bits+0x2a>
 8005388:	2000      	movs	r0, #0
 800538a:	4770      	bx	lr
 800538c:	2020      	movs	r0, #32
 800538e:	4770      	bx	lr

08005390 <__i2b>:
 8005390:	b510      	push	{r4, lr}
 8005392:	460c      	mov	r4, r1
 8005394:	2101      	movs	r1, #1
 8005396:	f7ff ff27 	bl	80051e8 <_Balloc>
 800539a:	2201      	movs	r2, #1
 800539c:	6144      	str	r4, [r0, #20]
 800539e:	6102      	str	r2, [r0, #16]
 80053a0:	bd10      	pop	{r4, pc}

080053a2 <__multiply>:
 80053a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a6:	4614      	mov	r4, r2
 80053a8:	690a      	ldr	r2, [r1, #16]
 80053aa:	6923      	ldr	r3, [r4, #16]
 80053ac:	4689      	mov	r9, r1
 80053ae:	429a      	cmp	r2, r3
 80053b0:	bfbe      	ittt	lt
 80053b2:	460b      	movlt	r3, r1
 80053b4:	46a1      	movlt	r9, r4
 80053b6:	461c      	movlt	r4, r3
 80053b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80053bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80053c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80053c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80053c8:	eb07 060a 	add.w	r6, r7, sl
 80053cc:	429e      	cmp	r6, r3
 80053ce:	bfc8      	it	gt
 80053d0:	3101      	addgt	r1, #1
 80053d2:	f7ff ff09 	bl	80051e8 <_Balloc>
 80053d6:	f100 0514 	add.w	r5, r0, #20
 80053da:	462b      	mov	r3, r5
 80053dc:	2200      	movs	r2, #0
 80053de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80053e2:	4543      	cmp	r3, r8
 80053e4:	d316      	bcc.n	8005414 <__multiply+0x72>
 80053e6:	f104 0214 	add.w	r2, r4, #20
 80053ea:	f109 0114 	add.w	r1, r9, #20
 80053ee:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80053f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	9c01      	ldr	r4, [sp, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	4294      	cmp	r4, r2
 80053fe:	d80c      	bhi.n	800541a <__multiply+0x78>
 8005400:	2e00      	cmp	r6, #0
 8005402:	dd03      	ble.n	800540c <__multiply+0x6a>
 8005404:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005408:	2b00      	cmp	r3, #0
 800540a:	d054      	beq.n	80054b6 <__multiply+0x114>
 800540c:	6106      	str	r6, [r0, #16]
 800540e:	b003      	add	sp, #12
 8005410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005414:	f843 2b04 	str.w	r2, [r3], #4
 8005418:	e7e3      	b.n	80053e2 <__multiply+0x40>
 800541a:	f8b3 a000 	ldrh.w	sl, [r3]
 800541e:	3204      	adds	r2, #4
 8005420:	f1ba 0f00 	cmp.w	sl, #0
 8005424:	d020      	beq.n	8005468 <__multiply+0xc6>
 8005426:	46ae      	mov	lr, r5
 8005428:	4689      	mov	r9, r1
 800542a:	f04f 0c00 	mov.w	ip, #0
 800542e:	f859 4b04 	ldr.w	r4, [r9], #4
 8005432:	f8be b000 	ldrh.w	fp, [lr]
 8005436:	b2a3      	uxth	r3, r4
 8005438:	fb0a b303 	mla	r3, sl, r3, fp
 800543c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005440:	f8de 4000 	ldr.w	r4, [lr]
 8005444:	4463      	add	r3, ip
 8005446:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800544a:	fb0a c40b 	mla	r4, sl, fp, ip
 800544e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005452:	b29b      	uxth	r3, r3
 8005454:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005458:	454f      	cmp	r7, r9
 800545a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800545e:	f84e 3b04 	str.w	r3, [lr], #4
 8005462:	d8e4      	bhi.n	800542e <__multiply+0x8c>
 8005464:	f8ce c000 	str.w	ip, [lr]
 8005468:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800546c:	f1b9 0f00 	cmp.w	r9, #0
 8005470:	d01f      	beq.n	80054b2 <__multiply+0x110>
 8005472:	46ae      	mov	lr, r5
 8005474:	468c      	mov	ip, r1
 8005476:	f04f 0a00 	mov.w	sl, #0
 800547a:	682b      	ldr	r3, [r5, #0]
 800547c:	f8bc 4000 	ldrh.w	r4, [ip]
 8005480:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005484:	b29b      	uxth	r3, r3
 8005486:	fb09 b404 	mla	r4, r9, r4, fp
 800548a:	44a2      	add	sl, r4
 800548c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005490:	f84e 3b04 	str.w	r3, [lr], #4
 8005494:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005498:	f8be 4000 	ldrh.w	r4, [lr]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	fb09 4303 	mla	r3, r9, r3, r4
 80054a2:	4567      	cmp	r7, ip
 80054a4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80054a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054ac:	d8e6      	bhi.n	800547c <__multiply+0xda>
 80054ae:	f8ce 3000 	str.w	r3, [lr]
 80054b2:	3504      	adds	r5, #4
 80054b4:	e7a0      	b.n	80053f8 <__multiply+0x56>
 80054b6:	3e01      	subs	r6, #1
 80054b8:	e7a2      	b.n	8005400 <__multiply+0x5e>
	...

080054bc <__pow5mult>:
 80054bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054c0:	4615      	mov	r5, r2
 80054c2:	f012 0203 	ands.w	r2, r2, #3
 80054c6:	4606      	mov	r6, r0
 80054c8:	460f      	mov	r7, r1
 80054ca:	d007      	beq.n	80054dc <__pow5mult+0x20>
 80054cc:	4c21      	ldr	r4, [pc, #132]	; (8005554 <__pow5mult+0x98>)
 80054ce:	3a01      	subs	r2, #1
 80054d0:	2300      	movs	r3, #0
 80054d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054d6:	f7ff fed2 	bl	800527e <__multadd>
 80054da:	4607      	mov	r7, r0
 80054dc:	10ad      	asrs	r5, r5, #2
 80054de:	d035      	beq.n	800554c <__pow5mult+0x90>
 80054e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80054e2:	b93c      	cbnz	r4, 80054f4 <__pow5mult+0x38>
 80054e4:	2010      	movs	r0, #16
 80054e6:	f7ff fc45 	bl	8004d74 <malloc>
 80054ea:	6270      	str	r0, [r6, #36]	; 0x24
 80054ec:	6044      	str	r4, [r0, #4]
 80054ee:	6084      	str	r4, [r0, #8]
 80054f0:	6004      	str	r4, [r0, #0]
 80054f2:	60c4      	str	r4, [r0, #12]
 80054f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80054f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054fc:	b94c      	cbnz	r4, 8005512 <__pow5mult+0x56>
 80054fe:	f240 2171 	movw	r1, #625	; 0x271
 8005502:	4630      	mov	r0, r6
 8005504:	f7ff ff44 	bl	8005390 <__i2b>
 8005508:	2300      	movs	r3, #0
 800550a:	4604      	mov	r4, r0
 800550c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005510:	6003      	str	r3, [r0, #0]
 8005512:	f04f 0800 	mov.w	r8, #0
 8005516:	07eb      	lsls	r3, r5, #31
 8005518:	d50a      	bpl.n	8005530 <__pow5mult+0x74>
 800551a:	4639      	mov	r1, r7
 800551c:	4622      	mov	r2, r4
 800551e:	4630      	mov	r0, r6
 8005520:	f7ff ff3f 	bl	80053a2 <__multiply>
 8005524:	4681      	mov	r9, r0
 8005526:	4639      	mov	r1, r7
 8005528:	4630      	mov	r0, r6
 800552a:	f7ff fe91 	bl	8005250 <_Bfree>
 800552e:	464f      	mov	r7, r9
 8005530:	106d      	asrs	r5, r5, #1
 8005532:	d00b      	beq.n	800554c <__pow5mult+0x90>
 8005534:	6820      	ldr	r0, [r4, #0]
 8005536:	b938      	cbnz	r0, 8005548 <__pow5mult+0x8c>
 8005538:	4622      	mov	r2, r4
 800553a:	4621      	mov	r1, r4
 800553c:	4630      	mov	r0, r6
 800553e:	f7ff ff30 	bl	80053a2 <__multiply>
 8005542:	6020      	str	r0, [r4, #0]
 8005544:	f8c0 8000 	str.w	r8, [r0]
 8005548:	4604      	mov	r4, r0
 800554a:	e7e4      	b.n	8005516 <__pow5mult+0x5a>
 800554c:	4638      	mov	r0, r7
 800554e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005552:	bf00      	nop
 8005554:	08006058 	.word	0x08006058

08005558 <__lshift>:
 8005558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800555c:	460c      	mov	r4, r1
 800555e:	4607      	mov	r7, r0
 8005560:	4616      	mov	r6, r2
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005568:	eb0a 0903 	add.w	r9, sl, r3
 800556c:	6849      	ldr	r1, [r1, #4]
 800556e:	68a3      	ldr	r3, [r4, #8]
 8005570:	f109 0501 	add.w	r5, r9, #1
 8005574:	42ab      	cmp	r3, r5
 8005576:	db31      	blt.n	80055dc <__lshift+0x84>
 8005578:	4638      	mov	r0, r7
 800557a:	f7ff fe35 	bl	80051e8 <_Balloc>
 800557e:	2200      	movs	r2, #0
 8005580:	4680      	mov	r8, r0
 8005582:	4611      	mov	r1, r2
 8005584:	f100 0314 	add.w	r3, r0, #20
 8005588:	4552      	cmp	r2, sl
 800558a:	db2a      	blt.n	80055e2 <__lshift+0x8a>
 800558c:	6920      	ldr	r0, [r4, #16]
 800558e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005592:	f104 0114 	add.w	r1, r4, #20
 8005596:	f016 021f 	ands.w	r2, r6, #31
 800559a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800559e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80055a2:	d022      	beq.n	80055ea <__lshift+0x92>
 80055a4:	2000      	movs	r0, #0
 80055a6:	f1c2 0c20 	rsb	ip, r2, #32
 80055aa:	680e      	ldr	r6, [r1, #0]
 80055ac:	4096      	lsls	r6, r2
 80055ae:	4330      	orrs	r0, r6
 80055b0:	f843 0b04 	str.w	r0, [r3], #4
 80055b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80055b8:	458e      	cmp	lr, r1
 80055ba:	fa20 f00c 	lsr.w	r0, r0, ip
 80055be:	d8f4      	bhi.n	80055aa <__lshift+0x52>
 80055c0:	6018      	str	r0, [r3, #0]
 80055c2:	b108      	cbz	r0, 80055c8 <__lshift+0x70>
 80055c4:	f109 0502 	add.w	r5, r9, #2
 80055c8:	3d01      	subs	r5, #1
 80055ca:	4638      	mov	r0, r7
 80055cc:	f8c8 5010 	str.w	r5, [r8, #16]
 80055d0:	4621      	mov	r1, r4
 80055d2:	f7ff fe3d 	bl	8005250 <_Bfree>
 80055d6:	4640      	mov	r0, r8
 80055d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055dc:	3101      	adds	r1, #1
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	e7c8      	b.n	8005574 <__lshift+0x1c>
 80055e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80055e6:	3201      	adds	r2, #1
 80055e8:	e7ce      	b.n	8005588 <__lshift+0x30>
 80055ea:	3b04      	subs	r3, #4
 80055ec:	f851 2b04 	ldr.w	r2, [r1], #4
 80055f0:	458e      	cmp	lr, r1
 80055f2:	f843 2f04 	str.w	r2, [r3, #4]!
 80055f6:	d8f9      	bhi.n	80055ec <__lshift+0x94>
 80055f8:	e7e6      	b.n	80055c8 <__lshift+0x70>

080055fa <__mcmp>:
 80055fa:	6903      	ldr	r3, [r0, #16]
 80055fc:	690a      	ldr	r2, [r1, #16]
 80055fe:	b530      	push	{r4, r5, lr}
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	d10c      	bne.n	800561e <__mcmp+0x24>
 8005604:	0092      	lsls	r2, r2, #2
 8005606:	3014      	adds	r0, #20
 8005608:	3114      	adds	r1, #20
 800560a:	1884      	adds	r4, r0, r2
 800560c:	4411      	add	r1, r2
 800560e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005612:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005616:	4295      	cmp	r5, r2
 8005618:	d003      	beq.n	8005622 <__mcmp+0x28>
 800561a:	d305      	bcc.n	8005628 <__mcmp+0x2e>
 800561c:	2301      	movs	r3, #1
 800561e:	4618      	mov	r0, r3
 8005620:	bd30      	pop	{r4, r5, pc}
 8005622:	42a0      	cmp	r0, r4
 8005624:	d3f3      	bcc.n	800560e <__mcmp+0x14>
 8005626:	e7fa      	b.n	800561e <__mcmp+0x24>
 8005628:	f04f 33ff 	mov.w	r3, #4294967295
 800562c:	e7f7      	b.n	800561e <__mcmp+0x24>

0800562e <__mdiff>:
 800562e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005632:	460d      	mov	r5, r1
 8005634:	4607      	mov	r7, r0
 8005636:	4611      	mov	r1, r2
 8005638:	4628      	mov	r0, r5
 800563a:	4614      	mov	r4, r2
 800563c:	f7ff ffdd 	bl	80055fa <__mcmp>
 8005640:	1e06      	subs	r6, r0, #0
 8005642:	d108      	bne.n	8005656 <__mdiff+0x28>
 8005644:	4631      	mov	r1, r6
 8005646:	4638      	mov	r0, r7
 8005648:	f7ff fdce 	bl	80051e8 <_Balloc>
 800564c:	2301      	movs	r3, #1
 800564e:	6146      	str	r6, [r0, #20]
 8005650:	6103      	str	r3, [r0, #16]
 8005652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005656:	bfa4      	itt	ge
 8005658:	4623      	movge	r3, r4
 800565a:	462c      	movge	r4, r5
 800565c:	4638      	mov	r0, r7
 800565e:	6861      	ldr	r1, [r4, #4]
 8005660:	bfa6      	itte	ge
 8005662:	461d      	movge	r5, r3
 8005664:	2600      	movge	r6, #0
 8005666:	2601      	movlt	r6, #1
 8005668:	f7ff fdbe 	bl	80051e8 <_Balloc>
 800566c:	f04f 0c00 	mov.w	ip, #0
 8005670:	60c6      	str	r6, [r0, #12]
 8005672:	692b      	ldr	r3, [r5, #16]
 8005674:	6926      	ldr	r6, [r4, #16]
 8005676:	f104 0214 	add.w	r2, r4, #20
 800567a:	f105 0914 	add.w	r9, r5, #20
 800567e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005682:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005686:	f100 0114 	add.w	r1, r0, #20
 800568a:	f852 ab04 	ldr.w	sl, [r2], #4
 800568e:	f859 5b04 	ldr.w	r5, [r9], #4
 8005692:	fa1f f38a 	uxth.w	r3, sl
 8005696:	4463      	add	r3, ip
 8005698:	b2ac      	uxth	r4, r5
 800569a:	1b1b      	subs	r3, r3, r4
 800569c:	0c2c      	lsrs	r4, r5, #16
 800569e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80056a2:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80056ac:	45c8      	cmp	r8, r9
 80056ae:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80056b2:	4696      	mov	lr, r2
 80056b4:	f841 4b04 	str.w	r4, [r1], #4
 80056b8:	d8e7      	bhi.n	800568a <__mdiff+0x5c>
 80056ba:	45be      	cmp	lr, r7
 80056bc:	d305      	bcc.n	80056ca <__mdiff+0x9c>
 80056be:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80056c2:	b18b      	cbz	r3, 80056e8 <__mdiff+0xba>
 80056c4:	6106      	str	r6, [r0, #16]
 80056c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 80056ce:	b2a2      	uxth	r2, r4
 80056d0:	4462      	add	r2, ip
 80056d2:	1413      	asrs	r3, r2, #16
 80056d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80056d8:	b292      	uxth	r2, r2
 80056da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80056de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80056e2:	f841 2b04 	str.w	r2, [r1], #4
 80056e6:	e7e8      	b.n	80056ba <__mdiff+0x8c>
 80056e8:	3e01      	subs	r6, #1
 80056ea:	e7e8      	b.n	80056be <__mdiff+0x90>

080056ec <__d2b>:
 80056ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80056f0:	461c      	mov	r4, r3
 80056f2:	2101      	movs	r1, #1
 80056f4:	4690      	mov	r8, r2
 80056f6:	9e08      	ldr	r6, [sp, #32]
 80056f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80056fa:	f7ff fd75 	bl	80051e8 <_Balloc>
 80056fe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005702:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005706:	4607      	mov	r7, r0
 8005708:	bb34      	cbnz	r4, 8005758 <__d2b+0x6c>
 800570a:	9201      	str	r2, [sp, #4]
 800570c:	f1b8 0f00 	cmp.w	r8, #0
 8005710:	d027      	beq.n	8005762 <__d2b+0x76>
 8005712:	a802      	add	r0, sp, #8
 8005714:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005718:	f7ff fe0b 	bl	8005332 <__lo0bits>
 800571c:	9900      	ldr	r1, [sp, #0]
 800571e:	b1f0      	cbz	r0, 800575e <__d2b+0x72>
 8005720:	9a01      	ldr	r2, [sp, #4]
 8005722:	f1c0 0320 	rsb	r3, r0, #32
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	430b      	orrs	r3, r1
 800572c:	40c2      	lsrs	r2, r0
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	9201      	str	r2, [sp, #4]
 8005732:	9b01      	ldr	r3, [sp, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	bf14      	ite	ne
 8005738:	2102      	movne	r1, #2
 800573a:	2101      	moveq	r1, #1
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	6139      	str	r1, [r7, #16]
 8005740:	b1c4      	cbz	r4, 8005774 <__d2b+0x88>
 8005742:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005746:	4404      	add	r4, r0
 8005748:	6034      	str	r4, [r6, #0]
 800574a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800574e:	6028      	str	r0, [r5, #0]
 8005750:	4638      	mov	r0, r7
 8005752:	b002      	add	sp, #8
 8005754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005758:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800575c:	e7d5      	b.n	800570a <__d2b+0x1e>
 800575e:	6179      	str	r1, [r7, #20]
 8005760:	e7e7      	b.n	8005732 <__d2b+0x46>
 8005762:	a801      	add	r0, sp, #4
 8005764:	f7ff fde5 	bl	8005332 <__lo0bits>
 8005768:	2101      	movs	r1, #1
 800576a:	9b01      	ldr	r3, [sp, #4]
 800576c:	6139      	str	r1, [r7, #16]
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	3020      	adds	r0, #32
 8005772:	e7e5      	b.n	8005740 <__d2b+0x54>
 8005774:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005778:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800577c:	6030      	str	r0, [r6, #0]
 800577e:	6918      	ldr	r0, [r3, #16]
 8005780:	f7ff fdb8 	bl	80052f4 <__hi0bits>
 8005784:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005788:	e7e1      	b.n	800574e <__d2b+0x62>
	...

0800578c <_sbrk_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	2300      	movs	r3, #0
 8005790:	4c05      	ldr	r4, [pc, #20]	; (80057a8 <_sbrk_r+0x1c>)
 8005792:	4605      	mov	r5, r0
 8005794:	4608      	mov	r0, r1
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	f7fd fbd0 	bl	8002f3c <_sbrk>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_sbrk_r+0x1a>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_sbrk_r+0x1a>
 80057a4:	602b      	str	r3, [r5, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	20000710 	.word	0x20000710

080057ac <__ssprint_r>:
 80057ac:	6893      	ldr	r3, [r2, #8]
 80057ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b2:	4681      	mov	r9, r0
 80057b4:	460c      	mov	r4, r1
 80057b6:	4617      	mov	r7, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d060      	beq.n	800587e <__ssprint_r+0xd2>
 80057bc:	f04f 0b00 	mov.w	fp, #0
 80057c0:	465e      	mov	r6, fp
 80057c2:	f8d2 a000 	ldr.w	sl, [r2]
 80057c6:	b356      	cbz	r6, 800581e <__ssprint_r+0x72>
 80057c8:	68a3      	ldr	r3, [r4, #8]
 80057ca:	429e      	cmp	r6, r3
 80057cc:	d344      	bcc.n	8005858 <__ssprint_r+0xac>
 80057ce:	89a2      	ldrh	r2, [r4, #12]
 80057d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057d4:	d03e      	beq.n	8005854 <__ssprint_r+0xa8>
 80057d6:	2302      	movs	r3, #2
 80057d8:	6825      	ldr	r5, [r4, #0]
 80057da:	6921      	ldr	r1, [r4, #16]
 80057dc:	eba5 0801 	sub.w	r8, r5, r1
 80057e0:	6965      	ldr	r5, [r4, #20]
 80057e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057e6:	fb95 f5f3 	sdiv	r5, r5, r3
 80057ea:	f108 0301 	add.w	r3, r8, #1
 80057ee:	4433      	add	r3, r6
 80057f0:	429d      	cmp	r5, r3
 80057f2:	bf38      	it	cc
 80057f4:	461d      	movcc	r5, r3
 80057f6:	0553      	lsls	r3, r2, #21
 80057f8:	d546      	bpl.n	8005888 <__ssprint_r+0xdc>
 80057fa:	4629      	mov	r1, r5
 80057fc:	4648      	mov	r0, r9
 80057fe:	f7ff fac1 	bl	8004d84 <_malloc_r>
 8005802:	b998      	cbnz	r0, 800582c <__ssprint_r+0x80>
 8005804:	230c      	movs	r3, #12
 8005806:	f8c9 3000 	str.w	r3, [r9]
 800580a:	89a3      	ldrh	r3, [r4, #12]
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005814:	81a3      	strh	r3, [r4, #12]
 8005816:	2300      	movs	r3, #0
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	607b      	str	r3, [r7, #4]
 800581c:	e031      	b.n	8005882 <__ssprint_r+0xd6>
 800581e:	f8da b000 	ldr.w	fp, [sl]
 8005822:	f8da 6004 	ldr.w	r6, [sl, #4]
 8005826:	f10a 0a08 	add.w	sl, sl, #8
 800582a:	e7cc      	b.n	80057c6 <__ssprint_r+0x1a>
 800582c:	4642      	mov	r2, r8
 800582e:	6921      	ldr	r1, [r4, #16]
 8005830:	9001      	str	r0, [sp, #4]
 8005832:	f7ff fcc1 	bl	80051b8 <memcpy>
 8005836:	89a2      	ldrh	r2, [r4, #12]
 8005838:	9b01      	ldr	r3, [sp, #4]
 800583a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800583e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005842:	81a2      	strh	r2, [r4, #12]
 8005844:	6123      	str	r3, [r4, #16]
 8005846:	4443      	add	r3, r8
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	4633      	mov	r3, r6
 800584c:	6165      	str	r5, [r4, #20]
 800584e:	eba5 0508 	sub.w	r5, r5, r8
 8005852:	60a5      	str	r5, [r4, #8]
 8005854:	429e      	cmp	r6, r3
 8005856:	d200      	bcs.n	800585a <__ssprint_r+0xae>
 8005858:	4633      	mov	r3, r6
 800585a:	461a      	mov	r2, r3
 800585c:	4659      	mov	r1, fp
 800585e:	6820      	ldr	r0, [r4, #0]
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	f000 f971 	bl	8005b48 <memmove>
 8005866:	68a2      	ldr	r2, [r4, #8]
 8005868:	9b01      	ldr	r3, [sp, #4]
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	60a2      	str	r2, [r4, #8]
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	4413      	add	r3, r2
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	1b9e      	subs	r6, r3, r6
 8005878:	60be      	str	r6, [r7, #8]
 800587a:	2e00      	cmp	r6, #0
 800587c:	d1cf      	bne.n	800581e <__ssprint_r+0x72>
 800587e:	2000      	movs	r0, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	b003      	add	sp, #12
 8005884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005888:	462a      	mov	r2, r5
 800588a:	4648      	mov	r0, r9
 800588c:	f000 f976 	bl	8005b7c <_realloc_r>
 8005890:	4603      	mov	r3, r0
 8005892:	2800      	cmp	r0, #0
 8005894:	d1d6      	bne.n	8005844 <__ssprint_r+0x98>
 8005896:	6921      	ldr	r1, [r4, #16]
 8005898:	4648      	mov	r0, r9
 800589a:	f000 f885 	bl	80059a8 <_free_r>
 800589e:	e7b1      	b.n	8005804 <__ssprint_r+0x58>

080058a0 <_calloc_r>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	4351      	muls	r1, r2
 80058a4:	f7ff fa6e 	bl	8004d84 <_malloc_r>
 80058a8:	4604      	mov	r4, r0
 80058aa:	b198      	cbz	r0, 80058d4 <_calloc_r+0x34>
 80058ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80058b0:	f022 0203 	bic.w	r2, r2, #3
 80058b4:	3a04      	subs	r2, #4
 80058b6:	2a24      	cmp	r2, #36	; 0x24
 80058b8:	d81b      	bhi.n	80058f2 <_calloc_r+0x52>
 80058ba:	2a13      	cmp	r2, #19
 80058bc:	d917      	bls.n	80058ee <_calloc_r+0x4e>
 80058be:	2100      	movs	r1, #0
 80058c0:	2a1b      	cmp	r2, #27
 80058c2:	6001      	str	r1, [r0, #0]
 80058c4:	6041      	str	r1, [r0, #4]
 80058c6:	d807      	bhi.n	80058d8 <_calloc_r+0x38>
 80058c8:	f100 0308 	add.w	r3, r0, #8
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	4620      	mov	r0, r4
 80058d6:	bd10      	pop	{r4, pc}
 80058d8:	2a24      	cmp	r2, #36	; 0x24
 80058da:	6081      	str	r1, [r0, #8]
 80058dc:	60c1      	str	r1, [r0, #12]
 80058de:	bf11      	iteee	ne
 80058e0:	f100 0310 	addne.w	r3, r0, #16
 80058e4:	6101      	streq	r1, [r0, #16]
 80058e6:	f100 0318 	addeq.w	r3, r0, #24
 80058ea:	6141      	streq	r1, [r0, #20]
 80058ec:	e7ee      	b.n	80058cc <_calloc_r+0x2c>
 80058ee:	4603      	mov	r3, r0
 80058f0:	e7ec      	b.n	80058cc <_calloc_r+0x2c>
 80058f2:	2100      	movs	r1, #0
 80058f4:	f7fd fbd2 	bl	800309c <memset>
 80058f8:	e7ec      	b.n	80058d4 <_calloc_r+0x34>
	...

080058fc <_malloc_trim_r>:
 80058fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005900:	4689      	mov	r9, r1
 8005902:	4f25      	ldr	r7, [pc, #148]	; (8005998 <_malloc_trim_r+0x9c>)
 8005904:	4606      	mov	r6, r0
 8005906:	f7ff fc63 	bl	80051d0 <__malloc_lock>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80059a4 <_malloc_trim_r+0xa8>
 8005910:	685d      	ldr	r5, [r3, #4]
 8005912:	f1a8 0411 	sub.w	r4, r8, #17
 8005916:	f025 0503 	bic.w	r5, r5, #3
 800591a:	eba4 0409 	sub.w	r4, r4, r9
 800591e:	442c      	add	r4, r5
 8005920:	fbb4 f4f8 	udiv	r4, r4, r8
 8005924:	3c01      	subs	r4, #1
 8005926:	fb08 f404 	mul.w	r4, r8, r4
 800592a:	4544      	cmp	r4, r8
 800592c:	da05      	bge.n	800593a <_malloc_trim_r+0x3e>
 800592e:	4630      	mov	r0, r6
 8005930:	f7ff fc54 	bl	80051dc <__malloc_unlock>
 8005934:	2000      	movs	r0, #0
 8005936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800593a:	2100      	movs	r1, #0
 800593c:	4630      	mov	r0, r6
 800593e:	f7ff ff25 	bl	800578c <_sbrk_r>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	442b      	add	r3, r5
 8005946:	4298      	cmp	r0, r3
 8005948:	d1f1      	bne.n	800592e <_malloc_trim_r+0x32>
 800594a:	4261      	negs	r1, r4
 800594c:	4630      	mov	r0, r6
 800594e:	f7ff ff1d 	bl	800578c <_sbrk_r>
 8005952:	3001      	adds	r0, #1
 8005954:	d110      	bne.n	8005978 <_malloc_trim_r+0x7c>
 8005956:	2100      	movs	r1, #0
 8005958:	4630      	mov	r0, r6
 800595a:	f7ff ff17 	bl	800578c <_sbrk_r>
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	1a83      	subs	r3, r0, r2
 8005962:	2b0f      	cmp	r3, #15
 8005964:	dde3      	ble.n	800592e <_malloc_trim_r+0x32>
 8005966:	490d      	ldr	r1, [pc, #52]	; (800599c <_malloc_trim_r+0xa0>)
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	6809      	ldr	r1, [r1, #0]
 800596e:	6053      	str	r3, [r2, #4]
 8005970:	1a40      	subs	r0, r0, r1
 8005972:	490b      	ldr	r1, [pc, #44]	; (80059a0 <_malloc_trim_r+0xa4>)
 8005974:	6008      	str	r0, [r1, #0]
 8005976:	e7da      	b.n	800592e <_malloc_trim_r+0x32>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <_malloc_trim_r+0xa4>)
 800597c:	1b2d      	subs	r5, r5, r4
 800597e:	f045 0501 	orr.w	r5, r5, #1
 8005982:	605d      	str	r5, [r3, #4]
 8005984:	6813      	ldr	r3, [r2, #0]
 8005986:	4630      	mov	r0, r6
 8005988:	1b1c      	subs	r4, r3, r4
 800598a:	6014      	str	r4, [r2, #0]
 800598c:	f7ff fc26 	bl	80051dc <__malloc_unlock>
 8005990:	2001      	movs	r0, #1
 8005992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005996:	bf00      	nop
 8005998:	20000100 	.word	0x20000100
 800599c:	20000508 	.word	0x20000508
 80059a0:	2000069c 	.word	0x2000069c
 80059a4:	00000080 	.word	0x00000080

080059a8 <_free_r>:
 80059a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ac:	4604      	mov	r4, r0
 80059ae:	4688      	mov	r8, r1
 80059b0:	2900      	cmp	r1, #0
 80059b2:	f000 80ab 	beq.w	8005b0c <_free_r+0x164>
 80059b6:	f7ff fc0b 	bl	80051d0 <__malloc_lock>
 80059ba:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80059be:	4d54      	ldr	r5, [pc, #336]	; (8005b10 <_free_r+0x168>)
 80059c0:	f022 0001 	bic.w	r0, r2, #1
 80059c4:	f1a8 0308 	sub.w	r3, r8, #8
 80059c8:	181f      	adds	r7, r3, r0
 80059ca:	68a9      	ldr	r1, [r5, #8]
 80059cc:	687e      	ldr	r6, [r7, #4]
 80059ce:	428f      	cmp	r7, r1
 80059d0:	f026 0603 	bic.w	r6, r6, #3
 80059d4:	f002 0201 	and.w	r2, r2, #1
 80059d8:	d11b      	bne.n	8005a12 <_free_r+0x6a>
 80059da:	4430      	add	r0, r6
 80059dc:	b93a      	cbnz	r2, 80059ee <_free_r+0x46>
 80059de:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	6899      	ldr	r1, [r3, #8]
 80059e6:	4410      	add	r0, r2
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	60ca      	str	r2, [r1, #12]
 80059ec:	6091      	str	r1, [r2, #8]
 80059ee:	f040 0201 	orr.w	r2, r0, #1
 80059f2:	605a      	str	r2, [r3, #4]
 80059f4:	60ab      	str	r3, [r5, #8]
 80059f6:	4b47      	ldr	r3, [pc, #284]	; (8005b14 <_free_r+0x16c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4298      	cmp	r0, r3
 80059fc:	d304      	bcc.n	8005a08 <_free_r+0x60>
 80059fe:	4b46      	ldr	r3, [pc, #280]	; (8005b18 <_free_r+0x170>)
 8005a00:	4620      	mov	r0, r4
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	f7ff ff7a 	bl	80058fc <_malloc_trim_r>
 8005a08:	4620      	mov	r0, r4
 8005a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0e:	f7ff bbe5 	b.w	80051dc <__malloc_unlock>
 8005a12:	607e      	str	r6, [r7, #4]
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	d139      	bne.n	8005a8c <_free_r+0xe4>
 8005a18:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005a1c:	f105 0e08 	add.w	lr, r5, #8
 8005a20:	1a5b      	subs	r3, r3, r1
 8005a22:	4408      	add	r0, r1
 8005a24:	6899      	ldr	r1, [r3, #8]
 8005a26:	4571      	cmp	r1, lr
 8005a28:	d032      	beq.n	8005a90 <_free_r+0xe8>
 8005a2a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005a2e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005a32:	f8ce 1008 	str.w	r1, [lr, #8]
 8005a36:	19b9      	adds	r1, r7, r6
 8005a38:	6849      	ldr	r1, [r1, #4]
 8005a3a:	07c9      	lsls	r1, r1, #31
 8005a3c:	d40a      	bmi.n	8005a54 <_free_r+0xac>
 8005a3e:	4430      	add	r0, r6
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	bb3a      	cbnz	r2, 8005a94 <_free_r+0xec>
 8005a44:	4e35      	ldr	r6, [pc, #212]	; (8005b1c <_free_r+0x174>)
 8005a46:	42b1      	cmp	r1, r6
 8005a48:	d124      	bne.n	8005a94 <_free_r+0xec>
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	616b      	str	r3, [r5, #20]
 8005a4e:	612b      	str	r3, [r5, #16]
 8005a50:	60d9      	str	r1, [r3, #12]
 8005a52:	6099      	str	r1, [r3, #8]
 8005a54:	f040 0101 	orr.w	r1, r0, #1
 8005a58:	6059      	str	r1, [r3, #4]
 8005a5a:	5018      	str	r0, [r3, r0]
 8005a5c:	2a00      	cmp	r2, #0
 8005a5e:	d1d3      	bne.n	8005a08 <_free_r+0x60>
 8005a60:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005a64:	d21a      	bcs.n	8005a9c <_free_r+0xf4>
 8005a66:	2201      	movs	r2, #1
 8005a68:	08c0      	lsrs	r0, r0, #3
 8005a6a:	1081      	asrs	r1, r0, #2
 8005a6c:	408a      	lsls	r2, r1
 8005a6e:	6869      	ldr	r1, [r5, #4]
 8005a70:	3001      	adds	r0, #1
 8005a72:	430a      	orrs	r2, r1
 8005a74:	606a      	str	r2, [r5, #4]
 8005a76:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005a7a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005a7e:	3a08      	subs	r2, #8
 8005a80:	60da      	str	r2, [r3, #12]
 8005a82:	6099      	str	r1, [r3, #8]
 8005a84:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005a88:	60cb      	str	r3, [r1, #12]
 8005a8a:	e7bd      	b.n	8005a08 <_free_r+0x60>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	e7d2      	b.n	8005a36 <_free_r+0x8e>
 8005a90:	2201      	movs	r2, #1
 8005a92:	e7d0      	b.n	8005a36 <_free_r+0x8e>
 8005a94:	68fe      	ldr	r6, [r7, #12]
 8005a96:	60ce      	str	r6, [r1, #12]
 8005a98:	60b1      	str	r1, [r6, #8]
 8005a9a:	e7db      	b.n	8005a54 <_free_r+0xac>
 8005a9c:	0a42      	lsrs	r2, r0, #9
 8005a9e:	2a04      	cmp	r2, #4
 8005aa0:	d813      	bhi.n	8005aca <_free_r+0x122>
 8005aa2:	0982      	lsrs	r2, r0, #6
 8005aa4:	3238      	adds	r2, #56	; 0x38
 8005aa6:	1c51      	adds	r1, r2, #1
 8005aa8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005aac:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005ab0:	428e      	cmp	r6, r1
 8005ab2:	d124      	bne.n	8005afe <_free_r+0x156>
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	1092      	asrs	r2, r2, #2
 8005ab8:	fa00 f202 	lsl.w	r2, r0, r2
 8005abc:	6868      	ldr	r0, [r5, #4]
 8005abe:	4302      	orrs	r2, r0
 8005ac0:	606a      	str	r2, [r5, #4]
 8005ac2:	60de      	str	r6, [r3, #12]
 8005ac4:	6099      	str	r1, [r3, #8]
 8005ac6:	60b3      	str	r3, [r6, #8]
 8005ac8:	e7de      	b.n	8005a88 <_free_r+0xe0>
 8005aca:	2a14      	cmp	r2, #20
 8005acc:	d801      	bhi.n	8005ad2 <_free_r+0x12a>
 8005ace:	325b      	adds	r2, #91	; 0x5b
 8005ad0:	e7e9      	b.n	8005aa6 <_free_r+0xfe>
 8005ad2:	2a54      	cmp	r2, #84	; 0x54
 8005ad4:	d802      	bhi.n	8005adc <_free_r+0x134>
 8005ad6:	0b02      	lsrs	r2, r0, #12
 8005ad8:	326e      	adds	r2, #110	; 0x6e
 8005ada:	e7e4      	b.n	8005aa6 <_free_r+0xfe>
 8005adc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005ae0:	d802      	bhi.n	8005ae8 <_free_r+0x140>
 8005ae2:	0bc2      	lsrs	r2, r0, #15
 8005ae4:	3277      	adds	r2, #119	; 0x77
 8005ae6:	e7de      	b.n	8005aa6 <_free_r+0xfe>
 8005ae8:	f240 5154 	movw	r1, #1364	; 0x554
 8005aec:	428a      	cmp	r2, r1
 8005aee:	bf9a      	itte	ls
 8005af0:	0c82      	lsrls	r2, r0, #18
 8005af2:	327c      	addls	r2, #124	; 0x7c
 8005af4:	227e      	movhi	r2, #126	; 0x7e
 8005af6:	e7d6      	b.n	8005aa6 <_free_r+0xfe>
 8005af8:	6889      	ldr	r1, [r1, #8]
 8005afa:	428e      	cmp	r6, r1
 8005afc:	d004      	beq.n	8005b08 <_free_r+0x160>
 8005afe:	684a      	ldr	r2, [r1, #4]
 8005b00:	f022 0203 	bic.w	r2, r2, #3
 8005b04:	4290      	cmp	r0, r2
 8005b06:	d3f7      	bcc.n	8005af8 <_free_r+0x150>
 8005b08:	68ce      	ldr	r6, [r1, #12]
 8005b0a:	e7da      	b.n	8005ac2 <_free_r+0x11a>
 8005b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b10:	20000100 	.word	0x20000100
 8005b14:	2000050c 	.word	0x2000050c
 8005b18:	200006cc 	.word	0x200006cc
 8005b1c:	20000108 	.word	0x20000108

08005b20 <__retarget_lock_acquire_recursive>:
 8005b20:	4770      	bx	lr

08005b22 <__retarget_lock_release_recursive>:
 8005b22:	4770      	bx	lr

08005b24 <__ascii_mbtowc>:
 8005b24:	b082      	sub	sp, #8
 8005b26:	b901      	cbnz	r1, 8005b2a <__ascii_mbtowc+0x6>
 8005b28:	a901      	add	r1, sp, #4
 8005b2a:	b142      	cbz	r2, 8005b3e <__ascii_mbtowc+0x1a>
 8005b2c:	b14b      	cbz	r3, 8005b42 <__ascii_mbtowc+0x1e>
 8005b2e:	7813      	ldrb	r3, [r2, #0]
 8005b30:	600b      	str	r3, [r1, #0]
 8005b32:	7812      	ldrb	r2, [r2, #0]
 8005b34:	1c10      	adds	r0, r2, #0
 8005b36:	bf18      	it	ne
 8005b38:	2001      	movne	r0, #1
 8005b3a:	b002      	add	sp, #8
 8005b3c:	4770      	bx	lr
 8005b3e:	4610      	mov	r0, r2
 8005b40:	e7fb      	b.n	8005b3a <__ascii_mbtowc+0x16>
 8005b42:	f06f 0001 	mvn.w	r0, #1
 8005b46:	e7f8      	b.n	8005b3a <__ascii_mbtowc+0x16>

08005b48 <memmove>:
 8005b48:	4288      	cmp	r0, r1
 8005b4a:	b510      	push	{r4, lr}
 8005b4c:	eb01 0302 	add.w	r3, r1, r2
 8005b50:	d803      	bhi.n	8005b5a <memmove+0x12>
 8005b52:	1e42      	subs	r2, r0, #1
 8005b54:	4299      	cmp	r1, r3
 8005b56:	d10c      	bne.n	8005b72 <memmove+0x2a>
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	4298      	cmp	r0, r3
 8005b5c:	d2f9      	bcs.n	8005b52 <memmove+0xa>
 8005b5e:	1881      	adds	r1, r0, r2
 8005b60:	1ad2      	subs	r2, r2, r3
 8005b62:	42d3      	cmn	r3, r2
 8005b64:	d100      	bne.n	8005b68 <memmove+0x20>
 8005b66:	bd10      	pop	{r4, pc}
 8005b68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b70:	e7f7      	b.n	8005b62 <memmove+0x1a>
 8005b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b7a:	e7eb      	b.n	8005b54 <memmove+0xc>

08005b7c <_realloc_r>:
 8005b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b80:	4682      	mov	sl, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	b929      	cbnz	r1, 8005b92 <_realloc_r+0x16>
 8005b86:	4611      	mov	r1, r2
 8005b88:	b003      	add	sp, #12
 8005b8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8e:	f7ff b8f9 	b.w	8004d84 <_malloc_r>
 8005b92:	9201      	str	r2, [sp, #4]
 8005b94:	f7ff fb1c 	bl	80051d0 <__malloc_lock>
 8005b98:	9a01      	ldr	r2, [sp, #4]
 8005b9a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005b9e:	f102 080b 	add.w	r8, r2, #11
 8005ba2:	f1b8 0f16 	cmp.w	r8, #22
 8005ba6:	f1a4 0908 	sub.w	r9, r4, #8
 8005baa:	f025 0603 	bic.w	r6, r5, #3
 8005bae:	d90a      	bls.n	8005bc6 <_realloc_r+0x4a>
 8005bb0:	f038 0807 	bics.w	r8, r8, #7
 8005bb4:	d509      	bpl.n	8005bca <_realloc_r+0x4e>
 8005bb6:	230c      	movs	r3, #12
 8005bb8:	2700      	movs	r7, #0
 8005bba:	f8ca 3000 	str.w	r3, [sl]
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	b003      	add	sp, #12
 8005bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc6:	f04f 0810 	mov.w	r8, #16
 8005bca:	4590      	cmp	r8, r2
 8005bcc:	d3f3      	bcc.n	8005bb6 <_realloc_r+0x3a>
 8005bce:	45b0      	cmp	r8, r6
 8005bd0:	f340 8148 	ble.w	8005e64 <_realloc_r+0x2e8>
 8005bd4:	4ba9      	ldr	r3, [pc, #676]	; (8005e7c <_realloc_r+0x300>)
 8005bd6:	eb09 0106 	add.w	r1, r9, r6
 8005bda:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8005bde:	469b      	mov	fp, r3
 8005be0:	4571      	cmp	r1, lr
 8005be2:	684b      	ldr	r3, [r1, #4]
 8005be4:	d005      	beq.n	8005bf2 <_realloc_r+0x76>
 8005be6:	f023 0001 	bic.w	r0, r3, #1
 8005bea:	4408      	add	r0, r1
 8005bec:	6840      	ldr	r0, [r0, #4]
 8005bee:	07c7      	lsls	r7, r0, #31
 8005bf0:	d447      	bmi.n	8005c82 <_realloc_r+0x106>
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	4571      	cmp	r1, lr
 8005bf8:	eb06 0703 	add.w	r7, r6, r3
 8005bfc:	d119      	bne.n	8005c32 <_realloc_r+0xb6>
 8005bfe:	f108 0010 	add.w	r0, r8, #16
 8005c02:	4287      	cmp	r7, r0
 8005c04:	db3f      	blt.n	8005c86 <_realloc_r+0x10a>
 8005c06:	eba7 0708 	sub.w	r7, r7, r8
 8005c0a:	eb09 0308 	add.w	r3, r9, r8
 8005c0e:	f047 0701 	orr.w	r7, r7, #1
 8005c12:	f8cb 3008 	str.w	r3, [fp, #8]
 8005c16:	605f      	str	r7, [r3, #4]
 8005c18:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005c1c:	4650      	mov	r0, sl
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	ea43 0308 	orr.w	r3, r3, r8
 8005c26:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c2a:	f7ff fad7 	bl	80051dc <__malloc_unlock>
 8005c2e:	4627      	mov	r7, r4
 8005c30:	e7c5      	b.n	8005bbe <_realloc_r+0x42>
 8005c32:	45b8      	cmp	r8, r7
 8005c34:	dc27      	bgt.n	8005c86 <_realloc_r+0x10a>
 8005c36:	68cb      	ldr	r3, [r1, #12]
 8005c38:	688a      	ldr	r2, [r1, #8]
 8005c3a:	60d3      	str	r3, [r2, #12]
 8005c3c:	609a      	str	r2, [r3, #8]
 8005c3e:	eba7 0008 	sub.w	r0, r7, r8
 8005c42:	280f      	cmp	r0, #15
 8005c44:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005c48:	eb09 0207 	add.w	r2, r9, r7
 8005c4c:	f240 810c 	bls.w	8005e68 <_realloc_r+0x2ec>
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	eb09 0108 	add.w	r1, r9, r8
 8005c58:	ea43 0308 	orr.w	r3, r3, r8
 8005c5c:	f040 0001 	orr.w	r0, r0, #1
 8005c60:	f8c9 3004 	str.w	r3, [r9, #4]
 8005c64:	6048      	str	r0, [r1, #4]
 8005c66:	6853      	ldr	r3, [r2, #4]
 8005c68:	3108      	adds	r1, #8
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	6053      	str	r3, [r2, #4]
 8005c70:	4650      	mov	r0, sl
 8005c72:	f7ff fe99 	bl	80059a8 <_free_r>
 8005c76:	4650      	mov	r0, sl
 8005c78:	f7ff fab0 	bl	80051dc <__malloc_unlock>
 8005c7c:	f109 0708 	add.w	r7, r9, #8
 8005c80:	e79d      	b.n	8005bbe <_realloc_r+0x42>
 8005c82:	2300      	movs	r3, #0
 8005c84:	4619      	mov	r1, r3
 8005c86:	07e8      	lsls	r0, r5, #31
 8005c88:	f100 8085 	bmi.w	8005d96 <_realloc_r+0x21a>
 8005c8c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005c90:	eba9 0505 	sub.w	r5, r9, r5
 8005c94:	6868      	ldr	r0, [r5, #4]
 8005c96:	f020 0003 	bic.w	r0, r0, #3
 8005c9a:	4430      	add	r0, r6
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	d077      	beq.n	8005d90 <_realloc_r+0x214>
 8005ca0:	4571      	cmp	r1, lr
 8005ca2:	d151      	bne.n	8005d48 <_realloc_r+0x1cc>
 8005ca4:	4403      	add	r3, r0
 8005ca6:	f108 0110 	add.w	r1, r8, #16
 8005caa:	428b      	cmp	r3, r1
 8005cac:	db70      	blt.n	8005d90 <_realloc_r+0x214>
 8005cae:	462f      	mov	r7, r5
 8005cb0:	68ea      	ldr	r2, [r5, #12]
 8005cb2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8005cb6:	60ca      	str	r2, [r1, #12]
 8005cb8:	6091      	str	r1, [r2, #8]
 8005cba:	1f32      	subs	r2, r6, #4
 8005cbc:	2a24      	cmp	r2, #36	; 0x24
 8005cbe:	d83c      	bhi.n	8005d3a <_realloc_r+0x1be>
 8005cc0:	2a13      	cmp	r2, #19
 8005cc2:	d937      	bls.n	8005d34 <_realloc_r+0x1b8>
 8005cc4:	6821      	ldr	r1, [r4, #0]
 8005cc6:	2a1b      	cmp	r2, #27
 8005cc8:	60a9      	str	r1, [r5, #8]
 8005cca:	6861      	ldr	r1, [r4, #4]
 8005ccc:	60e9      	str	r1, [r5, #12]
 8005cce:	d81c      	bhi.n	8005d0a <_realloc_r+0x18e>
 8005cd0:	f105 0210 	add.w	r2, r5, #16
 8005cd4:	f104 0108 	add.w	r1, r4, #8
 8005cd8:	6808      	ldr	r0, [r1, #0]
 8005cda:	6010      	str	r0, [r2, #0]
 8005cdc:	6848      	ldr	r0, [r1, #4]
 8005cde:	6050      	str	r0, [r2, #4]
 8005ce0:	6889      	ldr	r1, [r1, #8]
 8005ce2:	6091      	str	r1, [r2, #8]
 8005ce4:	eba3 0308 	sub.w	r3, r3, r8
 8005ce8:	eb05 0208 	add.w	r2, r5, r8
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	f8cb 2008 	str.w	r2, [fp, #8]
 8005cf4:	6053      	str	r3, [r2, #4]
 8005cf6:	686b      	ldr	r3, [r5, #4]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	ea43 0308 	orr.w	r3, r3, r8
 8005d00:	606b      	str	r3, [r5, #4]
 8005d02:	4650      	mov	r0, sl
 8005d04:	f7ff fa6a 	bl	80051dc <__malloc_unlock>
 8005d08:	e759      	b.n	8005bbe <_realloc_r+0x42>
 8005d0a:	68a1      	ldr	r1, [r4, #8]
 8005d0c:	2a24      	cmp	r2, #36	; 0x24
 8005d0e:	6129      	str	r1, [r5, #16]
 8005d10:	68e1      	ldr	r1, [r4, #12]
 8005d12:	bf18      	it	ne
 8005d14:	f105 0218 	addne.w	r2, r5, #24
 8005d18:	6169      	str	r1, [r5, #20]
 8005d1a:	bf09      	itett	eq
 8005d1c:	6922      	ldreq	r2, [r4, #16]
 8005d1e:	f104 0110 	addne.w	r1, r4, #16
 8005d22:	61aa      	streq	r2, [r5, #24]
 8005d24:	6960      	ldreq	r0, [r4, #20]
 8005d26:	bf02      	ittt	eq
 8005d28:	f105 0220 	addeq.w	r2, r5, #32
 8005d2c:	f104 0118 	addeq.w	r1, r4, #24
 8005d30:	61e8      	streq	r0, [r5, #28]
 8005d32:	e7d1      	b.n	8005cd8 <_realloc_r+0x15c>
 8005d34:	463a      	mov	r2, r7
 8005d36:	4621      	mov	r1, r4
 8005d38:	e7ce      	b.n	8005cd8 <_realloc_r+0x15c>
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	f7ff ff02 	bl	8005b48 <memmove>
 8005d44:	9b01      	ldr	r3, [sp, #4]
 8005d46:	e7cd      	b.n	8005ce4 <_realloc_r+0x168>
 8005d48:	18c7      	adds	r7, r0, r3
 8005d4a:	45b8      	cmp	r8, r7
 8005d4c:	dc20      	bgt.n	8005d90 <_realloc_r+0x214>
 8005d4e:	68cb      	ldr	r3, [r1, #12]
 8005d50:	688a      	ldr	r2, [r1, #8]
 8005d52:	60d3      	str	r3, [r2, #12]
 8005d54:	609a      	str	r2, [r3, #8]
 8005d56:	4628      	mov	r0, r5
 8005d58:	68eb      	ldr	r3, [r5, #12]
 8005d5a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005d5e:	60d3      	str	r3, [r2, #12]
 8005d60:	609a      	str	r2, [r3, #8]
 8005d62:	1f32      	subs	r2, r6, #4
 8005d64:	2a24      	cmp	r2, #36	; 0x24
 8005d66:	d843      	bhi.n	8005df0 <_realloc_r+0x274>
 8005d68:	2a13      	cmp	r2, #19
 8005d6a:	d93f      	bls.n	8005dec <_realloc_r+0x270>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	2a1b      	cmp	r2, #27
 8005d70:	60ab      	str	r3, [r5, #8]
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	60eb      	str	r3, [r5, #12]
 8005d76:	d824      	bhi.n	8005dc2 <_realloc_r+0x246>
 8005d78:	f105 0010 	add.w	r0, r5, #16
 8005d7c:	f104 0308 	add.w	r3, r4, #8
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	6002      	str	r2, [r0, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	6042      	str	r2, [r0, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	6083      	str	r3, [r0, #8]
 8005d8c:	46a9      	mov	r9, r5
 8005d8e:	e756      	b.n	8005c3e <_realloc_r+0xc2>
 8005d90:	4580      	cmp	r8, r0
 8005d92:	4607      	mov	r7, r0
 8005d94:	dddf      	ble.n	8005d56 <_realloc_r+0x1da>
 8005d96:	4611      	mov	r1, r2
 8005d98:	4650      	mov	r0, sl
 8005d9a:	f7fe fff3 	bl	8004d84 <_malloc_r>
 8005d9e:	4607      	mov	r7, r0
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d0ae      	beq.n	8005d02 <_realloc_r+0x186>
 8005da4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005da8:	f1a0 0208 	sub.w	r2, r0, #8
 8005dac:	f023 0301 	bic.w	r3, r3, #1
 8005db0:	444b      	add	r3, r9
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d120      	bne.n	8005df8 <_realloc_r+0x27c>
 8005db6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005dba:	f027 0703 	bic.w	r7, r7, #3
 8005dbe:	4437      	add	r7, r6
 8005dc0:	e73d      	b.n	8005c3e <_realloc_r+0xc2>
 8005dc2:	68a3      	ldr	r3, [r4, #8]
 8005dc4:	2a24      	cmp	r2, #36	; 0x24
 8005dc6:	612b      	str	r3, [r5, #16]
 8005dc8:	68e3      	ldr	r3, [r4, #12]
 8005dca:	bf18      	it	ne
 8005dcc:	f105 0018 	addne.w	r0, r5, #24
 8005dd0:	616b      	str	r3, [r5, #20]
 8005dd2:	bf09      	itett	eq
 8005dd4:	6923      	ldreq	r3, [r4, #16]
 8005dd6:	f104 0310 	addne.w	r3, r4, #16
 8005dda:	61ab      	streq	r3, [r5, #24]
 8005ddc:	6962      	ldreq	r2, [r4, #20]
 8005dde:	bf02      	ittt	eq
 8005de0:	f105 0020 	addeq.w	r0, r5, #32
 8005de4:	f104 0318 	addeq.w	r3, r4, #24
 8005de8:	61ea      	streq	r2, [r5, #28]
 8005dea:	e7c9      	b.n	8005d80 <_realloc_r+0x204>
 8005dec:	4623      	mov	r3, r4
 8005dee:	e7c7      	b.n	8005d80 <_realloc_r+0x204>
 8005df0:	4621      	mov	r1, r4
 8005df2:	f7ff fea9 	bl	8005b48 <memmove>
 8005df6:	e7c9      	b.n	8005d8c <_realloc_r+0x210>
 8005df8:	1f32      	subs	r2, r6, #4
 8005dfa:	2a24      	cmp	r2, #36	; 0x24
 8005dfc:	d82e      	bhi.n	8005e5c <_realloc_r+0x2e0>
 8005dfe:	2a13      	cmp	r2, #19
 8005e00:	d929      	bls.n	8005e56 <_realloc_r+0x2da>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	2a1b      	cmp	r2, #27
 8005e06:	6003      	str	r3, [r0, #0]
 8005e08:	6863      	ldr	r3, [r4, #4]
 8005e0a:	6043      	str	r3, [r0, #4]
 8005e0c:	d80e      	bhi.n	8005e2c <_realloc_r+0x2b0>
 8005e0e:	f100 0308 	add.w	r3, r0, #8
 8005e12:	f104 0208 	add.w	r2, r4, #8
 8005e16:	6811      	ldr	r1, [r2, #0]
 8005e18:	6019      	str	r1, [r3, #0]
 8005e1a:	6851      	ldr	r1, [r2, #4]
 8005e1c:	6059      	str	r1, [r3, #4]
 8005e1e:	6892      	ldr	r2, [r2, #8]
 8005e20:	609a      	str	r2, [r3, #8]
 8005e22:	4621      	mov	r1, r4
 8005e24:	4650      	mov	r0, sl
 8005e26:	f7ff fdbf 	bl	80059a8 <_free_r>
 8005e2a:	e76a      	b.n	8005d02 <_realloc_r+0x186>
 8005e2c:	68a3      	ldr	r3, [r4, #8]
 8005e2e:	2a24      	cmp	r2, #36	; 0x24
 8005e30:	6083      	str	r3, [r0, #8]
 8005e32:	68e3      	ldr	r3, [r4, #12]
 8005e34:	bf18      	it	ne
 8005e36:	f104 0210 	addne.w	r2, r4, #16
 8005e3a:	60c3      	str	r3, [r0, #12]
 8005e3c:	bf09      	itett	eq
 8005e3e:	6923      	ldreq	r3, [r4, #16]
 8005e40:	f100 0310 	addne.w	r3, r0, #16
 8005e44:	6103      	streq	r3, [r0, #16]
 8005e46:	6961      	ldreq	r1, [r4, #20]
 8005e48:	bf02      	ittt	eq
 8005e4a:	f100 0318 	addeq.w	r3, r0, #24
 8005e4e:	f104 0218 	addeq.w	r2, r4, #24
 8005e52:	6141      	streq	r1, [r0, #20]
 8005e54:	e7df      	b.n	8005e16 <_realloc_r+0x29a>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4622      	mov	r2, r4
 8005e5a:	e7dc      	b.n	8005e16 <_realloc_r+0x29a>
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	f7ff fe73 	bl	8005b48 <memmove>
 8005e62:	e7de      	b.n	8005e22 <_realloc_r+0x2a6>
 8005e64:	4637      	mov	r7, r6
 8005e66:	e6ea      	b.n	8005c3e <_realloc_r+0xc2>
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	431f      	orrs	r7, r3
 8005e6e:	f8c9 7004 	str.w	r7, [r9, #4]
 8005e72:	6853      	ldr	r3, [r2, #4]
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	6053      	str	r3, [r2, #4]
 8005e7a:	e6fc      	b.n	8005c76 <_realloc_r+0xfa>
 8005e7c:	20000100 	.word	0x20000100

08005e80 <__ascii_wctomb>:
 8005e80:	b149      	cbz	r1, 8005e96 <__ascii_wctomb+0x16>
 8005e82:	2aff      	cmp	r2, #255	; 0xff
 8005e84:	bf8b      	itete	hi
 8005e86:	238a      	movhi	r3, #138	; 0x8a
 8005e88:	700a      	strbls	r2, [r1, #0]
 8005e8a:	6003      	strhi	r3, [r0, #0]
 8005e8c:	2001      	movls	r0, #1
 8005e8e:	bf88      	it	hi
 8005e90:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e94:	4770      	bx	lr
 8005e96:	4608      	mov	r0, r1
 8005e98:	4770      	bx	lr
	...

08005e9c <_init>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr

08005ea8 <_fini>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	bf00      	nop
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr
